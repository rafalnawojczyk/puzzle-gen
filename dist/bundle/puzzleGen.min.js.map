{"version":3,"file":"puzzleGen.min.js","mappings":"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","sources":["webpack://puzzleGen/webpack/universalModuleDefinition","webpack://puzzleGen/webpack/bootstrap","webpack://puzzleGen/webpack/runtime/define property getters","webpack://puzzleGen/webpack/runtime/hasOwnProperty shorthand","webpack://puzzleGen/webpack/runtime/make namespace object","webpack://puzzleGen/./src/algorithms/algorithm.ts","webpack://puzzleGen/./src/algorithms/cube.ts","webpack://puzzleGen/./src/simulator/simulator.ts","webpack://puzzleGen/./src/puzzles/colors.ts","webpack://puzzleGen/./src/puzzles/square1/enum.ts","webpack://puzzleGen/./src/math/vector.ts","webpack://puzzleGen/./src/puzzles/square1/constants.ts","webpack://puzzleGen/./src/algorithms/square1.ts","webpack://puzzleGen/./src/simulator/square1/square1Simulator.ts","webpack://puzzleGen/./src/algorithms/skewb.ts","webpack://puzzleGen/./src/utils/arrays.ts","webpack://puzzleGen/./src/simulator/skewb/skewbSimulator.ts","webpack://puzzleGen/./src/algorithms/pyraminx.ts","webpack://puzzleGen/./src/simulator/pyraminx/pyraminxSimulator.ts","webpack://puzzleGen/./src/simulator/megaminx/constants.ts","webpack://puzzleGen/./src/algorithms/megaminx.ts","webpack://puzzleGen/./src/simulator/megaminx/megaminxSimulator.ts","webpack://puzzleGen/./src/simulator/rubiksCube/constants.ts","webpack://puzzleGen/./src/math/utils.ts","webpack://puzzleGen/./src/simulator/rubiksCube/rubiksCubeSimulator.ts","webpack://puzzleGen/./src/geometry/uid.ts","webpack://puzzleGen/./src/math/matrix.ts","webpack://puzzleGen/./src/geometry/object3d.ts","webpack://puzzleGen/./src/geometry/group.ts","webpack://puzzleGen/./src/math/constants.ts","webpack://puzzleGen/./src/puzzles/square1/interface.ts","webpack://puzzleGen/./src/geometry/face.ts","webpack://puzzleGen/./src/geometry/geometry.ts","webpack://puzzleGen/./src/puzzles/square1/square1Net.ts","webpack://puzzleGen/./src/puzzles/square1/square1.ts","webpack://puzzleGen/./src/geometry/plane.ts","webpack://puzzleGen/./src/geometry/triangle.ts","webpack://puzzleGen/./src/puzzles/skewbNet.ts","webpack://puzzleGen/./src/puzzles/skewb.ts","webpack://puzzleGen/./src/geometry/triangleLattice.ts","webpack://puzzleGen/./src/puzzles/pyraminxNet.ts","webpack://puzzleGen/./src/puzzles/pyraminx.ts","webpack://puzzleGen/./src/geometry/dividedPentagon.ts","webpack://puzzleGen/./src/puzzles/megaminxNet.ts","webpack://puzzleGen/./src/puzzles/megaminx.ts","webpack://puzzleGen/./src/geometry/grid.ts","webpack://puzzleGen/./src/puzzles/rubiksCube/rubiksCubeTop.ts","webpack://puzzleGen/./src/puzzles/rubiksCube/rubiksCubeNet.ts","webpack://puzzleGen/./src/puzzles/rubiksCube/rubiksCube.ts","webpack://puzzleGen/./src/geometry/arrow.ts","webpack://puzzleGen/./src/rendering/utils.ts","webpack://puzzleGen/./src/rendering/polygonRenderer.ts","webpack://puzzleGen/./src/svg/svg.ts","webpack://puzzleGen/./src/rendering/htmlSvgRenderer.ts","webpack://puzzleGen/./src/rendering/htmlCanvasRenderer.ts","webpack://puzzleGen/./src/rendering/camera.ts","webpack://puzzleGen/./src/rendering/scene.ts","webpack://puzzleGen/./src/visualizer/enum.ts","webpack://puzzleGen/./src/visualizer/options.ts","webpack://puzzleGen/./src/visualizer/interface.ts","webpack://puzzleGen/./src/puzzles/megaminxTop.ts","webpack://puzzleGen/./src/visualizer/puzzleCreator.ts","webpack://puzzleGen/./src/math/quaternion.ts","webpack://puzzleGen/./src/visualizer/visualizer.ts","webpack://puzzleGen/./src/visualizer/svg.ts","webpack://puzzleGen/./src/visualizer/png.ts","webpack://puzzleGen/./src/visualizer/canvas.ts","webpack://puzzleGen/./src/visualizer/mask.ts","webpack://puzzleGen/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"puzzleGen\"] = factory();\n\telse\n\t\troot[\"puzzleGen\"] = factory();\n})(this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export var TurnType;\r\n(function (TurnType) {\r\n    TurnType[TurnType[\"Clockwise\"] = 0] = \"Clockwise\";\r\n    TurnType[TurnType[\"CounterClockwise\"] = 1] = \"CounterClockwise\";\r\n    TurnType[TurnType[\"Double\"] = 2] = \"Double\";\r\n})(TurnType || (TurnType = {}));\r\n","import { TurnType } from \"./algorithm\";\r\nvar TurnAbbreviation;\r\n(function (TurnAbbreviation) {\r\n    TurnAbbreviation[\"Clockwise\"] = \"\";\r\n    TurnAbbreviation[\"CounterClockwise\"] = \"'\";\r\n    TurnAbbreviation[\"Double\"] = \"2\";\r\n})(TurnAbbreviation || (TurnAbbreviation = {}));\r\nexport var CubeAlgorithmUnit;\r\n(function (CubeAlgorithmUnit) {\r\n    CubeAlgorithmUnit[\"F\"] = \"F\";\r\n    CubeAlgorithmUnit[\"U\"] = \"U\";\r\n    CubeAlgorithmUnit[\"R\"] = \"R\";\r\n    CubeAlgorithmUnit[\"L\"] = \"L\";\r\n    CubeAlgorithmUnit[\"D\"] = \"D\";\r\n    CubeAlgorithmUnit[\"B\"] = \"B\";\r\n    CubeAlgorithmUnit[\"M\"] = \"M\";\r\n    CubeAlgorithmUnit[\"E\"] = \"E\";\r\n    CubeAlgorithmUnit[\"S\"] = \"S\";\r\n    CubeAlgorithmUnit[\"X\"] = \"x\";\r\n    CubeAlgorithmUnit[\"Y\"] = \"y\";\r\n    CubeAlgorithmUnit[\"Z\"] = \"z\";\r\n})(CubeAlgorithmUnit || (CubeAlgorithmUnit = {}));\r\nexport const possibleMoves = [\r\n    CubeAlgorithmUnit.F,\r\n    CubeAlgorithmUnit.U,\r\n    CubeAlgorithmUnit.R,\r\n    CubeAlgorithmUnit.L,\r\n    CubeAlgorithmUnit.D,\r\n    CubeAlgorithmUnit.B,\r\n    CubeAlgorithmUnit.M,\r\n    CubeAlgorithmUnit.E,\r\n    CubeAlgorithmUnit.S,\r\n    CubeAlgorithmUnit.X,\r\n    CubeAlgorithmUnit.Y,\r\n    CubeAlgorithmUnit.Z,\r\n];\r\nconst cubeRotations = [\r\n    CubeAlgorithmUnit.X,\r\n    CubeAlgorithmUnit.Y,\r\n    CubeAlgorithmUnit.Z,\r\n];\r\nconst cubeTurnRegex = /([0-9]+)?([UuFfRrDdLlBbMESxyz])(w)?([2\\'])?/g;\r\n/**\r\n * Takes in an algorithm string and parses the turns from it\r\n * algorithm string format should be moves separated by a single space\r\n * (ex. \"U R2 L' x\")\r\n *\r\n * https://www.worldcubeassociation.org/regulations/#article-12-notation\r\n */\r\nexport function parseCubeAlgorithm(algorithm) {\r\n    if (!algorithm) {\r\n        return [];\r\n    }\r\n    let turns = [];\r\n    let match;\r\n    while ((match = cubeTurnRegex.exec(algorithm))) {\r\n        let rawSlices = match[1];\r\n        let rawFace = match[2];\r\n        let outerBlockIndicator = match[3];\r\n        let rawType = match[4] || TurnAbbreviation.Clockwise; // Default to clockwise\r\n        let isLowerCaseMove = rawFace === rawFace.toLowerCase() &&\r\n            cubeRotations.indexOf(rawFace) === -1;\r\n        if (isLowerCaseMove) {\r\n            rawFace = rawFace.toUpperCase();\r\n        }\r\n        let turn = {\r\n            unit: getMove(rawFace),\r\n            turnType: getTurnType(rawType),\r\n            slices: isLowerCaseMove ? 2 : getSlices(rawSlices, outerBlockIndicator),\r\n        };\r\n        turns.push(turn);\r\n    }\r\n    return turns;\r\n}\r\nfunction getSlices(rawSlices, outerBlockIndicator) {\r\n    if (outerBlockIndicator && !rawSlices) {\r\n        return 2;\r\n    }\r\n    else if (!outerBlockIndicator && rawSlices) {\r\n        throw new Error(`Invalid move: Cannot specify num slices if outer block move indicator 'w' is not present`);\r\n    }\r\n    else if (!outerBlockIndicator && !rawSlices) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const intValue = parseInt(rawSlices);\r\n        if (intValue > 1) {\r\n            return intValue;\r\n        }\r\n        throw new Error(`Invalid outer block move (${intValue}) must be greater than 1`);\r\n    }\r\n}\r\nfunction getMove(rawFace) {\r\n    if (possibleMoves.indexOf(rawFace) < 0) {\r\n        throw new Error(`Invalid move (${rawFace}): Possible turn faces are [U R F L D B M E S x y z]`);\r\n    }\r\n    else\r\n        return rawFace;\r\n}\r\nfunction getTurnType(rawType) {\r\n    switch (rawType) {\r\n        case TurnAbbreviation.Clockwise:\r\n            return TurnType.Clockwise;\r\n        case TurnAbbreviation.CounterClockwise:\r\n            return TurnType.CounterClockwise;\r\n        case TurnAbbreviation.Double:\r\n            return TurnType.Double;\r\n        default:\r\n            throw new Error(`Invalid move modifier (${rawType})`);\r\n    }\r\n}\r\n","/**\r\n * Class for simulating turns on symmetric twisty puzzles. This is acheived by\r\n * defining a set of faces with stickers, and a set of turns.\r\n *\r\n * @see {@link SkewbSimulator}\r\n *\r\n * @example\r\n * ```typescript\r\n * // extend class to create a coin simulator\r\n * export class CoinSimulator extends Simulator {\r\n *   constructor() {\r\n *     super()\r\n *\r\n *     // Add a head face with one \"heads\" sticker\r\n *     // Label this face \"top\"\r\n *      const { stickerIds: top } = this.addFace(['heads'], 'top');\r\n *\r\n *     // Add a tail face with one \"tails\" sticker\r\n *     // Label this face \"bottom\"\r\n *      const { stickerIds: bottom } = this.addface(['tails'], 'bottom');\r\n *\r\n *     // Define a turn by providing the\r\n *     // sticker id for the top and bottom stickers.\r\n *     // Label this \"turnOver\"\r\n *     this.addTurn([top[0], bottom[0]], \"turnOver\");\r\n *   }\r\n *\r\n *   // Flip the coin over\r\n *   turnOver() {\r\n *     // Execute the \"turnOver\" turn we created\r\n *     this.doTurn(\"turnOver\")\r\n *   }\r\n *\r\n * }\r\n * ```\r\n */\r\nexport class Simulator {\r\n    constructor() {\r\n        this.stickers = new Map();\r\n        this.faces = new Map();\r\n        this.turns = new Map();\r\n    }\r\n    /**\r\n     * Adds a face of stickers to the puzzle.\r\n     *\r\n     * @param stickers - array of sticker values\r\n     * @param label - label to reference the face by\r\n     * @returns object with the faceId and list of sticker ids.\r\n     *  faceId will be label if that is present. Otherwise it\r\n     *  will be generated.\r\n     * @example\r\n     * ```\r\n     * const stickers = ['red', 'red', 'red', 'red'];\r\n     *\r\n     * // Add the F face\r\n     * addFace(stickers, 'F')\r\n     * ```\r\n     */\r\n    addFace(stickers, label) {\r\n        if (label && this.faces.has(label)) {\r\n            throw `Face ${label} already exists`;\r\n        }\r\n        else if (!label) {\r\n            label = (this.faces.size + 1).toString();\r\n        }\r\n        // Add Stickers\r\n        const stickerIds = stickers.reduce((stickerIds, nextSticker) => {\r\n            const stickerId = (this.stickers.size + 1).toString();\r\n            this.stickers.set(stickerId, nextSticker);\r\n            stickerIds.push(stickerId);\r\n            return stickerIds;\r\n        }, []);\r\n        // Add Face\r\n        this.faces.set(label, stickerIds);\r\n        return {\r\n            faceId: label,\r\n            stickerIds,\r\n        };\r\n    }\r\n    /**\r\n     * Creates a turn definition that tells the simulator\r\n     * what sticker values to change when turning.\r\n     *\r\n     * A change is an array with two sticker ids (ex. ['sticker1', 'sticker2'])\r\n     * this means that when turning 'sticker1' will go to 'sticker2'.\r\n     * Or when doing a reverse turn, `sticker2' will go to 'sticker1'\r\n     *\r\n     * @param changes - list of turn definitions.\r\n     * @param label - label to reference the turn by\r\n     * @returns label of the turn that was created\r\n     */\r\n    addTurn(changes, label) {\r\n        if (label && this.turns.has(label)) {\r\n            throw `Turn ${label} already exists`;\r\n        }\r\n        else if (!label) {\r\n            label = (this.turns.size + 1).toString();\r\n        }\r\n        this.turns.set(label, changes);\r\n        return label;\r\n    }\r\n    /**\r\n     * Executes a turn on the puzzle\r\n     *\r\n     * @param label - label of the turn to execute\r\n     * @param prime - true to do the turn in reverse\r\n     */\r\n    doTurn(label, reverse = false) {\r\n        const changes = this.turns.get(label);\r\n        if (!changes) {\r\n            throw `Unknown turn ${label}`;\r\n        }\r\n        let movingSticker = reverse ? 1 : 0;\r\n        let replacedSticker = reverse ? 0 : 1;\r\n        let cached = {};\r\n        changes.forEach((change) => {\r\n            // Cache value we're replacing\r\n            cached[change[replacedSticker]] = this.stickers.get(change[replacedSticker]);\r\n            // Update sticker with new value\r\n            this.stickers.set(change[replacedSticker], cached[change[movingSticker]] ||\r\n                this.stickers.get(change[movingSticker]));\r\n        });\r\n    }\r\n    /**\r\n     * checks that every sticker on every face\r\n     * is the same value\r\n     */\r\n    isSolved() {\r\n        const faces = this.faces.entries();\r\n        let entry = faces.next();\r\n        do {\r\n            const stickerIds = entry.value[1];\r\n            let value = this.stickers.get(stickerIds[0]);\r\n            for (let id of stickerIds) {\r\n                if (value != this.stickers.get(id))\r\n                    return false;\r\n            }\r\n            entry = faces.next();\r\n        } while (!entry.done);\r\n        return true;\r\n    }\r\n    getValues() {\r\n        let values = {};\r\n        this.faces.forEach((stickerIds, key) => {\r\n            values[key] = stickerIds.map((id) => this.stickers.get(id));\r\n        });\r\n        return values;\r\n    }\r\n    /**\r\n     * override value of sticker on a face\r\n     *\r\n     * @param face - label\r\n     * @param index - index of sticker to set value of\r\n     * @param value - value to set the sticker to\r\n     */\r\n    setValue(face, index, value) {\r\n        if (!this.faces.has(face)) {\r\n            console.warn(`attempting to set sticker value on invalid face: ${face}`);\r\n            return;\r\n        }\r\n        let faceStickers = this.faces.get(face);\r\n        let stickerId = faceStickers[index];\r\n        if (!faceStickers) {\r\n            console.warn(`attempting to set sticker value for invalid sticker: ${face} ${index}`);\r\n            return;\r\n        }\r\n        this.stickers.set(stickerId, value);\r\n    }\r\n    /**\r\n     * parse and execute a sequence of moves\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * // assuming U, R, and F are turn labels\r\n     * simulator.alg(\"U R F\")\r\n     * ```\r\n     *\r\n     * @param alg - algorithm\r\n     */\r\n    alg(alg) {\r\n        // Default implementation\r\n        if (!alg) {\r\n            return;\r\n        }\r\n        alg.split(\" \").forEach((turn) => this.doTurn(turn));\r\n    }\r\n    /**\r\n     * reverses an algorithm then executes it\r\n     */\r\n    case(alg) {\r\n        // No default implementation\r\n    }\r\n    /**\r\n     * resets stickers back to solved position. Uses face name\r\n     * as sticker value by default\r\n     */\r\n    reset() {\r\n        this.faces.forEach((stickerIds, faceName) => {\r\n            stickerIds.forEach((stickerId) => {\r\n                this.stickers.set(stickerId, faceName);\r\n            });\r\n        });\r\n    }\r\n}\r\n","// Standard Cube Colors\r\nexport const YELLOW = { value: \"#FFFF00\" };\r\nexport const RED = { value: \"#FF0000\" };\r\nexport const BLUE = { value: \"#0000FF\" };\r\nexport const WHITE = { value: \"#FFFFFF\" };\r\nexport const ORANGE = { value: \"#FFA500\" };\r\nexport const GREEN = { value: \"#00FF00\" };\r\n// Extra colors for megaminx\r\nexport const PURPLE = { value: \"#800080\" };\r\nexport const GREY = { value: \"#808080\" };\r\nexport const DARK_BLUE = { value: \"#00008B\" };\r\nexport const LIGHT_YELLOW = { value: \"#ffffb3\" };\r\nexport const LIGHT_GREEN = { value: \"#32CD32\" };\r\nexport const PINK = { value: \"#FF69B4\" };\r\nexport const BLACK = { value: \"#000000\" };\r\nexport const MASK_COLOR = { value: \"#404040\" };\r\n// Stickerless\r\nexport const YELLOW_STICKERLESS = {\r\n    value: \"#FFFF00\",\r\n    stroke: \"#DDDD00\",\r\n};\r\nexport const RED_STICKERLESS = { value: \"#FF0000\", stroke: \"#DD0000\" };\r\nexport const BLUE_STICKERLESS = { value: \"#0000FF\", stroke: \"#0000DD\" };\r\nexport const WHITE_STICKERLESS = { value: \"#FFFFFF\", stroke: \"#DDD\" };\r\nexport const ORANGE_STICKERLESS = {\r\n    value: \"#FFA500\",\r\n    stroke: \"#DD8500\",\r\n};\r\nexport const GREEN_STICKERLESS = {\r\n    value: \"#00FF00\",\r\n    stroke: \"#00DD00\",\r\n};\r\nexport const PURPLE_STICKERLESS = {\r\n    value: \"#800080\",\r\n    stroke: \"#5c005c\",\r\n};\r\nexport const GREY_STICKERLESS = { value: \"#808080\", stroke: \"#6b6b6b\" };\r\nexport const DARK_BLUE_STICKERLESS = {\r\n    value: \"#00008B\",\r\n    stroke: \"#000075\",\r\n};\r\nexport const LIGHT_YELLOW_STICKERLESS = {\r\n    value: \"#ffffb3\",\r\n    stroke: \"#e6e6a3\",\r\n};\r\nexport const LIGHT_GREEN_STICKERLESS = {\r\n    value: \"#32CD32\",\r\n    stroke: \"#2db32d\",\r\n};\r\nexport const PINK_STICKERLESS = { value: \"#FF69B4\", stroke: \"#de5b9c\" };\r\n","export var PIECE_TYPE;\r\n(function (PIECE_TYPE) {\r\n    PIECE_TYPE[PIECE_TYPE[\"CORNER\"] = 0] = \"CORNER\";\r\n    PIECE_TYPE[PIECE_TYPE[\"EDGE\"] = 1] = \"EDGE\";\r\n    PIECE_TYPE[PIECE_TYPE[\"MIDDLE\"] = 2] = \"MIDDLE\";\r\n})(PIECE_TYPE || (PIECE_TYPE = {}));\r\n","export class Vector3 {\r\n    static fromValues(x, y, z) {\r\n        return new Vector3(x, y, z);\r\n    }\r\n    constructor(x, y, z) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    transformMat4(m) {\r\n        let w = m.values[3] * this.x +\r\n            m.values[7] * this.y +\r\n            m.values[11] * this.z +\r\n            m.values[15];\r\n        w = w || 1.0;\r\n        const x = (m.values[0] * this.x +\r\n            m.values[4] * this.y +\r\n            m.values[8] * this.z +\r\n            m.values[12]) /\r\n            w;\r\n        const y = (m.values[1] * this.x +\r\n            m.values[5] * this.y +\r\n            m.values[9] * this.z +\r\n            m.values[13]) /\r\n            w;\r\n        const z = (m.values[2] * this.x +\r\n            m.values[6] * this.y +\r\n            m.values[10] * this.z +\r\n            m.values[14]) /\r\n            w;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    multiply(x, y, z) {\r\n        this.x = this.x * x;\r\n        this.y = this.y * y;\r\n        this.z = this.z * z;\r\n    }\r\n    rotateX(origin, radians) {\r\n        // translate point to origin\r\n        let x = this.x - origin.x;\r\n        let y = this.y - origin.y;\r\n        let z = this.z - origin.z;\r\n        // rotate\r\n        this.x = x;\r\n        this.y = y * Math.cos(radians) - z * Math.sin(radians);\r\n        this.z = y * Math.sin(radians) + z * Math.cos(radians);\r\n        // translate back\r\n        this.x += origin.x;\r\n        this.y += origin.y;\r\n        this.z += origin.z;\r\n        return this;\r\n    }\r\n    rotateZ(origin, radians) {\r\n        // translate point to origin\r\n        let x = this.x - origin.x;\r\n        let y = this.y - origin.y;\r\n        let z = this.z - origin.z;\r\n        // rotate\r\n        this.x = x * Math.cos(radians) - y * Math.sin(radians);\r\n        this.y = x * Math.sin(radians) + y * Math.cos(radians);\r\n        this.z = z;\r\n        // translate back\r\n        this.x += origin.x;\r\n        this.y += origin.y;\r\n        this.z += origin.z;\r\n        return this;\r\n    }\r\n    clone() {\r\n        return Vector3.fromValues(this.x, this.y, this.z);\r\n    }\r\n}\r\nexport class Vector2 {\r\n    static fromValues(x, y) {\r\n        return new Vector2(x, y);\r\n    }\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n","import { WHITE, RED, BLUE, GREEN, ORANGE, YELLOW } from \"./../colors\";\r\nimport { PIECE_TYPE } from \"./enum\";\r\nimport { Vector3 } from \"../../math/vector\";\r\nexport const ROTATION_VECTOR = Vector3.fromValues(0.92875, -0.24803, 0);\r\nexport const TOP_COLOR = YELLOW;\r\nexport const BOTTOM_COLOR = WHITE;\r\nexport const FRONT_COLOR = RED;\r\nexport const LEFT_COLOR = BLUE;\r\nexport const RIGHT_COLOR = GREEN;\r\nexport const BACK_COLOR = ORANGE;\r\nexport const DEFAULT_SQ1_SCHEME = {\r\n    top: TOP_COLOR,\r\n    front: FRONT_COLOR,\r\n    bottom: BOTTOM_COLOR,\r\n    left: LEFT_COLOR,\r\n    right: RIGHT_COLOR,\r\n    back: BACK_COLOR,\r\n};\r\nexport const SOLVED_TOP_PIECES = [\r\n    { type: PIECE_TYPE.CORNER, colors: [TOP_COLOR, FRONT_COLOR, LEFT_COLOR] },\r\n    { type: PIECE_TYPE.EDGE, colors: [TOP_COLOR, LEFT_COLOR] },\r\n    { type: PIECE_TYPE.CORNER, colors: [TOP_COLOR, LEFT_COLOR, BACK_COLOR] },\r\n    { type: PIECE_TYPE.EDGE, colors: [TOP_COLOR, BACK_COLOR] },\r\n    { type: PIECE_TYPE.CORNER, colors: [TOP_COLOR, BACK_COLOR, RIGHT_COLOR] },\r\n    { type: PIECE_TYPE.EDGE, colors: [TOP_COLOR, RIGHT_COLOR] },\r\n    { type: PIECE_TYPE.CORNER, colors: [TOP_COLOR, RIGHT_COLOR, FRONT_COLOR] },\r\n    { type: PIECE_TYPE.EDGE, colors: [TOP_COLOR, FRONT_COLOR] },\r\n];\r\nexport const SOLVED_BOTTOM_PIECES = [\r\n    { type: PIECE_TYPE.EDGE, colors: [BOTTOM_COLOR, BACK_COLOR] },\r\n    { type: PIECE_TYPE.CORNER, colors: [BOTTOM_COLOR, BACK_COLOR, LEFT_COLOR] },\r\n    { type: PIECE_TYPE.EDGE, colors: [BOTTOM_COLOR, LEFT_COLOR] },\r\n    { type: PIECE_TYPE.CORNER, colors: [BOTTOM_COLOR, LEFT_COLOR, FRONT_COLOR] },\r\n    { type: PIECE_TYPE.EDGE, colors: [BOTTOM_COLOR, FRONT_COLOR] },\r\n    { type: PIECE_TYPE.CORNER, colors: [BOTTOM_COLOR, FRONT_COLOR, RIGHT_COLOR] },\r\n    { type: PIECE_TYPE.EDGE, colors: [BOTTOM_COLOR, RIGHT_COLOR] },\r\n    { type: PIECE_TYPE.CORNER, colors: [BOTTOM_COLOR, RIGHT_COLOR, BACK_COLOR] },\r\n];\r\n","const square1TurnRegex = /((\\()?(-?\\d)\\s*,\\s*(-?\\d)(\\))?)|(\\/)/g;\r\nexport function parseSquare1Algorithm(algorithm) {\r\n    let turns = [];\r\n    let match;\r\n    while ((match = square1TurnRegex.exec(algorithm))) {\r\n        if (match[0] === \"/\") {\r\n            turns.push({ slice: true });\r\n        }\r\n        else {\r\n            turns.push({\r\n                top: parseInt(match[3]),\r\n                bottom: parseInt(match[4]),\r\n            });\r\n        }\r\n    }\r\n    return turns;\r\n}\r\n","import { Simulator } from \"./../simulator\";\r\nimport { BACK_COLOR, BOTTOM_COLOR, DEFAULT_SQ1_SCHEME, FRONT_COLOR, LEFT_COLOR, RIGHT_COLOR, TOP_COLOR, } from \"./../../puzzles/square1/constants\";\r\nimport { PIECE_TYPE } from \"../../puzzles/square1/enum\";\r\nimport { parseSquare1Algorithm } from \"../../algorithms/square1\";\r\nconst pieceValue = {\r\n    [PIECE_TYPE.CORNER]: 2,\r\n    [PIECE_TYPE.EDGE]: 1,\r\n};\r\nexport class Square1Simualtor extends Simulator {\r\n    constructor(scheme = DEFAULT_SQ1_SCHEME) {\r\n        super();\r\n        this.scheme = scheme;\r\n        this.topLayer = solvedTop(this.scheme);\r\n        this.bottomLayer = solvedBottom(this.scheme);\r\n        this.middleRotated = false;\r\n    }\r\n    alg(alg) {\r\n        parseSquare1Algorithm(alg).forEach((move) => {\r\n            if (\"slice\" in move) {\r\n                this.slice();\r\n            }\r\n            else {\r\n                this.rotateTop(move.top);\r\n                this.rotateBottom(move.bottom);\r\n            }\r\n        });\r\n    }\r\n    case(alg) {\r\n        parseSquare1Algorithm(alg)\r\n            .reverse()\r\n            .forEach((move) => {\r\n            if (\"slice\" in move) {\r\n                this.slice();\r\n            }\r\n            else {\r\n                this.rotateTop(move.top * -1);\r\n                this.rotateBottom(move.bottom * -1);\r\n            }\r\n        });\r\n    }\r\n    slice() {\r\n        let topNum = 0;\r\n        let bottomNum = 0;\r\n        let value = 0;\r\n        for (let i = this.topLayer.length; i > 0 && value < 6; i--) {\r\n            value += pieceValue[this.topLayer[i - 1].type];\r\n            topNum++;\r\n        }\r\n        if (value != 6) {\r\n            throw \"Cannot perform slice move. Top layer misaligned\";\r\n        }\r\n        value = 0;\r\n        for (let i = this.bottomLayer.length; i > 0 && value < 6; i--) {\r\n            value += pieceValue[this.bottomLayer[i - 1].type];\r\n            bottomNum++;\r\n        }\r\n        if (value != 6) {\r\n            throw \"Cannot perform slice move. Bottom layer misaligned\";\r\n        }\r\n        const topSlice = this.topLayer.splice(this.topLayer.length - topNum, this.topLayer.length);\r\n        const bottomSlice = this.bottomLayer.splice(this.bottomLayer.length - bottomNum, this.bottomLayer.length);\r\n        this.topLayer = this.topLayer.concat(bottomSlice);\r\n        this.bottomLayer = this.bottomLayer.concat(topSlice);\r\n        this.middleRotated = !this.middleRotated;\r\n    }\r\n    rotateTop(turns) {\r\n        const originalTurns = turns;\r\n        while (turns != 0) {\r\n            if (turns < 0) {\r\n                const piece = this.topLayer.shift();\r\n                const value = pieceValue[piece.type];\r\n                if (Math.abs(turns) < value) {\r\n                    throw `Invalid Square1 Move. Cannot turn top layer ${originalTurns} steps`;\r\n                }\r\n                this.topLayer.push(piece);\r\n                turns += value;\r\n            }\r\n            else {\r\n                const piece = this.topLayer.pop();\r\n                const value = pieceValue[piece.type];\r\n                if (Math.abs(turns) < value) {\r\n                    throw `Invalid Square1 Move. Cannot turn top layer ${originalTurns} steps`;\r\n                }\r\n                this.topLayer.unshift(piece);\r\n                turns -= value;\r\n            }\r\n        }\r\n    }\r\n    rotateBottom(turns) {\r\n        const originalTurns = turns;\r\n        while (turns != 0) {\r\n            if (turns < 0) {\r\n                const piece = this.bottomLayer.shift();\r\n                const value = pieceValue[piece.type];\r\n                if (Math.abs(turns) < value) {\r\n                    throw `Invalid Square1 Move. Cannot turn top layer ${originalTurns} steps`;\r\n                }\r\n                this.bottomLayer.push(piece);\r\n                turns += value;\r\n            }\r\n            else {\r\n                const piece = this.bottomLayer.pop();\r\n                const value = pieceValue[piece.type];\r\n                if (Math.abs(turns) < value) {\r\n                    throw `Invalid Square1 Move. Cannot turn top layer ${originalTurns} steps`;\r\n                }\r\n                this.bottomLayer.unshift(piece);\r\n                turns -= value;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction solvedTop(scheme) {\r\n    return [\r\n        {\r\n            type: PIECE_TYPE.CORNER,\r\n            colors: [\r\n                scheme.top || TOP_COLOR,\r\n                scheme.front || FRONT_COLOR,\r\n                scheme.left || LEFT_COLOR,\r\n            ],\r\n        },\r\n        {\r\n            type: PIECE_TYPE.EDGE,\r\n            colors: [scheme.top || TOP_COLOR, scheme.left || LEFT_COLOR],\r\n        },\r\n        {\r\n            type: PIECE_TYPE.CORNER,\r\n            colors: [\r\n                scheme.top || TOP_COLOR,\r\n                scheme.left || LEFT_COLOR,\r\n                scheme.back || BACK_COLOR,\r\n            ],\r\n        },\r\n        {\r\n            type: PIECE_TYPE.EDGE,\r\n            colors: [scheme.top || TOP_COLOR, scheme.back || BACK_COLOR],\r\n        },\r\n        {\r\n            type: PIECE_TYPE.CORNER,\r\n            colors: [\r\n                scheme.top || TOP_COLOR,\r\n                scheme.back || BACK_COLOR,\r\n                scheme.right || RIGHT_COLOR,\r\n            ],\r\n        },\r\n        {\r\n            type: PIECE_TYPE.EDGE,\r\n            colors: [scheme.top || TOP_COLOR, scheme.right || RIGHT_COLOR],\r\n        },\r\n        {\r\n            type: PIECE_TYPE.CORNER,\r\n            colors: [\r\n                scheme.top || TOP_COLOR,\r\n                scheme.right || RIGHT_COLOR,\r\n                scheme.front || FRONT_COLOR,\r\n            ],\r\n        },\r\n        {\r\n            type: PIECE_TYPE.EDGE,\r\n            colors: [scheme.top || TOP_COLOR, scheme.front || FRONT_COLOR],\r\n        },\r\n    ];\r\n}\r\nfunction solvedBottom(scheme) {\r\n    return [\r\n        {\r\n            type: PIECE_TYPE.EDGE,\r\n            colors: [scheme.bottom || BOTTOM_COLOR, scheme.back || BACK_COLOR],\r\n        },\r\n        {\r\n            type: PIECE_TYPE.CORNER,\r\n            colors: [\r\n                scheme.bottom || BOTTOM_COLOR,\r\n                scheme.back || BACK_COLOR,\r\n                scheme.left || LEFT_COLOR,\r\n            ],\r\n        },\r\n        {\r\n            type: PIECE_TYPE.EDGE,\r\n            colors: [scheme.bottom || BOTTOM_COLOR, scheme.left || LEFT_COLOR],\r\n        },\r\n        {\r\n            type: PIECE_TYPE.CORNER,\r\n            colors: [\r\n                scheme.bottom || BOTTOM_COLOR,\r\n                scheme.left || LEFT_COLOR,\r\n                scheme.front || FRONT_COLOR,\r\n            ],\r\n        },\r\n        {\r\n            type: PIECE_TYPE.EDGE,\r\n            colors: [scheme.bottom || BOTTOM_COLOR, scheme.front || FRONT_COLOR],\r\n        },\r\n        {\r\n            type: PIECE_TYPE.CORNER,\r\n            colors: [\r\n                scheme.bottom || BOTTOM_COLOR,\r\n                scheme.front || FRONT_COLOR,\r\n                scheme.right || RIGHT_COLOR,\r\n            ],\r\n        },\r\n        {\r\n            type: PIECE_TYPE.EDGE,\r\n            colors: [scheme.bottom || BOTTOM_COLOR, scheme.right || RIGHT_COLOR],\r\n        },\r\n        {\r\n            type: PIECE_TYPE.CORNER,\r\n            colors: [\r\n                scheme.bottom || BOTTOM_COLOR,\r\n                scheme.right || RIGHT_COLOR,\r\n                scheme.back || BACK_COLOR,\r\n            ],\r\n        },\r\n    ];\r\n}\r\n","import { TurnType } from \"./algorithm\";\r\nconst skewbTurnRegex = /([LRUB])(\\'?)/g;\r\nconst DirectionToTurnType = {\r\n    \"\": TurnType.Clockwise,\r\n    \"'\": TurnType.CounterClockwise,\r\n};\r\nexport function parseSkewbAlgorithm(algorithm) {\r\n    let turns = [];\r\n    let match;\r\n    while ((match = skewbTurnRegex.exec(algorithm))) {\r\n        const rawUnit = match[1];\r\n        const rawDirection = match[2];\r\n        turns.push({\r\n            unit: rawUnit,\r\n            turnType: DirectionToTurnType[rawDirection],\r\n            slices: 1,\r\n        });\r\n    }\r\n    return turns;\r\n}\r\n","/**\r\n * Splits an array into chunks\r\n *\r\n * @param array original array\r\n * @param chunkSize\r\n *\r\n * @example\r\n * ```\r\n * chunkArray([1,2,3,4,5,6], 2)\r\n * // returns [[1,2], [3,4], [5,6]]\r\n * ```\r\n */\r\nexport function chunkArray(array, chunkSize) {\r\n    const newSize = Math.ceil(array.length / chunkSize);\r\n    return new Array(newSize)\r\n        .fill(null)\r\n        .map((_, index) => array.slice(index * chunkSize, (index + 1) * chunkSize));\r\n}\r\n/**\r\n * Generates an array of set size filled with a specific value\r\n *\r\n * @param length length of the array\r\n * @param value value to fill the array with\r\n */\r\nexport function fillArray(length, value) {\r\n    return new Array(length).fill(value);\r\n}\r\n","import { TurnType } from \"../../algorithms/algorithm\";\r\nimport { parseSkewbAlgorithm } from \"../../algorithms/skewb\";\r\nimport { fillArray } from \"../../utils/arrays\";\r\nimport { Simulator } from \"./../simulator\";\r\n/**\r\n * Simulates a standard skewb\r\n *\r\n * Imagine the faces like this\r\n * ```\r\n *      U\r\n *    L F R B\r\n *      D\r\n * ```\r\n *\r\n * each face has 5 sickers (1 center, 4 corners), stored as\r\n * an array. Each index of the array maps to stickers like\r\n * so, 0 being the center, 1-4 being the corners from top left\r\n * to bottom right\r\n * ```\r\n *      1   2\r\n *        0\r\n *      3   4\r\n * ```\r\n *\r\n * So all together the simulator stores information like\r\n * this\r\n * ```\r\n *          U1    U2\r\n *             U0\r\n *          U3    U4\r\n * L1    L2 F1    F2 R1    R2 B1    B2\r\n *    L0       F0       R0       B0\r\n * L3    L4 F3    F4 F3    F4 B3    B4\r\n *          D1    D2\r\n *             D0\r\n *          D3    D4\r\n * ```\r\n */\r\nexport class SkewbSimulator extends Simulator {\r\n    constructor() {\r\n        super();\r\n        const { stickerIds: top } = this.addFace(fillArray(5, \"top\"), \"top\");\r\n        const { stickerIds: front } = this.addFace(fillArray(5, \"front\"), \"front\");\r\n        const { stickerIds: right } = this.addFace(fillArray(5, \"right\"), \"right\");\r\n        const { stickerIds: bottom } = this.addFace(fillArray(5, \"bottom\"), \"bottom\");\r\n        const { stickerIds: back } = this.addFace(fillArray(5, \"back\"), \"back\");\r\n        const { stickerIds: left } = this.addFace(fillArray(5, \"left\"), \"left\");\r\n        // Skewb Notation https://www.worldcubeassociation.org/regulations/#12h\r\n        this.addTurn([\r\n            [right[0], back[0]],\r\n            [right[2], back[4]],\r\n            [right[3], back[1]],\r\n            [right[4], back[3]],\r\n            [back[0], bottom[0]],\r\n            [back[4], bottom[2]],\r\n            [back[1], bottom[3]],\r\n            [back[3], bottom[4]],\r\n            [bottom[0], right[0]],\r\n            [bottom[2], right[2]],\r\n            [bottom[3], right[3]],\r\n            [bottom[4], right[4]],\r\n            [front[4], top[2]],\r\n            [top[2], left[3]],\r\n            [left[3], front[4]],\r\n        ], \"R\");\r\n        this.addTurn([\r\n            [center(top), center(left)],\r\n            [topLeft(top), topLeft(left)],\r\n            [topRight(top), topRight(left)],\r\n            [bottomLeft(top), bottomLeft(left)],\r\n            [center(left), center(back)],\r\n            [topLeft(left), topRight(back)],\r\n            [topRight(left), bottomRight(back)],\r\n            [bottomLeft(left), topLeft(back)],\r\n            [center(back), center(top)],\r\n            [topRight(back), topLeft(top)],\r\n            [bottomRight(back), topRight(top)],\r\n            [topLeft(back), bottomLeft(top)],\r\n            [topRight(right), topLeft(front)],\r\n            [topLeft(front), bottomLeft(bottom)],\r\n            [bottomLeft(bottom), topRight(right)],\r\n        ], \"U\");\r\n        this.addTurn([\r\n            [center(left), center(front)],\r\n            [bottomLeft(left), topLeft(front)],\r\n            [topRight(left), bottomRight(front)],\r\n            [bottomRight(left), bottomLeft(front)],\r\n            [center(front), center(bottom)],\r\n            [topLeft(front), topRight(bottom)],\r\n            [bottomRight(front), bottomLeft(bottom)],\r\n            [bottomLeft(front), topLeft(bottom)],\r\n            [center(bottom), center(left)],\r\n            [topRight(bottom), bottomLeft(left)],\r\n            [bottomLeft(bottom), topRight(left)],\r\n            [topLeft(bottom), bottomRight(left)],\r\n            [bottomRight(back), bottomLeft(top)],\r\n            [bottomLeft(top), bottomLeft(right)],\r\n            [bottomLeft(right), bottomRight(back)],\r\n        ], \"L\");\r\n        this.addTurn([\r\n            [center(back), center(left)],\r\n            [topRight(back), bottomRight(left)],\r\n            [bottomLeft(back), topLeft(left)],\r\n            [bottomRight(back), bottomLeft(left)],\r\n            [center(left), center(bottom)],\r\n            [bottomRight(left), bottomRight(bottom)],\r\n            [topLeft(left), topLeft(bottom)],\r\n            [bottomLeft(left), bottomLeft(bottom)],\r\n            [center(bottom), center(back)],\r\n            [bottomRight(bottom), topRight(back)],\r\n            [topLeft(bottom), bottomLeft(back)],\r\n            [bottomLeft(bottom), bottomRight(back)],\r\n            [topLeft(top), bottomLeft(front)],\r\n            [bottomLeft(front), bottomRight(right)],\r\n            [bottomRight(right), topLeft(top)],\r\n        ], \"B\");\r\n    }\r\n    R(reverse) {\r\n        this.doTurn(\"R\", reverse);\r\n    }\r\n    U(reverse) {\r\n        this.doTurn(\"U\", reverse);\r\n    }\r\n    L(reverse) {\r\n        this.doTurn(\"L\", reverse);\r\n    }\r\n    B(reverse) {\r\n        this.doTurn(\"B\", reverse);\r\n    }\r\n    alg(alg) {\r\n        if (!alg) {\r\n            return;\r\n        }\r\n        this.doTurns(parseSkewbAlgorithm(alg));\r\n    }\r\n    case(alg) {\r\n        if (!alg) {\r\n            return;\r\n        }\r\n        let turns = parseSkewbAlgorithm(alg)\r\n            .reverse()\r\n            .map((turn) => (Object.assign(Object.assign({}, turn), { turnType: turn.turnType === TurnType.Clockwise\r\n                ? TurnType.CounterClockwise\r\n                : TurnType.Clockwise })));\r\n        this.doTurns(turns);\r\n    }\r\n    doTurns(turns) {\r\n        turns.forEach((turn) => {\r\n            let reverse = turn.turnType === TurnType.CounterClockwise;\r\n            switch (turn.unit) {\r\n                case \"R\":\r\n                    this.R(reverse);\r\n                    break;\r\n                case \"U\":\r\n                    this.U(reverse);\r\n                    break;\r\n                case \"L\":\r\n                    this.L(reverse);\r\n                    break;\r\n                case \"B\":\r\n                    this.B(reverse);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\nconst center = (face) => face[0];\r\nconst topLeft = (face) => face[1];\r\nconst topRight = (face) => face[2];\r\nconst bottomLeft = (face) => face[3];\r\nconst bottomRight = (face) => face[4];\r\n","import { TurnType } from \"./algorithm\";\r\nconst pyraminxTurnRegex = /([LlRrUuBb])(\\'?)/g;\r\nconst DirectionToTurnType = {\r\n    \"\": TurnType.Clockwise,\r\n    \"'\": TurnType.CounterClockwise,\r\n};\r\nexport function parsePyraminxAlgorithm(algorithm) {\r\n    let turns = [];\r\n    let match;\r\n    while ((match = pyraminxTurnRegex.exec(algorithm))) {\r\n        const rawUnit = match[1];\r\n        const rawDirection = match[2];\r\n        turns.push({\r\n            unit: rawUnit,\r\n            turnType: DirectionToTurnType[rawDirection],\r\n            slices: 1,\r\n        });\r\n    }\r\n    return turns;\r\n}\r\n","import { TurnType } from \"../../algorithms/algorithm\";\r\nimport { parsePyraminxAlgorithm } from \"../../algorithms/pyraminx\";\r\nimport { fillArray } from \"../../utils/arrays\";\r\nimport { Simulator } from \"./../simulator\";\r\nexport class PyraminxSimulator extends Simulator {\r\n    constructor() {\r\n        super();\r\n        const { stickerIds: U } = this.addFace(fillArray(9, \"top\"), \"top\");\r\n        const { stickerIds: L } = this.addFace(fillArray(9, \"left\"), \"left\");\r\n        const { stickerIds: R } = this.addFace(fillArray(9, \"right\"), \"right\");\r\n        const { stickerIds: B } = this.addFace(fillArray(9, \"back\"), \"back\");\r\n        // Tip turns\r\n        this.addTurn([\r\n            [U[8], R[8]],\r\n            [R[8], L[8]],\r\n            [L[8], U[8]],\r\n        ], \"u\");\r\n        this.addTurn([\r\n            [L[0], B[8]],\r\n            [B[8], U[4]],\r\n            [U[4], L[0]],\r\n        ], \"l\");\r\n        this.addTurn([\r\n            [L[4], R[0]],\r\n            [R[0], B[4]],\r\n            [B[4], L[4]],\r\n        ], \"r\");\r\n        this.addTurn([\r\n            [R[4], U[0]],\r\n            [U[0], B[0]],\r\n            [B[0], R[4]],\r\n        ], \"b\");\r\n        // Full turns\r\n        this.addTurn([\r\n            [U[5], R[5]],\r\n            [U[6], R[6]],\r\n            [U[7], R[7]],\r\n            [U[8], R[8]],\r\n            [R[5], L[5]],\r\n            [R[6], L[6]],\r\n            [R[7], L[7]],\r\n            [R[8], L[8]],\r\n            [L[5], U[5]],\r\n            [L[6], U[6]],\r\n            [L[7], U[7]],\r\n            [L[8], U[8]],\r\n        ], \"U\");\r\n        this.addTurn([\r\n            [L[0], B[8]],\r\n            [L[1], B[6]],\r\n            [L[2], B[5]],\r\n            [L[5], B[7]],\r\n            [B[8], U[4]],\r\n            [B[6], U[3]],\r\n            [B[5], U[7]],\r\n            [B[7], U[2]],\r\n            [U[4], L[0]],\r\n            [U[3], L[1]],\r\n            [U[7], L[2]],\r\n            [U[2], L[5]],\r\n        ], \"L\");\r\n        this.addTurn([\r\n            [L[2], R[5]],\r\n            [L[3], R[1]],\r\n            [L[4], R[0]],\r\n            [L[7], R[2]],\r\n            [R[5], B[2]],\r\n            [R[1], B[3]],\r\n            [R[0], B[4]],\r\n            [R[2], B[7]],\r\n            [B[2], L[2]],\r\n            [B[3], L[3]],\r\n            [B[4], L[4]],\r\n            [B[7], L[7]],\r\n        ], \"R\");\r\n        this.addTurn([\r\n            [R[2], U[5]],\r\n            [R[3], U[1]],\r\n            [R[4], U[0]],\r\n            [R[7], U[2]],\r\n            [U[5], B[5]],\r\n            [U[1], B[1]],\r\n            [U[0], B[0]],\r\n            [U[2], B[2]],\r\n            [B[5], R[2]],\r\n            [B[1], R[3]],\r\n            [B[0], R[4]],\r\n            [B[2], R[7]],\r\n        ], \"B\");\r\n    }\r\n    U(reverse) {\r\n        this.doTurn(\"U\", reverse);\r\n    }\r\n    R(reverse) {\r\n        this.doTurn(\"R\", reverse);\r\n    }\r\n    L(reverse) {\r\n        this.doTurn(\"L\", reverse);\r\n    }\r\n    B(reverse) {\r\n        this.doTurn(\"B\", reverse);\r\n    }\r\n    u(reverse) {\r\n        this.doTurn(\"u\", reverse);\r\n    }\r\n    r(reverse) {\r\n        this.doTurn(\"r\", reverse);\r\n    }\r\n    l(reverse) {\r\n        this.doTurn(\"l\", reverse);\r\n    }\r\n    b(reverse) {\r\n        this.doTurn(\"b\", reverse);\r\n    }\r\n    alg(alg) {\r\n        if (!alg) {\r\n            return;\r\n        }\r\n        this.doTurns(parsePyraminxAlgorithm(alg));\r\n    }\r\n    case(alg) {\r\n        if (!alg) {\r\n            return;\r\n        }\r\n        let turns = parsePyraminxAlgorithm(alg)\r\n            .reverse()\r\n            .map((turn) => (Object.assign(Object.assign({}, turn), { turnType: turn.turnType === TurnType.Clockwise\r\n                ? TurnType.CounterClockwise\r\n                : TurnType.Clockwise })));\r\n        this.doTurns(turns);\r\n    }\r\n    doTurns(turns) {\r\n        turns.forEach((turn) => {\r\n            let reverse = turn.turnType === TurnType.CounterClockwise;\r\n            switch (turn.unit) {\r\n                case \"R\":\r\n                    this.R(reverse);\r\n                    break;\r\n                case \"r\":\r\n                    this.r(reverse);\r\n                    break;\r\n                case \"U\":\r\n                    this.U(reverse);\r\n                    break;\r\n                case \"u\":\r\n                    this.u(reverse);\r\n                    break;\r\n                case \"L\":\r\n                    this.L(reverse);\r\n                    break;\r\n                case \"l\":\r\n                    this.l(reverse);\r\n                    break;\r\n                case \"B\":\r\n                    this.B(reverse);\r\n                    break;\r\n                case \"b\":\r\n                    this.b(reverse);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n","export const MEGAMINX_FACES = [\r\n    // Front\r\n    \"U\",\r\n    \"R\",\r\n    \"F\",\r\n    \"dr\",\r\n    \"dl\",\r\n    \"L\",\r\n    // Back\r\n    \"d\",\r\n    \"br\",\r\n    \"BR\",\r\n    \"BL\",\r\n    \"bl\",\r\n    \"b\",\r\n];\r\n","import { TurnType } from \"./algorithm\";\r\nconst megaminxTurnNotation = /([RD])([\\+\\+|\\-\\-]+)|([UFRL]|BR|BL)([2-3]?)(\\'?)/g;\r\nvar PochmannDirections;\r\n(function (PochmannDirections) {\r\n    PochmannDirections[\"Clockwise\"] = \"++\";\r\n    PochmannDirections[\"CounterClockwise\"] = \"--\";\r\n    PochmannDirections[\"FaceClockwise\"] = \"\";\r\n    PochmannDirections[\"FaceCounter\"] = \"'\";\r\n})(PochmannDirections || (PochmannDirections = {}));\r\nconst DirectionToTurnType = {\r\n    [PochmannDirections.Clockwise]: TurnType.Clockwise,\r\n    [PochmannDirections.CounterClockwise]: TurnType.CounterClockwise,\r\n    [PochmannDirections.FaceClockwise]: TurnType.Clockwise,\r\n    [PochmannDirections.FaceCounter]: TurnType.CounterClockwise,\r\n};\r\n/**\r\n * Takes in a megaminx algorithm in stefan pochmann notation as a string\r\n * and parses the turns from it\r\n *\r\n * Also supports face turns U,F,R,L,BR,BL as i've seen in some algorithms online\r\n *\r\n * algorithm string format should be moves separated by a single space\r\n *\r\n * @example\r\n * ```typescript\r\n * parseMegaminxAlgorithm(\"D++ R-- D-- U\")\r\n * parseMegaminxAlgorithm(\"R' U2' R2 U R2' U R2 U2' R'\")\r\n * ```\r\n *\r\n * @see https://www.worldcubeassociation.org/regulations/#article-12-notation\r\n */\r\nexport function parseMegaminxAlgorithm(algorithm) {\r\n    if (!algorithm) {\r\n        return [];\r\n    }\r\n    let turns = [];\r\n    let match;\r\n    while ((match = megaminxTurnNotation.exec(algorithm))) {\r\n        const rawUnit = match[1] ? `${match[1]}xx` : match[3];\r\n        const rawDirection = match[2] || match[5];\r\n        const rawNumber = match[4];\r\n        turns.push({\r\n            unit: rawUnit,\r\n            turnType: DirectionToTurnType[rawDirection],\r\n            slices: 1,\r\n            n: rawNumber ? parseInt(rawNumber) : 1,\r\n        });\r\n    }\r\n    return turns;\r\n}\r\n","import { TurnType } from \"./../../algorithms/algorithm\";\r\nimport { MEGAMINX_FACES } from \"./constants\";\r\nimport { Simulator } from \"./../simulator\";\r\nimport { fillArray } from \"../../utils/arrays\";\r\nimport { parseMegaminxAlgorithm } from \"../../algorithms/megaminx\";\r\n/**\r\n * Simulator to define megaminx type puzzles\r\n *\r\n * Currently only standard megaminx size supported.\r\n */\r\nexport class MegaminxSimulator extends Simulator {\r\n    constructor() {\r\n        super();\r\n        MEGAMINX_FACES.forEach((faceName) => {\r\n            this.addFace(fillArray(11, faceName), faceName);\r\n        });\r\n        const U = this.faces.get(\"U\"); // White\r\n        const R = this.faces.get(\"R\"); // Blue\r\n        const F = this.faces.get(\"F\"); // Red\r\n        const dr = this.faces.get(\"dr\"); // Pink\r\n        const dl = this.faces.get(\"dl\"); // Light Yellow\r\n        const L = this.faces.get(\"L\"); // Green\r\n        const d = this.faces.get(\"d\"); // Gray\r\n        const br = this.faces.get(\"br\"); // Light Green\r\n        const BR = this.faces.get(\"BR\"); // Yellow\r\n        const BL = this.faces.get(\"BL\"); // Purple\r\n        const bl = this.faces.get(\"bl\"); // Dark Blue\r\n        const b = this.faces.get(\"b\"); // Orange\r\n        // R\r\n        this.addTurn([\r\n            [F[2], U[6]],\r\n            [F[1], U[5]],\r\n            [F[10], U[4]],\r\n            [U[6], BR[10]],\r\n            [U[5], BR[9]],\r\n            [U[4], BR[8]],\r\n            [BR[10], br[8]],\r\n            [BR[9], br[7]],\r\n            [BR[8], br[6]],\r\n            [br[8], dr[2]],\r\n            [br[7], dr[1]],\r\n            [br[6], dr[10]],\r\n            [dr[2], F[2]],\r\n            [dr[1], F[1]],\r\n            [dr[10], F[10]],\r\n            ...makeFaceTurnDefinitions(R),\r\n        ], \"R\");\r\n        // F\r\n        this.addTurn([\r\n            [U[2], R[2]],\r\n            [U[3], R[3]],\r\n            [U[4], R[4]],\r\n            [R[2], dr[2]],\r\n            [R[3], dr[3]],\r\n            [R[4], dr[4]],\r\n            [dr[2], dl[2]],\r\n            [dr[3], dl[3]],\r\n            [dr[4], dl[4]],\r\n            [dl[2], L[2]],\r\n            [dl[3], L[3]],\r\n            [dl[4], L[4]],\r\n            [L[2], U[2]],\r\n            [L[3], U[3]],\r\n            [L[4], U[4]],\r\n            ...makeFaceTurnDefinitions(F),\r\n        ], \"F\");\r\n        // U\r\n        this.addTurn([\r\n            [F[2], L[4]],\r\n            [F[3], L[5]],\r\n            [F[4], L[6]],\r\n            [L[4], BL[8]],\r\n            [L[5], BL[9]],\r\n            [L[6], BL[10]],\r\n            [BL[8], BR[6]],\r\n            [BL[9], BR[7]],\r\n            [BL[10], BR[8]],\r\n            [BR[6], R[10]],\r\n            [BR[7], R[1]],\r\n            [BR[8], R[2]],\r\n            [R[10], F[2]],\r\n            [R[1], F[3]],\r\n            [R[2], F[4]],\r\n            ...makeFaceTurnDefinitions(U),\r\n        ], \"U\");\r\n        // L\r\n        this.addTurn([\r\n            [F[4], dl[4]],\r\n            [F[5], dl[5]],\r\n            [F[6], dl[6]],\r\n            [dl[4], bl[8]],\r\n            [dl[5], bl[9]],\r\n            [dl[6], bl[10]],\r\n            [bl[8], BL[6]],\r\n            [bl[9], BL[7]],\r\n            [bl[10], BL[8]],\r\n            [BL[6], U[10]],\r\n            [BL[7], U[1]],\r\n            [BL[8], U[2]],\r\n            [U[10], F[4]],\r\n            [U[1], F[5]],\r\n            [U[2], F[6]],\r\n            ...makeFaceTurnDefinitions(L),\r\n        ], \"L\");\r\n        // BR\r\n        this.addTurn([\r\n            [U[6], BL[10]],\r\n            [U[7], BL[1]],\r\n            [U[8], BL[2]],\r\n            [BL[10], b[8]],\r\n            [BL[1], b[9]],\r\n            [BL[2], b[10]],\r\n            [b[8], br[4]],\r\n            [b[9], br[5]],\r\n            [b[10], br[6]],\r\n            [br[4], R[8]],\r\n            [br[5], R[9]],\r\n            [br[6], R[10]],\r\n            [R[8], U[6]],\r\n            [R[9], U[7]],\r\n            [R[10], U[8]],\r\n            ...makeFaceTurnDefinitions(BR),\r\n        ], \"BR\");\r\n        // BL\r\n        this.addTurn([\r\n            [U[8], L[6]],\r\n            [U[9], L[7]],\r\n            [U[10], L[8]],\r\n            [L[6], bl[10]],\r\n            [L[7], bl[1]],\r\n            [L[8], bl[2]],\r\n            [bl[10], b[6]],\r\n            [bl[1], b[7]],\r\n            [bl[2], b[8]],\r\n            [b[6], BR[4]],\r\n            [b[7], BR[5]],\r\n            [b[8], BR[6]],\r\n            [BR[4], U[8]],\r\n            [BR[5], U[9]],\r\n            [BR[6], U[10]],\r\n            ...makeFaceTurnDefinitions(BL),\r\n        ], \"BL\");\r\n        // dr\r\n        this.addTurn([\r\n            [F[8], R[4]],\r\n            [F[9], R[5]],\r\n            [F[10], R[6]],\r\n            [R[4], br[8]],\r\n            [R[5], br[9]],\r\n            [R[6], br[10]],\r\n            [br[8], d[6]],\r\n            [br[9], d[7]],\r\n            [br[10], d[8]],\r\n            [d[6], dl[10]],\r\n            [d[7], dl[1]],\r\n            [d[8], dl[2]],\r\n            [dl[10], F[8]],\r\n            [dl[1], F[9]],\r\n            [dl[2], F[10]],\r\n            ...makeFaceTurnDefinitions(dr),\r\n        ], \"dr\");\r\n        // dl\r\n        this.addTurn([\r\n            [F[6], dr[4]],\r\n            [F[7], dr[5]],\r\n            [F[8], dr[6]],\r\n            [dr[4], d[8]],\r\n            [dr[5], d[9]],\r\n            [dr[6], d[10]],\r\n            [d[8], bl[6]],\r\n            [d[9], bl[7]],\r\n            [d[10], bl[8]],\r\n            [bl[6], L[10]],\r\n            [bl[7], L[1]],\r\n            [bl[8], L[2]],\r\n            [L[10], F[6]],\r\n            [L[1], F[7]],\r\n            [L[2], F[8]],\r\n            ...makeFaceTurnDefinitions(dl),\r\n        ], \"dl\");\r\n        // d\r\n        this.addTurn([\r\n            [br[10], b[2]],\r\n            [br[1], b[3]],\r\n            [br[2], b[4]],\r\n            [b[2], bl[4]],\r\n            [b[3], bl[5]],\r\n            [b[4], bl[6]],\r\n            [bl[4], dl[8]],\r\n            [bl[5], dl[9]],\r\n            [bl[6], dl[10]],\r\n            [dl[8], dr[6]],\r\n            [dl[9], dr[7]],\r\n            [dl[10], dr[8]],\r\n            [dr[6], br[10]],\r\n            [dr[7], br[1]],\r\n            [dr[8], br[2]],\r\n            ...makeFaceTurnDefinitions(d),\r\n        ], \"d\");\r\n        // br\r\n        this.addTurn([\r\n            [b[10], d[4]],\r\n            [b[1], d[5]],\r\n            [b[2], d[6]],\r\n            [d[4], dr[8]],\r\n            [d[5], dr[9]],\r\n            [d[6], dr[10]],\r\n            [dr[8], R[6]],\r\n            [dr[9], R[7]],\r\n            [dr[10], R[8]],\r\n            [R[6], BR[10]],\r\n            [R[7], BR[1]],\r\n            [R[8], BR[2]],\r\n            [BR[10], b[10]],\r\n            [BR[1], b[1]],\r\n            [BR[2], b[2]],\r\n            ...makeFaceTurnDefinitions(br),\r\n        ], \"br\");\r\n        // bl\r\n        this.addTurn([\r\n            [BL[4], L[8]],\r\n            [BL[5], L[9]],\r\n            [BL[6], L[10]],\r\n            [L[8], dl[6]],\r\n            [L[9], dl[7]],\r\n            [L[10], dl[8]],\r\n            [dl[6], d[10]],\r\n            [dl[7], d[1]],\r\n            [dl[8], d[2]],\r\n            [d[10], b[4]],\r\n            [d[1], b[5]],\r\n            [d[2], b[6]],\r\n            [b[4], BL[4]],\r\n            [b[5], BL[5]],\r\n            [b[6], BL[6]],\r\n            ...makeFaceTurnDefinitions(bl),\r\n        ], \"bl\");\r\n        // b\r\n        this.addTurn([\r\n            [br[2], BR[2]],\r\n            [br[3], BR[3]],\r\n            [br[4], BR[4]],\r\n            [BR[2], BL[2]],\r\n            [BR[3], BL[3]],\r\n            [BR[4], BL[4]],\r\n            [BL[2], bl[2]],\r\n            [BL[3], bl[3]],\r\n            [BL[4], bl[4]],\r\n            [bl[2], d[2]],\r\n            [bl[3], d[3]],\r\n            [bl[4], d[4]],\r\n            [d[2], br[2]],\r\n            [d[3], br[3]],\r\n            [d[4], br[4]],\r\n            ...makeFaceTurnDefinitions(b),\r\n        ], \"b\");\r\n        // \"Pochmann notation\"\r\n        // D++ / D--\r\n        this.addTurn([\r\n            // Top Layer\r\n            [F[0], R[0]],\r\n            [F[1], R[9]],\r\n            [F[5], R[3]],\r\n            [F[6], R[4]],\r\n            [F[7], R[5]],\r\n            [F[8], R[6]],\r\n            [F[9], R[7]],\r\n            [F[10], R[8]],\r\n            [R[0], BR[0]],\r\n            [R[3], BR[9]],\r\n            [R[4], BR[10]],\r\n            [R[5], BR[1]],\r\n            [R[6], BR[2]],\r\n            [R[7], BR[3]],\r\n            [R[8], BR[4]],\r\n            [R[9], BR[5]],\r\n            [BR[0], BL[0]],\r\n            [BR[9], BL[1]],\r\n            [BR[10], BL[2]],\r\n            [BR[1], BL[3]],\r\n            [BR[2], BL[4]],\r\n            [BR[3], BL[5]],\r\n            [BR[4], BL[6]],\r\n            [BR[5], BL[7]],\r\n            [BL[0], L[0]],\r\n            [BL[1], L[7]],\r\n            [BL[2], L[8]],\r\n            [BL[3], L[9]],\r\n            [BL[4], L[10]],\r\n            [BL[5], L[1]],\r\n            [BL[6], L[2]],\r\n            [BL[7], L[3]],\r\n            [L[0], F[0]],\r\n            [L[7], F[5]],\r\n            [L[8], F[6]],\r\n            [L[9], F[7]],\r\n            [L[10], F[8]],\r\n            [L[1], F[9]],\r\n            [L[2], F[10]],\r\n            [L[3], F[1]],\r\n            // Bottom Layer\r\n            [dr[0], br[0]],\r\n            [dr[1], br[5]],\r\n            [dr[2], br[6]],\r\n            [dr[3], br[7]],\r\n            [dr[4], br[8]],\r\n            [dr[5], br[9]],\r\n            [dr[6], br[10]],\r\n            [dr[7], br[1]],\r\n            [dr[8], br[2]],\r\n            [dr[9], br[3]],\r\n            [dr[10], br[4]],\r\n            [br[0], b[0]],\r\n            [br[1], b[3]],\r\n            [br[2], b[4]],\r\n            [br[3], b[5]],\r\n            [br[4], b[6]],\r\n            [br[5], b[7]],\r\n            [br[6], b[8]],\r\n            [br[7], b[9]],\r\n            [br[8], b[10]],\r\n            [br[9], b[1]],\r\n            [br[10], b[2]],\r\n            [b[0], bl[0]],\r\n            [b[1], bl[3]],\r\n            [b[2], bl[4]],\r\n            [b[3], bl[5]],\r\n            [b[4], bl[6]],\r\n            [b[5], bl[7]],\r\n            [b[6], bl[8]],\r\n            [b[7], bl[9]],\r\n            [b[8], bl[10]],\r\n            [b[9], bl[1]],\r\n            [b[10], bl[2]],\r\n            [bl[0], dl[0]],\r\n            [bl[1], dl[5]],\r\n            [bl[2], dl[6]],\r\n            [bl[3], dl[7]],\r\n            [bl[4], dl[8]],\r\n            [bl[5], dl[9]],\r\n            [bl[6], dl[10]],\r\n            [bl[7], dl[1]],\r\n            [bl[8], dl[2]],\r\n            [bl[9], dl[3]],\r\n            [bl[10], dl[4]],\r\n            [dl[0], dr[0]],\r\n            [dl[1], dr[9]],\r\n            [dl[2], dr[10]],\r\n            [dl[3], dr[1]],\r\n            [dl[4], dr[2]],\r\n            [dl[5], dr[3]],\r\n            [dl[6], dr[4]],\r\n            [dl[7], dr[5]],\r\n            [dl[8], dr[6]],\r\n            [dl[9], dr[7]],\r\n            [dl[10], dr[8]],\r\n            ...makeFaceTurnDefinitions(d),\r\n        ], \"D++\");\r\n        // R++ / R--\r\n        this.addTurn([\r\n            // Top Layer\r\n            [F[0], U[0]],\r\n            [F[7], U[3]],\r\n            [F[8], U[4]],\r\n            [F[9], U[5]],\r\n            [F[10], U[6]],\r\n            [F[1], U[7]],\r\n            [F[2], U[8]],\r\n            [F[3], U[9]],\r\n            [U[0], BL[0]],\r\n            [U[3], BL[9]],\r\n            [U[4], BL[10]],\r\n            [U[5], BL[1]],\r\n            [U[6], BL[2]],\r\n            [U[7], BL[3]],\r\n            [U[8], BL[4]],\r\n            [U[9], BL[5]],\r\n            [BL[0], bl[0]],\r\n            [BL[9], bl[1]],\r\n            [BL[10], bl[2]],\r\n            [BL[1], bl[3]],\r\n            [BL[2], bl[4]],\r\n            [BL[3], bl[5]],\r\n            [BL[4], bl[6]],\r\n            [BL[5], bl[7]],\r\n            [bl[0], dl[0]],\r\n            [bl[1], dl[7]],\r\n            [bl[2], dl[8]],\r\n            [bl[3], dl[9]],\r\n            [bl[4], dl[10]],\r\n            [bl[5], dl[1]],\r\n            [bl[6], dl[2]],\r\n            [bl[7], dl[3]],\r\n            [dl[0], F[0]],\r\n            [dl[7], F[7]],\r\n            [dl[8], F[8]],\r\n            [dl[9], F[9]],\r\n            [dl[10], F[10]],\r\n            [dl[1], F[1]],\r\n            [dl[2], F[2]],\r\n            [dl[3], F[3]],\r\n            // Bottom Layer\r\n            [dr[0], R[0]],\r\n            [dr[1], R[9]],\r\n            [dr[2], R[10]],\r\n            [dr[3], R[1]],\r\n            [dr[4], R[2]],\r\n            [dr[5], R[3]],\r\n            [dr[6], R[4]],\r\n            [dr[7], R[5]],\r\n            [dr[8], R[6]],\r\n            [dr[9], R[7]],\r\n            [dr[10], R[8]],\r\n            [R[0], BR[0]],\r\n            [R[1], BR[5]],\r\n            [R[2], BR[6]],\r\n            [R[3], BR[7]],\r\n            [R[4], BR[8]],\r\n            [R[5], BR[9]],\r\n            [R[6], BR[10]],\r\n            [R[7], BR[1]],\r\n            [R[8], BR[2]],\r\n            [R[9], BR[3]],\r\n            [R[10], BR[4]],\r\n            [BR[0], b[0]],\r\n            [BR[1], b[1]],\r\n            [BR[2], b[2]],\r\n            [BR[3], b[3]],\r\n            [BR[4], b[4]],\r\n            [BR[5], b[5]],\r\n            [BR[6], b[6]],\r\n            [BR[7], b[7]],\r\n            [BR[8], b[8]],\r\n            [BR[9], b[9]],\r\n            [BR[10], b[10]],\r\n            [b[0], d[0]],\r\n            [b[1], d[5]],\r\n            [b[2], d[6]],\r\n            [b[3], d[7]],\r\n            [b[4], d[8]],\r\n            [b[5], d[9]],\r\n            [b[6], d[10]],\r\n            [b[7], d[1]],\r\n            [b[8], d[2]],\r\n            [b[9], d[3]],\r\n            [b[10], d[4]],\r\n            [d[0], dr[0]],\r\n            [d[1], dr[5]],\r\n            [d[2], dr[6]],\r\n            [d[3], dr[7]],\r\n            [d[4], dr[8]],\r\n            [d[5], dr[9]],\r\n            [d[6], dr[10]],\r\n            [d[7], dr[1]],\r\n            [d[8], dr[2]],\r\n            [d[9], dr[3]],\r\n            [d[10], dr[4]],\r\n            ...makeFaceTurnDefinitions(br),\r\n        ], \"R++\");\r\n    }\r\n    U(reverse) {\r\n        this.doTurn(\"U\", reverse);\r\n    }\r\n    R(reverse) {\r\n        this.doTurn(\"R\", reverse);\r\n    }\r\n    F(reverse) {\r\n        this.doTurn(\"F\", reverse);\r\n    }\r\n    dr(reverse) {\r\n        this.doTurn(\"dr\", reverse);\r\n    }\r\n    dl(reverse) {\r\n        this.doTurn(\"dl\", reverse);\r\n    }\r\n    L(reverse) {\r\n        this.doTurn(\"L\", reverse);\r\n    }\r\n    d(reverse) {\r\n        this.doTurn(\"d\", reverse);\r\n    }\r\n    br(reverse) {\r\n        this.doTurn(\"br\", reverse);\r\n    }\r\n    BR(reverse) {\r\n        this.doTurn(\"BR\", reverse);\r\n    }\r\n    BL(reverse) {\r\n        this.doTurn(\"BL\", reverse);\r\n    }\r\n    bl(reverse) {\r\n        this.doTurn(\"bl\", reverse);\r\n    }\r\n    b(reverse) {\r\n        this.doTurn(\"b\", reverse);\r\n    }\r\n    /**\r\n     * D++ for Pochmann notation. D-- if reverse = false\r\n     */\r\n    Dxx(reverse) {\r\n        this.doTurn(\"D++\", reverse);\r\n    }\r\n    /**\r\n     * R++ for Pochmann notation. R-- if reverse = false\r\n     */\r\n    Rxx(reverse) {\r\n        this.doTurn(\"R++\", reverse);\r\n    }\r\n    /**\r\n     * Parses and executes a megaminx algorithm using WCA standard notation\r\n     *\r\n     * @see https://www.stefan-pochmann.info/spocc/other_stuff/tools/scramble_megaminx/)\r\n     * @see https://www.worldcubeassociation.org/regulations/#12d\r\n     *\r\n     * @param alg megaminx algorithm to parse\r\n     * @example\r\n     * ```\r\n     * R-- D++ R++ U'\r\n     * ```\r\n     */\r\n    alg(alg) {\r\n        if (!alg) {\r\n            return;\r\n        }\r\n        // pochmann notation\r\n        this.doTurns(parseMegaminxAlgorithm(alg));\r\n    }\r\n    case(alg) {\r\n        if (!alg) {\r\n            return;\r\n        }\r\n        let turns = parseMegaminxAlgorithm(alg)\r\n            .reverse()\r\n            .map((turn) => (Object.assign(Object.assign({}, turn), { turnType: turn.turnType === TurnType.Clockwise\r\n                ? TurnType.CounterClockwise\r\n                : TurnType.Clockwise })));\r\n        this.doTurns(turns);\r\n    }\r\n    doTurns(turns) {\r\n        turns.forEach((turn) => {\r\n            let reverse = turn.turnType === TurnType.CounterClockwise;\r\n            let turnFunc;\r\n            switch (turn.unit) {\r\n                case \"Rxx\":\r\n                    turnFunc = this.Rxx.bind(this);\r\n                    break;\r\n                case \"Dxx\":\r\n                    turnFunc = this.Dxx.bind(this);\r\n                    break;\r\n                case \"U\":\r\n                    turnFunc = this.U.bind(this);\r\n                    break;\r\n                case \"R\":\r\n                    turnFunc = this.R.bind(this);\r\n                    break;\r\n                case \"F\":\r\n                    turnFunc = this.F.bind(this);\r\n                    break;\r\n                case \"L\":\r\n                    turnFunc = this.L.bind(this);\r\n                    break;\r\n                case \"BL\":\r\n                    turnFunc = this.BL.bind(this);\r\n                    break;\r\n                case \"BR\":\r\n                    turnFunc = this.BR.bind(this);\r\n                    break;\r\n            }\r\n            for (let i = turn.n; i > 0; i--) {\r\n                turnFunc(reverse);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Generates turn definitions for rotating a megaminx face clockwise\r\n * @param face array of sticker ids\r\n */\r\nfunction makeFaceTurnDefinitions(face) {\r\n    return [\r\n        // Edges\r\n        [face[1], face[9]],\r\n        [face[9], face[7]],\r\n        [face[7], face[5]],\r\n        [face[5], face[3]],\r\n        [face[3], face[1]],\r\n        // Corners\r\n        [face[2], face[10]],\r\n        [face[10], face[8]],\r\n        [face[8], face[6]],\r\n        [face[6], face[4]],\r\n        [face[4], face[2]],\r\n    ];\r\n}\r\n","export var SIMULATOR_FACE;\r\n(function (SIMULATOR_FACE) {\r\n    SIMULATOR_FACE[\"U\"] = \"U\";\r\n    SIMULATOR_FACE[\"R\"] = \"R\";\r\n    SIMULATOR_FACE[\"F\"] = \"F\";\r\n    SIMULATOR_FACE[\"D\"] = \"D\";\r\n    SIMULATOR_FACE[\"L\"] = \"L\";\r\n    SIMULATOR_FACE[\"B\"] = \"B\";\r\n})(SIMULATOR_FACE || (SIMULATOR_FACE = {}));\r\nexport const CUBE_FACES = [\r\n    SIMULATOR_FACE.U,\r\n    SIMULATOR_FACE.R,\r\n    SIMULATOR_FACE.F,\r\n    SIMULATOR_FACE.D,\r\n    SIMULATOR_FACE.L,\r\n    SIMULATOR_FACE.B,\r\n];\r\nexport var CUBE_AXIS;\r\n(function (CUBE_AXIS) {\r\n    CUBE_AXIS[\"X\"] = \"X\";\r\n    CUBE_AXIS[\"Y\"] = \"Y\";\r\n    CUBE_AXIS[\"Z\"] = \"Z\";\r\n})(CUBE_AXIS || (CUBE_AXIS = {}));\r\n// Faces that wrap around a given axis\r\nexport const CUBE_AXIS_FACES = {\r\n    X: [SIMULATOR_FACE.U, SIMULATOR_FACE.B, SIMULATOR_FACE.D, SIMULATOR_FACE.F],\r\n    Y: [SIMULATOR_FACE.L, SIMULATOR_FACE.B, SIMULATOR_FACE.R, SIMULATOR_FACE.F],\r\n    Z: [SIMULATOR_FACE.L, SIMULATOR_FACE.U, SIMULATOR_FACE.R, SIMULATOR_FACE.D],\r\n};\r\n// Face's orientation related to other faces on a given axis\r\n// the number represents the number of turns necessary\r\n// to orient the face in the same direction\r\nexport const AXIS_ORIENTATION = {\r\n    X: {\r\n        [SIMULATOR_FACE.U]: 0,\r\n        [SIMULATOR_FACE.B]: 2,\r\n        [SIMULATOR_FACE.F]: 0,\r\n        [SIMULATOR_FACE.D]: 0,\r\n    },\r\n    Y: {\r\n        [SIMULATOR_FACE.B]: -1,\r\n        [SIMULATOR_FACE.F]: -1,\r\n        [SIMULATOR_FACE.L]: -1,\r\n        [SIMULATOR_FACE.R]: -1,\r\n    },\r\n    Z: {\r\n        [SIMULATOR_FACE.U]: -1,\r\n        [SIMULATOR_FACE.D]: 1,\r\n        [SIMULATOR_FACE.L]: 2,\r\n        [SIMULATOR_FACE.R]: 0,\r\n    },\r\n};\r\n// True if faces are in reverse orientation\r\n// from the axis it's on (X, Y, Z).\r\n// For example D turns on the Y axis, but the\r\n// y axis layer turns clockwise based on the U\r\n// face, so D needs to be reversed\r\nexport const AXIS_FACE_ORIENTATION = {\r\n    [SIMULATOR_FACE.U]: false,\r\n    [SIMULATOR_FACE.R]: false,\r\n    [SIMULATOR_FACE.F]: false,\r\n    [SIMULATOR_FACE.D]: true,\r\n    [SIMULATOR_FACE.L]: true,\r\n    [SIMULATOR_FACE.B]: true,\r\n};\r\n","import { Vector2, Vector3 } from \"./vector\";\r\nexport function degreesToRadians(degrees) {\r\n    return (Math.PI * degrees) / 180;\r\n}\r\nexport function polarToCartesian(radius, theta) {\r\n    const x = radius * Math.cos(theta);\r\n    const y = radius * Math.sin(theta);\r\n    return Vector2.fromValues(x, y);\r\n}\r\nexport function lineSegmentLength(p1, p2) {\r\n    return Math.sqrt(Math.pow(p2.y - p1.y, 2) + Math.pow(p2.x - p1.x, 2));\r\n}\r\n/**\r\n * Calculates the radius of a circle inscribing a regular\r\n * pentagon given the side length\r\n */\r\nexport function pentagonInRadius(length) {\r\n    return length / (2 * Math.tan(Math.PI / 5));\r\n}\r\n/**\r\n * Calculates the radius of a circle circumscribing a\r\n * regular pentagon given the side length\r\n */\r\nexport function pentagonOutRadius(length) {\r\n    return length / (2 * Math.sin(Math.PI / 5));\r\n}\r\n/**\r\n * Calculates the radius of the sphere that inscribes a\r\n * regular dodecahedron given the side length\r\n */\r\nexport function dodecahedronInRadius(length) {\r\n    return (length / 2) * Math.sqrt(5 / 2 + (11 / 10) * Math.sqrt(5));\r\n}\r\nexport function calculateCentroid(vertices) {\r\n    let cx = 0, cy = 0, cz = 0;\r\n    vertices.forEach((vertex) => {\r\n        cx += vertex.x;\r\n        cy += vertex.y;\r\n        cz += vertex.z;\r\n    });\r\n    cx /= vertices.length;\r\n    cy /= vertices.length;\r\n    cz /= vertices.length;\r\n    return Vector3.fromValues(cx, cy, cz);\r\n}\r\n/**\r\n * generates an array with values in a given range by step\r\n *\r\n * ex. range(1, 5) -> [1, 2, 3, 4, 5]\r\n * ex. range(5, 2) -> [5, 4, 3, 2]\r\n *\r\n * @param from start of range\r\n * @param to end of range\r\n */\r\nexport function range(from, to) {\r\n    if (from === to) {\r\n        return [from];\r\n    }\r\n    const increment = from < to ? 1 : -1;\r\n    let values = [];\r\n    for (let current = from; current != to; current += increment) {\r\n        values.push(current);\r\n    }\r\n    values.push(to);\r\n    return values;\r\n}\r\n","import { CubeAlgorithmUnit } from \"./../../algorithms/cube\";\r\nimport { fillArray } from \"../../utils/arrays\";\r\nimport { CUBE_FACES, CUBE_AXIS, CUBE_AXIS_FACES, AXIS_ORIENTATION, SIMULATOR_FACE, AXIS_FACE_ORIENTATION, } from \"./constants\";\r\nimport { Simulator } from \"../simulator\";\r\nimport { range } from \"../../math/utils\";\r\nimport { parseCubeAlgorithm } from \"../../algorithms/cube\";\r\nimport { TurnType } from \"../../algorithms/algorithm\";\r\nexport class RubiksCubeSimulator extends Simulator {\r\n    constructor(size) {\r\n        super();\r\n        this.size = size;\r\n        this.gridSize = size * size;\r\n        CUBE_FACES.forEach((faceName) => {\r\n            // Create stickers for face\r\n            this.addFace(fillArray(this.gridSize, faceName), faceName);\r\n            const faceChanges = this.makeFaceTurnDefinitions(faceName);\r\n            // Create rotation for stickers on face only\r\n            this.addTurn(faceChanges, faceName);\r\n        });\r\n        // Create rotations for stickers on each layer\r\n        // around each turnable axis\r\n        [CUBE_AXIS.X, CUBE_AXIS.Y, CUBE_AXIS.Z].forEach((axis) => {\r\n            for (let column = 0; column < this.size; column++) {\r\n                let layerChanges = [];\r\n                CUBE_AXIS_FACES[axis].forEach((faceName, i) => {\r\n                    const nextFaceName = CUBE_AXIS_FACES[axis][(i + 1) % CUBE_AXIS_FACES[axis].length];\r\n                    const nextFace = this.faces.get(nextFaceName);\r\n                    const currentFace = this.faces.get(faceName);\r\n                    for (let row = 0; row < this.size; row++) {\r\n                        const stickerIndex = this.size * row + column;\r\n                        const sticker1 = currentFace[this.axisAlignedSticker(axis, faceName, stickerIndex)];\r\n                        const sticker2 = nextFace[this.axisAlignedSticker(axis, nextFaceName, stickerIndex)];\r\n                        layerChanges.push([sticker1, sticker2]);\r\n                    }\r\n                });\r\n                this.addTurn(layerChanges, `${axis}-${column}`);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Makes turn definitions for a face of the cube\r\n     *\r\n     * @param faceName the label of the face to make turn definitions\r\n     * @example returning turn definitions for stickers on a 2x2\r\n     * ```\r\n     * addFace(['y', 'y', 'y', 'y'], 'U');\r\n     * // returns { faceId: 'U', stickerIds: ['1','2','3','4'] }\r\n     *\r\n     * makeTurnDefinitions('U');\r\n     * // returns [\r\n     * //   ['1','2'],\r\n     * //   ['2','4'],\r\n     * //   ['3','1'],\r\n     * //   ['4','3']\r\n     * // ]\r\n     * ```\r\n     */\r\n    makeFaceTurnDefinitions(faceName) {\r\n        const stickerIds = this.faces.get(faceName);\r\n        return stickerIds.map((stickerId, i) => [\r\n            stickerId,\r\n            stickerIds[this.clockwiseSticker(i)],\r\n        ]);\r\n    }\r\n    /**\r\n     * Given sticker i return the index it will go to\r\n     * after rotating clockwise\r\n     *\r\n     * ex. stickers are stored in an array but represent a grid\r\n     * so, for a 3x3 sticker index 0 will rotate to 2, 1 to 5, etc...\r\n     *\r\n     * ```\r\n     *  0 | 1 | 2\r\n     *  ----------\r\n     *  3 | 4 | 5\r\n     *  ----------\r\n     *  6 | 7 | 8\r\n     * ```\r\n     */\r\n    clockwiseSticker(stickerIndex) {\r\n        return (((stickerIndex + 1) * this.size) % (this.gridSize + 1)) - 1;\r\n    }\r\n    /**\r\n     * Given sticker i return the index it will go to\r\n     * after rotating counterclockwise\r\n     */\r\n    counterClockwiseSticker(stickerIndex) {\r\n        return this.oppositeSticker(this.clockwiseSticker(stickerIndex));\r\n    }\r\n    /**\r\n     * Given sticker i return the index it will go to\r\n     * after rotating 180 degrees\r\n     */\r\n    oppositeSticker(stickerIndex) {\r\n        return this.gridSize - (stickerIndex + 1);\r\n    }\r\n    axisAlignedSticker(axis, face, stickerIndex) {\r\n        switch (AXIS_ORIENTATION[axis][face]) {\r\n            case 0:\r\n                return stickerIndex;\r\n            case 1:\r\n                return this.clockwiseSticker(stickerIndex);\r\n            case 2:\r\n                return this.oppositeSticker(stickerIndex);\r\n            case -1:\r\n                return this.counterClockwiseSticker(stickerIndex);\r\n            default:\r\n                throw `Invalid axis face orientation value ${AXIS_ORIENTATION[axis][face]}`;\r\n        }\r\n    }\r\n    /**\r\n     * Performs a turn on a given face.\r\n     *\r\n     * @param face the face to turn\r\n     * @param axis axis to perform inner layer turns on\r\n     * @param reverse true if you want to turn the face counter clockwise\r\n     * @param from inner layer to start turning from\r\n     * @param to last inner layer to stop turning\r\n     * @param to last inner layer to stop turning\r\n     */\r\n    turnFace(face, axis, reverse, from, to) {\r\n        if (Math.abs(to - from) >= this.size - 1) {\r\n            console.error(`Invalid number of layers to turn, skipping turn.; face=${face}, layers=${Math.abs(to - from) + 1}`);\r\n            return;\r\n        }\r\n        // Rotate face\r\n        this.doTurn(face, reverse);\r\n        // Turn inner layers\r\n        range(from, to).forEach((layer) => {\r\n            this.doTurn(`${axis}-${layer}`, AXIS_FACE_ORIENTATION[face] ? !reverse : reverse);\r\n        });\r\n    }\r\n    /**\r\n     * Performs a U turn\r\n     * @param reverse true if you want to turn the face counter clockwise (U')\r\n     * @param layers how many inner layers of the face to turn defaults to 1. Cannot be the cube size or greater\r\n     */\r\n    U(reverse = false, layers = 1) {\r\n        this.turnFace(SIMULATOR_FACE.U, CUBE_AXIS.Y, reverse, this.size - 1, this.size - layers);\r\n    }\r\n    /**\r\n     * Performs an R turn\r\n     * @param reverse true if you want to turn the face counter clockwise (R')\r\n     * @param layers how many inner layers of the face to turn defaults to 1. Cannot be the cube size or greater\r\n     */\r\n    R(reverse = false, layers = 1) {\r\n        this.turnFace(SIMULATOR_FACE.R, CUBE_AXIS.X, reverse, this.size - 1, this.size - layers);\r\n    }\r\n    /**\r\n     * Performs an F turn\r\n     * @param reverse true if you want to turn the face counter clockwise (F')\r\n     * @param layers how many inner layers of the face to turn defaults to 1. Cannot be the cube size or greater\r\n     */\r\n    F(reverse = false, layers = 1) {\r\n        this.turnFace(SIMULATOR_FACE.F, CUBE_AXIS.Z, reverse, 0, layers - 1);\r\n    }\r\n    /**\r\n     * Performs a D turn\r\n     * @param reverse true if you want to turn the face counter clockwise (D')\r\n     * @param layers how many inner layers of the face to turn defaults to 1. Cannot be the cube size or greater\r\n     */\r\n    D(reverse = false, layers = 1) {\r\n        this.turnFace(SIMULATOR_FACE.D, CUBE_AXIS.Y, reverse, 0, layers - 1);\r\n    }\r\n    /**\r\n     * Performs an L turn\r\n     * @param reverse true if you want to turn the face counter clockwise (L')\r\n     * @param layers how many inner layers of the face to turn defaults to 1. Cannot be the cube size or greater\r\n     */\r\n    L(reverse = false, layers = 1) {\r\n        this.turnFace(SIMULATOR_FACE.L, CUBE_AXIS.X, reverse, 0, layers - 1);\r\n    }\r\n    /**\r\n     * Performs a B turn\r\n     * @param reverse true if you want to turn the face counter clockwise (B')\r\n     * @param layers how many inner layers of the face to turn defaults to 1. Cannot be the cube size or greater\r\n     */\r\n    B(reverse = false, layers = 1) {\r\n        this.turnFace(SIMULATOR_FACE.B, CUBE_AXIS.Z, reverse, this.size - 1, this.size - layers);\r\n    }\r\n    /**\r\n     * Rotates the middle slice in the direction of an L turn\r\n     * https://ruwix.com/the-rubiks-cube/notation/advanced/\r\n     *\r\n     * Will rotate all middle layers inbetween R and L for larger cubes\r\n     */\r\n    M(reverse = false) {\r\n        for (let layer = 1; layer < this.size - 1; layer++) {\r\n            this.doTurn(`${CUBE_AXIS.X}-${layer}`, !reverse);\r\n        }\r\n    }\r\n    /**\r\n     * Rotates the standing layers in the direction of an F turn\r\n     * https://ruwix.com/the-rubiks-cube/notation/advanced/\r\n     *\r\n     * Will rotate all middle layers inbetween F and B for larger cubes\r\n     */\r\n    S(reverse = false) {\r\n        for (let layer = 1; layer < this.size - 1; layer++) {\r\n            this.doTurn(`${CUBE_AXIS.Z}-${layer}`, reverse);\r\n        }\r\n    }\r\n    /**\r\n     * Rotates the equitorial layers in the direction of a D turn\r\n     * https://ruwix.com/the-rubiks-cube/notation/advanced/\r\n     *\r\n     * Will rotate all middle layers inbetween U and D for larger cubes\r\n     */\r\n    E(reverse = false) {\r\n        for (let layer = 1; layer < this.size - 1; layer++) {\r\n            this.doTurn(`${CUBE_AXIS.Y}-${layer}`, !reverse);\r\n        }\r\n    }\r\n    /**\r\n     * rotates the entire cube on R\r\n     */\r\n    X(reverse = false) {\r\n        this.doTurn(\"R\", reverse);\r\n        this.doTurn(\"L\", !reverse);\r\n        for (let layer = 0; layer < this.size; layer++) {\r\n            this.doTurn(`${CUBE_AXIS.X}-${layer}`, reverse);\r\n        }\r\n    }\r\n    /**\r\n     * rotates the entire cube on U\r\n     */\r\n    Y(reverse = false) {\r\n        this.doTurn(\"U\", reverse);\r\n        this.doTurn(\"D\", !reverse);\r\n        for (let layer = 0; layer < this.size; layer++) {\r\n            this.doTurn(`${CUBE_AXIS.Y}-${layer}`, reverse);\r\n        }\r\n    }\r\n    /**\r\n     * rotates the entire cube on F\r\n     */\r\n    Z(reverse = false) {\r\n        this.doTurn(\"F\", reverse);\r\n        this.doTurn(\"B\", !reverse);\r\n        for (let layer = 0; layer < this.size; layer++) {\r\n            this.doTurn(`${CUBE_AXIS.Z}-${layer}`, reverse);\r\n        }\r\n    }\r\n    alg(alg) {\r\n        if (!alg) {\r\n            return;\r\n        }\r\n        this.doTurns(parseCubeAlgorithm(alg));\r\n    }\r\n    /**\r\n     * reverses an algorithm then executes it\r\n     */\r\n    case(alg) {\r\n        if (!alg) {\r\n            return;\r\n        }\r\n        let turns = parseCubeAlgorithm(alg)\r\n            .reverse()\r\n            .map((turn) => {\r\n            switch (turn.turnType) {\r\n                case TurnType.Clockwise:\r\n                    turn.turnType = TurnType.CounterClockwise;\r\n                    break;\r\n                case TurnType.CounterClockwise:\r\n                    turn.turnType = TurnType.Clockwise;\r\n                    break;\r\n                case TurnType.Double:\r\n                    break;\r\n            }\r\n            return turn;\r\n        });\r\n        this.doTurns(turns);\r\n    }\r\n    doTurns(turns) {\r\n        turns.forEach((turn) => {\r\n            let turnFunc;\r\n            switch (turn.unit) {\r\n                case CubeAlgorithmUnit.U:\r\n                    turnFunc = this.U.bind(this);\r\n                    break;\r\n                case CubeAlgorithmUnit.R:\r\n                    turnFunc = this.R.bind(this);\r\n                    break;\r\n                case CubeAlgorithmUnit.F:\r\n                    turnFunc = this.F.bind(this);\r\n                    break;\r\n                case CubeAlgorithmUnit.D:\r\n                    turnFunc = this.D.bind(this);\r\n                    break;\r\n                case CubeAlgorithmUnit.L:\r\n                    turnFunc = this.L.bind(this);\r\n                    break;\r\n                case CubeAlgorithmUnit.B:\r\n                    turnFunc = this.B.bind(this);\r\n                    break;\r\n                case CubeAlgorithmUnit.M:\r\n                    turnFunc = this.M.bind(this);\r\n                    break;\r\n                case CubeAlgorithmUnit.E:\r\n                    turnFunc = this.E.bind(this);\r\n                    break;\r\n                case CubeAlgorithmUnit.S:\r\n                    turnFunc = this.S.bind(this);\r\n                    break;\r\n                case CubeAlgorithmUnit.X:\r\n                    turnFunc = this.X.bind(this);\r\n                    break;\r\n                case CubeAlgorithmUnit.Y:\r\n                    turnFunc = this.Y.bind(this);\r\n                    break;\r\n                case CubeAlgorithmUnit.Z:\r\n                    turnFunc = this.Z.bind(this);\r\n                    break;\r\n                default:\r\n                    console.warn(`Unsupported cube move`, turn);\r\n                    break;\r\n            }\r\n            const reverse = turn.turnType === TurnType.CounterClockwise;\r\n            turnFunc(reverse, turn.slices);\r\n            if (turn.turnType === TurnType.Double) {\r\n                turnFunc(reverse, turn.slices);\r\n            }\r\n        });\r\n    }\r\n}\r\n","/**\r\n * Simple generator that yields a new ID every time\r\n * its called. Used to give unique IDs to geometry.\r\n */\r\nexport const generateUid = (() => {\r\n    let current = 0;\r\n    return function () {\r\n        return current++;\r\n    };\r\n})();\r\n","/**\r\n * Credit to logic https://github.com/toji/gl-matrix/blob/master/src/mat4.js\r\n */\r\nconst EPSILON = 0.000001;\r\nexport class Matrix4 {\r\n    /**\r\n     * Returns a 4x4 matrix with the given values\r\n     */\r\n    static fromValues(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14, m15, m16) {\r\n        return new Matrix4([\r\n            m1,\r\n            m2,\r\n            m3,\r\n            m4,\r\n            m5,\r\n            m6,\r\n            m7,\r\n            m8,\r\n            m9,\r\n            m10,\r\n            m11,\r\n            m12,\r\n            m13,\r\n            m14,\r\n            m15,\r\n            m16,\r\n        ]);\r\n    }\r\n    static fromQuaternion(q) {\r\n        let { a: x, b: y, c: z, d: w } = q;\r\n        let x2 = x + x;\r\n        let y2 = y + y;\r\n        let z2 = z + z;\r\n        let xx = x * x2;\r\n        let yx = y * x2;\r\n        let yy = y * y2;\r\n        let zx = z * x2;\r\n        let zy = z * y2;\r\n        let zz = z * z2;\r\n        let wx = w * x2;\r\n        let wy = w * y2;\r\n        let wz = w * z2;\r\n        return Matrix4.fromValues(1 - yy - zz, yx + wz, zx - wy, 0, yx - wz, 1 - xx - zz, zy + wx, 0, zx + wy, zy - wx, 1 - xx - yy, 0, 0, 0, 0, 1);\r\n    }\r\n    static fromTranslation(x, y, z) {\r\n        return Matrix4.fromValues(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x, y, z, 1);\r\n    }\r\n    static fromXRotation(radians) {\r\n        let s = Math.sin(radians);\r\n        let c = Math.cos(radians);\r\n        return Matrix4.fromValues(1, 0, 0, 0, 0, c, s, 0, 0, -s, c, 0, 0, 0, 0, 1);\r\n    }\r\n    static fromYRotation(radians) {\r\n        let s = Math.sin(radians);\r\n        let c = Math.cos(radians);\r\n        return Matrix4.fromValues(c, 0, -s, 0, 0, 1, 0, 0, s, 0, c, 0, 0, 0, 0, 1);\r\n    }\r\n    /**\r\n     * copy values from one matrix to another\r\n     */\r\n    static copy(out, matrix) {\r\n        out.values[0] = matrix.values[0];\r\n        out.values[1] = matrix.values[1];\r\n        out.values[2] = matrix.values[2];\r\n        out.values[3] = matrix.values[3];\r\n        out.values[4] = matrix.values[4];\r\n        out.values[5] = matrix.values[5];\r\n        out.values[6] = matrix.values[6];\r\n        out.values[7] = matrix.values[7];\r\n        out.values[8] = matrix.values[8];\r\n        out.values[9] = matrix.values[9];\r\n        out.values[10] = matrix.values[10];\r\n        out.values[11] = matrix.values[11];\r\n        out.values[12] = matrix.values[12];\r\n        out.values[13] = matrix.values[13];\r\n        out.values[14] = matrix.values[14];\r\n        out.values[15] = matrix.values[15];\r\n    }\r\n    static multiply(out, a, b) {\r\n        let a00 = a.values[0], a01 = a.values[1], a02 = a.values[2], a03 = a.values[3];\r\n        let a10 = a.values[4], a11 = a.values[5], a12 = a.values[6], a13 = a.values[7];\r\n        let a20 = a.values[8], a21 = a.values[9], a22 = a.values[10], a23 = a.values[11];\r\n        let a30 = a.values[12], a31 = a.values[13], a32 = a.values[14], a33 = a.values[15];\r\n        // Cache only the current line of the second matrix\r\n        let b0 = b.values[0], b1 = b.values[1], b2 = b.values[2], b3 = b.values[3];\r\n        out.values[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out.values[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out.values[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out.values[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        b0 = b.values[4];\r\n        b1 = b.values[5];\r\n        b2 = b.values[6];\r\n        b3 = b.values[7];\r\n        out.values[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out.values[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out.values[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out.values[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        b0 = b.values[8];\r\n        b1 = b.values[9];\r\n        b2 = b.values[10];\r\n        b3 = b.values[11];\r\n        out.values[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out.values[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out.values[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out.values[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        b0 = b.values[12];\r\n        b1 = b.values[13];\r\n        b2 = b.values[14];\r\n        b3 = b.values[15];\r\n        out.values[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out.values[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out.values[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out.values[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        return out;\r\n    }\r\n    /**\r\n     * Generates a perspective projection matrix with the given bounds.\r\n     * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\r\n     * which matches WebGL/OpenGL's clip volume.\r\n     * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n     *\r\n     * @param {number} fovy Vertical field of view in radians\r\n     * @param {number} aspect Aspect ratio. typically viewport width/height\r\n     * @param {number} near Near bound of the frustum\r\n     * @param {number} far Far bound of the frustum, can be null or Infinity\r\n     */\r\n    static perspective(fovy, aspect, near, far) {\r\n        const f = 1.0 / Math.tan(fovy / 2);\r\n        const values = [f / aspect, 0, 0, 0, 0, f, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0];\r\n        if (far != null && far !== Infinity) {\r\n            const nf = 1 / (near - far);\r\n            values[10] = (far + near) * nf;\r\n            values[14] = 2 * far * near * nf;\r\n        }\r\n        else {\r\n            values[10] = -1;\r\n            values[14] = -2 * near;\r\n        }\r\n        return new Matrix4(values);\r\n    }\r\n    constructor(values) {\r\n        if (Array.isArray(values) && values.length == 16) {\r\n            this.values = values;\r\n        }\r\n        else {\r\n            this.values = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\r\n        }\r\n    }\r\n    translate(x, y, z) {\r\n        this.values[12] =\r\n            this.values[0] * x +\r\n                this.values[4] * y +\r\n                this.values[8] * z +\r\n                this.values[12];\r\n        this.values[13] =\r\n            this.values[1] * x +\r\n                this.values[5] * y +\r\n                this.values[9] * z +\r\n                this.values[13];\r\n        this.values[14] =\r\n            this.values[2] * x +\r\n                this.values[6] * y +\r\n                this.values[10] * z +\r\n                this.values[14];\r\n        this.values[15] =\r\n            this.values[3] * x +\r\n                this.values[7] * y +\r\n                this.values[11] * z +\r\n                this.values[15];\r\n    }\r\n    scale(x, y, z) {\r\n        this.values[0] = this.values[0] * x;\r\n        this.values[1] = this.values[1] * x;\r\n        this.values[2] = this.values[2] * x;\r\n        this.values[3] = this.values[3] * x;\r\n        this.values[4] = this.values[4] * y;\r\n        this.values[5] = this.values[5] * y;\r\n        this.values[6] = this.values[6] * y;\r\n        this.values[7] = this.values[7] * y;\r\n        this.values[8] = this.values[8] * z;\r\n        this.values[9] = this.values[9] * z;\r\n        this.values[10] = this.values[10] * z;\r\n        this.values[11] = this.values[11] * z;\r\n    }\r\n    /**\r\n     * Rotates the matrix by the given angle around the axis (x, y, z)\r\n     */\r\n    rotate(radians, x, y, z) {\r\n        let len = Math.hypot(x, y, z);\r\n        if (len < EPSILON) {\r\n            return;\r\n        }\r\n        len = 1 / len;\r\n        x *= len;\r\n        y *= len;\r\n        z *= len;\r\n        let s = Math.sin(radians);\r\n        let c = Math.cos(radians);\r\n        let t = 1 - c;\r\n        let a00, a01, a02, a03;\r\n        let a10, a11, a12, a13;\r\n        let a20, a21, a22, a23;\r\n        let b00, b01, b02;\r\n        let b10, b11, b12;\r\n        let b20, b21, b22;\r\n        a00 = this.values[0];\r\n        a01 = this.values[1];\r\n        a02 = this.values[2];\r\n        a03 = this.values[3];\r\n        a10 = this.values[4];\r\n        a11 = this.values[5];\r\n        a12 = this.values[6];\r\n        a13 = this.values[7];\r\n        a20 = this.values[8];\r\n        a21 = this.values[9];\r\n        a22 = this.values[10];\r\n        a23 = this.values[11];\r\n        // Construct the elements of the rotation matrix\r\n        b00 = x * x * t + c;\r\n        b01 = y * x * t + z * s;\r\n        b02 = z * x * t - y * s;\r\n        b10 = x * y * t - z * s;\r\n        b11 = y * y * t + c;\r\n        b12 = z * y * t + x * s;\r\n        b20 = x * z * t + y * s;\r\n        b21 = y * z * t - x * s;\r\n        b22 = z * z * t + c;\r\n        // Perform rotation-specific matrix multiplication\r\n        this.values[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n        this.values[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n        this.values[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n        this.values[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n        this.values[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n        this.values[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n        this.values[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n        this.values[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n        this.values[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n        this.values[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n        this.values[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n        this.values[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n    }\r\n    multiply(b) {\r\n        Matrix4.multiply(this, this, b);\r\n    }\r\n}\r\n","import { generateUid } from \"./uid\";\r\nimport { Vector3 } from \"../math/vector\";\r\nimport { Matrix4 } from \"../math/matrix\";\r\nexport class Object3D {\r\n    constructor() {\r\n        this.uid = generateUid();\r\n        this.matrix = new Matrix4();\r\n        this.centroid = Vector3.fromValues(0, 0, 0);\r\n    }\r\n    translate(x, y, z) {\r\n        this.matrix.translate(x, y, z);\r\n    }\r\n    rotate(rad, x, y, z) {\r\n        this.matrix.rotate(rad, x, y, z);\r\n    }\r\n    scale(x, y, z) {\r\n        this.matrix.scale(x, y, z);\r\n    }\r\n    setColor(color) {\r\n        this.color = color;\r\n    }\r\n}\r\n","import { Object3D } from \"./object3d\";\r\nexport class Group extends Object3D {\r\n    constructor(objects = []) {\r\n        super();\r\n        this.setObjects(objects);\r\n    }\r\n    setObjects(objects) {\r\n        this.objects = objects;\r\n    }\r\n    addObject(object) {\r\n        this.objects.push(object);\r\n    }\r\n    setCentroid(vector) {\r\n        this.centroid = vector;\r\n    }\r\n}\r\n","import { degreesToRadians } from \"./utils\";\r\nexport const SQRT_3 = Math.sqrt(3);\r\nexport const ATAN_15_DEG = Math.atan(degreesToRadians(15));\r\nexport const DEG_30_RADIANS = degreesToRadians(30);\r\nexport const DEG_36_RADIANS = degreesToRadians(36);\r\nexport const DEG_60_RADIANS = degreesToRadians(60);\r\nexport const DEG_72_RADIANS = degreesToRadians(72);\r\n","import { DEFAULT_SQ1_SCHEME, SOLVED_BOTTOM_PIECES, SOLVED_TOP_PIECES, } from \"./constants\";\r\nimport { Group } from \"./../../geometry/group\";\r\nimport { ATAN_15_DEG, DEG_30_RADIANS, DEG_60_RADIANS, } from \"./../../math/constants\";\r\nimport { PIECE_TYPE } from \"./enum\";\r\nexport class Square1Builder {\r\n    constructor(topLayer = SOLVED_TOP_PIECES, bottomLayer = SOLVED_BOTTOM_PIECES, middleRotated = false, scheme = DEFAULT_SQ1_SCHEME, sideLength = 0.7) {\r\n        this.scheme = scheme;\r\n        this.sideLength = sideLength;\r\n        this.halfSide = this.sideLength / 2;\r\n        this.halfEdgePiece = this.halfSide * ATAN_15_DEG;\r\n        this.layerWidth = this.halfSide - this.halfEdgePiece;\r\n        this.middleWidth = this.sideLength - 2 * this.layerWidth;\r\n        this.halfMiddleWidth = this.middleWidth / 2;\r\n        this.borderLayerWidth = this.sideLength * 0.2;\r\n        this.outerHalfSide = (sideLength + this.borderLayerWidth) / 2;\r\n        this.outerHalfEdgePiece = this.outerHalfSide * ATAN_15_DEG;\r\n        this.pieces = this.buildSquare1(topLayer, bottomLayer, middleRotated);\r\n        this.group = new Group(this.pieces);\r\n    }\r\n    makeLayer(pieces) {\r\n        let geometry = [];\r\n        let angle = Math.PI;\r\n        pieces.forEach((piece, index) => {\r\n            switch (piece.type) {\r\n                case PIECE_TYPE.CORNER:\r\n                    const corner = this.square1Corner(piece.colors[0], piece.colors[1], piece.colors[2]);\r\n                    corner.rotate(angle, 0, 0, 1);\r\n                    geometry.push(corner);\r\n                    angle -= DEG_60_RADIANS;\r\n                    break;\r\n                case PIECE_TYPE.EDGE:\r\n                    const edge = this.square1Edge(piece.colors[0], piece.colors[1]);\r\n                    edge.rotate(angle - DEG_60_RADIANS, 0, 0, 1);\r\n                    geometry.push(edge);\r\n                    angle -= DEG_30_RADIANS;\r\n                    break;\r\n            }\r\n        });\r\n        return geometry;\r\n    }\r\n    /**\r\n     * Not implemented. Just here for {@link Visualizer}'s sake\r\n     */\r\n    setColors(colors) { }\r\n}\r\n","import { calculateCentroid } from \"../math/utils\";\r\nimport { generateUid } from \"./uid\";\r\n/**\r\n * Face that will render as a puzzle sticker\r\n */\r\nexport class Face {\r\n    /**\r\n     * @param indices indices of vertices that make up a face\r\n     * @param vertices vertices of the geometry to calculate centroid from\r\n     * @param color color of the sticker\r\n     */\r\n    constructor(indices, vertices, color) {\r\n        this.indices = indices;\r\n        this.color = color;\r\n        this.uid = generateUid();\r\n        if (vertices) {\r\n            this.calculateCentroid(vertices);\r\n        }\r\n    }\r\n    /**\r\n     * recalculate the centroid of the face.\r\n     */\r\n    calculateCentroid(vertices) {\r\n        this.centroid = calculateCentroid(\r\n        // Calculate centroid from vertices included in the face\r\n        vertices.filter((v, i) => this.indices.includes(i)));\r\n    }\r\n}\r\n","import { Object3D } from \"./object3d\";\r\nimport { calculateCentroid } from \"../math/utils\";\r\nexport class Geometry extends Object3D {\r\n    constructor(vertices, faces) {\r\n        super();\r\n        this.vertices = vertices;\r\n        this.faces = faces;\r\n        this.centroid = calculateCentroid(this.vertices);\r\n    }\r\n}\r\n","import { Square1Builder } from \"./interface\";\r\nimport { DEG_30_RADIANS } from \"./../../math/constants\";\r\nimport { Face } from \"./../../geometry/face\";\r\nimport { Geometry } from \"./../../geometry/geometry\";\r\nimport { Group } from \"./../../geometry/group\";\r\nimport { DEFAULT_SQ1_SCHEME, SOLVED_TOP_PIECES, SOLVED_BOTTOM_PIECES, } from \"./constants\";\r\nimport { Vector3 } from \"../../math/vector\";\r\nexport class Square1Net extends Square1Builder {\r\n    constructor(topLayer = SOLVED_TOP_PIECES, bottomLayer = SOLVED_BOTTOM_PIECES, middleRotated = false, scheme = DEFAULT_SQ1_SCHEME, sideLength = 0.7) {\r\n        super(topLayer, bottomLayer, middleRotated, scheme, sideLength);\r\n    }\r\n    square1Corner(top, side1, side2) {\r\n        const points = [\r\n            // Top\r\n            Vector3.fromValues(0, 0, 0),\r\n            Vector3.fromValues(this.halfSide, this.halfEdgePiece, 0),\r\n            Vector3.fromValues(this.halfSide, this.halfSide, 0),\r\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, 0),\r\n            // Sides\r\n            Vector3.fromValues(this.outerHalfSide, this.outerHalfEdgePiece, 0),\r\n            Vector3.fromValues(this.outerHalfSide, this.outerHalfSide, 0),\r\n            Vector3.fromValues(this.outerHalfEdgePiece, this.outerHalfSide, 0),\r\n        ];\r\n        const faces = [\r\n            new Face([0, 1, 2, 3], points, top),\r\n            new Face([2, 3, 6, 5], points, side1),\r\n            new Face([1, 2, 5, 4], points, side2),\r\n        ];\r\n        return new Geometry(points, faces);\r\n    }\r\n    square1Edge(top, side) {\r\n        const points = [\r\n            // Top\r\n            Vector3.fromValues(0, 0, 0).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\r\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, 0).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\r\n            Vector3.fromValues(-this.halfEdgePiece, this.halfSide, 0).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\r\n            // Side\r\n            Vector3.fromValues(this.outerHalfEdgePiece, this.outerHalfSide, 0).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\r\n            Vector3.fromValues(-this.outerHalfEdgePiece, this.outerHalfSide, 0).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\r\n        ];\r\n        const faces = [\r\n            new Face([0, 1, 2], points, top),\r\n            new Face([1, 2, 4, 3], points, side),\r\n        ];\r\n        return new Geometry(points, faces);\r\n    }\r\n    square1Middle(front, right, back, rotated) {\r\n        const layerHeight = this.halfSide - this.halfEdgePiece;\r\n        const middleHeight = this.sideLength - 2 * layerHeight;\r\n        const halfMiddleHeight = middleHeight / 2;\r\n        const cornerLength = this.outerHalfSide - this.outerHalfEdgePiece;\r\n        const vertices = [\r\n            Vector3.fromValues(-this.outerHalfSide, halfMiddleHeight, -0.01),\r\n            Vector3.fromValues(-this.outerHalfEdgePiece, halfMiddleHeight, -0.01),\r\n            Vector3.fromValues(this.outerHalfSide, halfMiddleHeight, -0.01),\r\n            Vector3.fromValues(-this.outerHalfSide, -halfMiddleHeight, -0.01),\r\n            Vector3.fromValues(-this.outerHalfEdgePiece, -halfMiddleHeight, -0.01),\r\n            Vector3.fromValues(this.outerHalfSide, -halfMiddleHeight, -0.01),\r\n            // Points for when middle is rotated\r\n            Vector3.fromValues(2 * this.outerHalfEdgePiece, halfMiddleHeight, -0.01),\r\n            Vector3.fromValues(2 * this.outerHalfEdgePiece, -halfMiddleHeight, -0.01),\r\n            Vector3.fromValues(2 * cornerLength, halfMiddleHeight, -0.01),\r\n            Vector3.fromValues(2 * cornerLength, -halfMiddleHeight, -0.01),\r\n        ];\r\n        // Left\r\n        const faces = [new Face([0, 1, 4, 3], vertices, front)];\r\n        // Right\r\n        if (!rotated) {\r\n            faces.push(new Face([1, 2, 5, 4], vertices, front));\r\n        }\r\n        else {\r\n            faces.push(new Face([1, 6, 7, 4], vertices, back));\r\n            faces.push(new Face([6, 8, 9, 7], vertices, right));\r\n        }\r\n        return new Geometry(vertices, faces);\r\n    }\r\n    buildSquare1(top, bottom, middleRotated) {\r\n        const layerHeight = this.halfSide - this.halfEdgePiece;\r\n        const middleHeight = this.sideLength - 2 * layerHeight;\r\n        const halfMiddleHeight = middleHeight / 2;\r\n        let pieces = [];\r\n        const topLayer = new Group(this.makeLayer(top));\r\n        const bottomLayer = new Group(this.makeLayer(bottom));\r\n        topLayer.translate(0, this.outerHalfSide + halfMiddleHeight, 0);\r\n        bottomLayer.translate(0, -(this.outerHalfSide + halfMiddleHeight), 0);\r\n        bottomLayer.rotate(DEG_30_RADIANS, 0, 0, 1);\r\n        pieces = [topLayer, bottomLayer];\r\n        const frontColor = this.scheme.front || DEFAULT_SQ1_SCHEME.front;\r\n        const leftColor = this.scheme.left || DEFAULT_SQ1_SCHEME.left;\r\n        const backColor = this.scheme.back || DEFAULT_SQ1_SCHEME.back;\r\n        const m = this.square1Middle(frontColor, leftColor, backColor, middleRotated);\r\n        this.faces = {\r\n            top: topLayer,\r\n            bottom: bottomLayer,\r\n        };\r\n        pieces.push(m);\r\n        return pieces;\r\n    }\r\n}\r\n","import { ROTATION_VECTOR, SOLVED_TOP_PIECES, SOLVED_BOTTOM_PIECES, DEFAULT_SQ1_SCHEME, } from \"./constants\";\r\nimport { Square1Builder } from \"./interface\";\r\nimport { DEG_30_RADIANS } from \"./../../math/constants\";\r\nimport { Geometry } from \"./../../geometry/geometry\";\r\nimport { Face } from \"./../../geometry/face\";\r\nimport { Group } from \"../../geometry/group\";\r\nimport { Vector3 } from \"../../math/vector\";\r\nconst INNER_FACE_COLOR = { value: \"#333\", stroke: \"#333\" };\r\nexport class Square1 extends Square1Builder {\r\n    constructor(topLayer = SOLVED_TOP_PIECES, bottomLayer = SOLVED_BOTTOM_PIECES, middleRotated = false, scheme = DEFAULT_SQ1_SCHEME, sideLength = 1.25) {\r\n        super(topLayer, bottomLayer, middleRotated, scheme, sideLength);\r\n    }\r\n    square1Corner(top, side1, side2) {\r\n        const points = [\r\n            // Top\r\n            Vector3.fromValues(0, 0, this.halfSide),\r\n            Vector3.fromValues(this.halfSide, this.halfEdgePiece, this.halfSide),\r\n            Vector3.fromValues(this.halfSide, this.halfSide, this.halfSide),\r\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, this.halfSide),\r\n            // Bottom\r\n            Vector3.fromValues(0, 0, this.halfSide - this.layerWidth),\r\n            Vector3.fromValues(this.halfSide, this.halfEdgePiece, this.halfSide - this.layerWidth),\r\n            Vector3.fromValues(this.halfSide, this.halfSide, this.halfSide - this.layerWidth),\r\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, this.halfSide - this.layerWidth),\r\n        ];\r\n        const faces = [\r\n            new Face([0, 1, 2, 3], points, top),\r\n            // TODO: the faces commented out here are the underside of the pieces so\r\n            // they show gray when the cube is scrambled. But they are overlapping sometimes\r\n            // with outward sticker faces. removing them for now, but it'd be nice to\r\n            // fix this.\r\n            new Face([4, 5, 6, 7], points, INNER_FACE_COLOR),\r\n            new Face([0, 1, 5, 4], points, INNER_FACE_COLOR),\r\n            new Face([2, 3, 7, 6], points, side1),\r\n            new Face([1, 2, 6, 5], points, side2),\r\n            new Face([0, 3, 7, 4], points, INNER_FACE_COLOR),\r\n        ];\r\n        const innerCentroid = Vector3.fromValues(this.halfSide / 2, this.halfSide / 2, this.halfSide / 2);\r\n        faces[1].centroid = innerCentroid;\r\n        faces[2].centroid = innerCentroid;\r\n        faces[5].centroid = innerCentroid;\r\n        return new Geometry(points, faces);\r\n    }\r\n    square1Edge(top, side) {\r\n        const points = [\r\n            // Top\r\n            Vector3.fromValues(0, 0, this.halfSide).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\r\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, this.halfSide).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\r\n            Vector3.fromValues(-this.halfEdgePiece, this.halfSide, this.halfSide).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\r\n            // Bottom\r\n            Vector3.fromValues(0, 0, this.halfSide - this.layerWidth).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\r\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, this.halfSide - this.layerWidth).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\r\n            Vector3.fromValues(-this.halfEdgePiece, this.halfSide, this.halfSide - this.layerWidth).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\r\n        ];\r\n        const faces = [\r\n            new Face([0, 1, 2], points, top),\r\n            new Face([3, 4, 5], points, INNER_FACE_COLOR),\r\n            new Face([1, 2, 5, 4], points, side),\r\n            new Face([0, 1, 4, 3], points, INNER_FACE_COLOR),\r\n            new Face([0, 2, 5, 3], points, INNER_FACE_COLOR),\r\n        ];\r\n        const innerFaceCentroid = Vector3.fromValues(0, this.halfSide / 2, this.halfSide / 2).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS);\r\n        // Override centroid to avoid drawing over outside stickers\r\n        faces[1].centroid = innerFaceCentroid;\r\n        faces[3].centroid = innerFaceCentroid;\r\n        faces[4].centroid = innerFaceCentroid;\r\n        return new Geometry(points, faces);\r\n    }\r\n    square1Middle(front, side, back) {\r\n        const vertices = [\r\n            Vector3.fromValues(-this.halfSide, -this.halfSide, this.halfMiddleWidth),\r\n            Vector3.fromValues(-this.halfSide, this.halfSide, this.halfMiddleWidth),\r\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, this.halfMiddleWidth),\r\n            Vector3.fromValues(-this.halfEdgePiece, -this.halfSide, this.halfMiddleWidth),\r\n            Vector3.fromValues(-this.halfSide, -this.halfSide, -this.halfMiddleWidth),\r\n            Vector3.fromValues(-this.halfSide, this.halfSide, -this.halfMiddleWidth),\r\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, -this.halfMiddleWidth),\r\n            Vector3.fromValues(-this.halfEdgePiece, -this.halfSide, -this.halfMiddleWidth),\r\n        ];\r\n        const faces = [\r\n            new Face([0, 1, 2, 3], vertices, { value: \"#333\" }),\r\n            new Face([4, 5, 6, 7], vertices, { value: \"#333\" }),\r\n            new Face([0, 1, 5, 4], vertices, side),\r\n            new Face([1, 2, 6, 5], vertices, back),\r\n            // new Face([2, 3, 7, 6], vertices, { value: \"#333\" }),\r\n            new Face([0, 3, 7, 4], vertices, front),\r\n        ];\r\n        const innerFaceCentroid = Vector3.fromValues(-this.halfSide / 2, 0, 0);\r\n        // Override centroid to avoid drawing over outside stickers\r\n        faces[0].centroid = innerFaceCentroid;\r\n        faces[1].centroid = innerFaceCentroid;\r\n        faces[2].centroid = Vector3.fromValues(-(this.halfSide + this.halfSide * 0.45), 0, 0);\r\n        return new Geometry(vertices, faces);\r\n    }\r\n    buildSquare1(top, bottom, middleRotated) {\r\n        const topLayer = new Group(this.makeLayer(top));\r\n        const bottomLayer = new Group(this.makeLayer(bottom));\r\n        bottomLayer.rotate(Math.PI, 1, 0, 0);\r\n        bottomLayer.rotate(DEG_30_RADIANS, 0, 0, 1);\r\n        const pieces = [topLayer, bottomLayer];\r\n        const frontColor = this.scheme.front || DEFAULT_SQ1_SCHEME.front;\r\n        const leftColor = this.scheme.left || DEFAULT_SQ1_SCHEME.left;\r\n        const backColor = this.scheme.back || DEFAULT_SQ1_SCHEME.back;\r\n        const rightColor = this.scheme.right || DEFAULT_SQ1_SCHEME.right;\r\n        const m1 = this.square1Middle(frontColor, leftColor, backColor);\r\n        const m2 = this.square1Middle(backColor, rightColor, frontColor);\r\n        m2.rotate(Math.PI, 0, 0, 1);\r\n        if (middleRotated) {\r\n            m2.rotate(Math.PI, ROTATION_VECTOR.x, ROTATION_VECTOR.y, ROTATION_VECTOR.z);\r\n        }\r\n        pieces.push(m1);\r\n        pieces.push(m2);\r\n        this.faces = {\r\n            top: topLayer,\r\n            bottom: bottomLayer,\r\n        };\r\n        return pieces;\r\n    }\r\n}\r\n","import { Geometry } from \"./geometry\";\r\nimport { Face } from \"./face\";\r\nimport { Vector3 } from \"../math/vector\";\r\nexport class Plane extends Geometry {\r\n    constructor(width, height, color) {\r\n        let vertices = [\r\n            Vector3.fromValues(0, 0, 0),\r\n            Vector3.fromValues(width, 0, 0),\r\n            Vector3.fromValues(width, -height, 0),\r\n            Vector3.fromValues(0, -height, 0),\r\n        ];\r\n        let faces = [new Face([0, 1, 2, 3], vertices, color)];\r\n        super(vertices, faces);\r\n    }\r\n}\r\n","import { Geometry } from \"./geometry\";\r\nimport { Face } from \"./face\";\r\nimport { SQRT_3 } from \"../math/constants\";\r\nimport { Vector3 } from \"../math/vector\";\r\nexport class Triangle extends Geometry {\r\n    constructor(a, b, c, color) {\r\n        let verticies = [a, b, c];\r\n        let faces = [new Face([0, 1, 2], verticies, color)];\r\n        super(verticies, faces);\r\n    }\r\n}\r\nexport class EquilateralTriangle extends Triangle {\r\n    constructor(base, color) {\r\n        let height = base * (SQRT_3 / 2);\r\n        super(Vector3.fromValues(0, 0, 0), Vector3.fromValues(base / 2, height, 0), Vector3.fromValues(base, 0, 0), color);\r\n    }\r\n}\r\n","import { RED, YELLOW, BLUE, ORANGE, GREEN, WHITE, BLACK } from \"./colors\";\r\nimport { Group } from \"../geometry/group\";\r\nimport { Plane } from \"../geometry/plane\";\r\nimport { Triangle } from \"../geometry/triangle\";\r\nimport { Vector3 } from \"../math/vector\";\r\nexport class SkewbNet {\r\n    constructor() {\r\n        const cubeWidth = 1;\r\n        const centerWidth = Math.sqrt(Math.pow(cubeWidth / 2, 2) * 2);\r\n        const orange = new Group(this.makeStickers(ORANGE, centerWidth, Vector3.fromValues(-cubeWidth, 0, 0)));\r\n        const green = new Group(this.makeStickers(GREEN, centerWidth, Vector3.fromValues(2 * cubeWidth, 0, 0)));\r\n        const white = new Group(this.makeStickers(WHITE, centerWidth, Vector3.fromValues(0, -cubeWidth, 0)));\r\n        const red = new Group(this.makeStickers(RED, centerWidth, Vector3.fromValues(cubeWidth, 0, 0)));\r\n        const yellow = new Group(this.makeStickers(YELLOW, centerWidth, Vector3.fromValues(0, cubeWidth, 0)));\r\n        const blue = new Group(this.makeStickers(BLUE, centerWidth, Vector3.fromValues(0, 0, 0)));\r\n        this.U = yellow;\r\n        this.R = red;\r\n        this.F = blue;\r\n        this.L = orange;\r\n        this.B = green;\r\n        this.D = white;\r\n        this.faces = {\r\n            top: this.U,\r\n            front: this.F,\r\n            right: this.R,\r\n            back: this.B,\r\n            left: this.L,\r\n            bottom: this.D,\r\n        };\r\n        this.stickers = [red, yellow, blue, orange, green, white];\r\n        this.group = new Group(this.stickers);\r\n        this.group.translate(-cubeWidth / 4, 0, 0);\r\n        this.group.scale(0.5, 0.5, 0.5);\r\n    }\r\n    makeStickers(color, width, translate) {\r\n        const center = new Plane(width, width, color);\r\n        center.translate(translate.x, translate.y, translate.z);\r\n        center.rotate(Math.PI / 4, 0, 0, 1);\r\n        center.translate(-width / 2, width / 2, 0);\r\n        const triangles = [];\r\n        for (let i = 0; i < 4; i++) {\r\n            const triangle = new Triangle(Vector3.fromValues(-width / 2, width / 2, 0), Vector3.fromValues(0, width, 0), Vector3.fromValues(width / 2, width / 2, 0), color);\r\n            triangle.translate(translate.x, translate.y, translate.z);\r\n            triangle.rotate((-Math.PI / 2) * i, 0, 0, 1);\r\n            triangle.rotate(Math.PI / 4, 0, 0, 1);\r\n            triangles.push(triangle);\r\n        }\r\n        return [center, ...triangles];\r\n    }\r\n    setColors(colors) {\r\n        let { top, right, front, bottom, left, back } = colors;\r\n        this.setFaceColors(this.U, top);\r\n        this.setFaceColors(this.R, right);\r\n        this.setFaceColors(this.F, front);\r\n        this.setFaceColors(this.D, bottom);\r\n        this.setFaceColors(this.L, left);\r\n        this.setFaceColors(this.B, back);\r\n    }\r\n    setFaceColors(faceStickers, colors = []) {\r\n        faceStickers.objects[0].faces[0].color = colors[0] || BLACK;\r\n        faceStickers.objects[1].faces[0].color = colors[1] || BLACK;\r\n        faceStickers.objects[2].faces[0].color = colors[2] || BLACK;\r\n        faceStickers.objects[3].faces[0].color = colors[4] || BLACK; // Setting 3 -> 4 and 4 -> 3 now because 4 and 3 are stored incorrectly in this class.\r\n        faceStickers.objects[4].faces[0].color = colors[3] || BLACK;\r\n    }\r\n}\r\n","import { RED, YELLOW, BLUE, ORANGE, GREEN, WHITE, BLACK } from \"./colors\";\r\nimport { Group } from \"../geometry/group\";\r\nimport { Plane } from \"../geometry/plane\";\r\nimport { Triangle } from \"../geometry/triangle\";\r\nimport { Vector3 } from \"../math/vector\";\r\nexport class Skewb {\r\n    constructor() {\r\n        const cubeWidth = 1.25;\r\n        const centerWidth = Math.sqrt(Math.pow(cubeWidth / 2, 2) * 2);\r\n        const halfWidth = cubeWidth / 2;\r\n        const red = new Group(this.makeStickers(RED, centerWidth));\r\n        const yellow = new Group(this.makeStickers(YELLOW, centerWidth, Vector3.fromValues(1, 0, 0)));\r\n        const blue = new Group(this.makeStickers(BLUE, centerWidth, Vector3.fromValues(0, 1, 0)));\r\n        const orange = new Group(this.makeStickers(ORANGE, centerWidth));\r\n        const green = new Group(this.makeStickers(GREEN, centerWidth, Vector3.fromValues(0, 1, 0)));\r\n        const white = new Group(this.makeStickers(WHITE, centerWidth, Vector3.fromValues(1, 0, 0)));\r\n        this.U = yellow;\r\n        this.R = red;\r\n        this.F = blue;\r\n        this.L = orange;\r\n        this.B = green;\r\n        this.D = white;\r\n        this.faces = {\r\n            top: this.U,\r\n            front: this.F,\r\n            right: this.R,\r\n            back: this.B,\r\n            left: this.L,\r\n            bottom: this.D,\r\n        };\r\n        red.translate(0, 0, halfWidth);\r\n        red.rotate(Math.PI, 1, 0, 0);\r\n        red.rotate(Math.PI / 2, 0, 0, 1);\r\n        orange.rotate(-Math.PI / 2, 0, 0, 1);\r\n        orange.translate(0, 0, -halfWidth);\r\n        blue.rotate(-Math.PI / 2, 1, 0, 0);\r\n        blue.translate(-halfWidth, 0, 0);\r\n        green.translate(halfWidth, 0, 0);\r\n        green.rotate(Math.PI, 0, 1, 0);\r\n        green.rotate(-Math.PI / 2, 1, 0, 0);\r\n        yellow.rotate(Math.PI, 0, 1, 0);\r\n        yellow.translate(0, halfWidth, 0);\r\n        white.translate(0, -halfWidth, 0);\r\n        white.rotate(Math.PI, 1, 0, 0);\r\n        this.stickers = [red, yellow, blue, orange, green, white];\r\n        this.group = new Group(this.stickers);\r\n    }\r\n    makeStickers(color, width, axis) {\r\n        const center = new Plane(width, width, color);\r\n        if (axis) {\r\n            center.rotate(Math.PI / 2, axis.x, axis.y, axis.z);\r\n        }\r\n        center.rotate(Math.PI / 4, 0, 0, 1);\r\n        center.translate(-width / 2, width / 2, 0);\r\n        const triangles = [];\r\n        for (let i = 0; i < 4; i++) {\r\n            const triangle = new Triangle(Vector3.fromValues(-width / 2, width / 2, 0), Vector3.fromValues(0, width, 0), Vector3.fromValues(width / 2, width / 2, 0), color);\r\n            if (axis) {\r\n                triangle.rotate(Math.PI / 2, axis.x, axis.y, axis.z);\r\n            }\r\n            triangle.rotate((Math.PI / 2) * i, 0, 0, 1);\r\n            triangle.rotate(Math.PI / 4, 0, 0, 1);\r\n            triangles.push(triangle);\r\n        }\r\n        return [center, ...triangles];\r\n    }\r\n    setColors(colors) {\r\n        let { top, right, front, bottom, left, back } = colors;\r\n        this.setFaceColors(this.U, top);\r\n        this.setFaceColors(this.R, right);\r\n        this.setFaceColors(this.F, front);\r\n        this.setFaceColors(this.D, bottom);\r\n        this.setFaceColors(this.L, left);\r\n        this.setFaceColors(this.B, back);\r\n    }\r\n    setFaceColors(faceStickers, colors = []) {\r\n        faceStickers.objects[0].faces[0].color = colors[0] || BLACK;\r\n        faceStickers.objects[1].faces[0].color = colors[1] || BLACK;\r\n        faceStickers.objects[2].faces[0].color = colors[2] || BLACK;\r\n        faceStickers.objects[3].faces[0].color = colors[4] || BLACK; // Setting 3 -> 4 and 4 -> 3 now because 4 and 3 are stored incorrectly in this class.\r\n        faceStickers.objects[4].faces[0].color = colors[3] || BLACK;\r\n    }\r\n}\r\n","import { Face } from \"./face\";\r\nimport { Geometry } from \"./geometry\";\r\nimport { SQRT_3 } from \"../math/constants\";\r\nimport { Vector3 } from \"../math/vector\";\r\n/**\r\n * Geometry to build a triangle lattice for the\r\n * pyraminx puzzle\r\n */\r\nexport class TriangleLattice extends Geometry {\r\n    constructor(base, size, color) {\r\n        const halfBase = base / 2;\r\n        const fullHeight = base * (SQRT_3 / 2);\r\n        const triangleBase = base / size;\r\n        const triangleHeight = fullHeight / size;\r\n        const inradius = fullHeight / 3;\r\n        let vertices = [];\r\n        let faces = [];\r\n        /**\r\n         * Builds one layer of verticies at a time\r\n         * for each layer after the first it constructs\r\n         * faces for the triangles (0,1,4), (1,2,5) etc...\r\n         *\r\n         *       9\r\n         *     7   8\r\n         *   4   5   6\r\n         * 0   1   2   3\r\n         */\r\n        let index = 0;\r\n        for (let layer = 0; layer <= size; layer++) {\r\n            for (let vertex = 0, count = size - layer; vertex <= count; vertex++) {\r\n                const horizontalOffset = -halfBase;\r\n                const verticalOffset = -inradius;\r\n                const x = triangleBase * vertex + (layer * triangleBase) / 2 + horizontalOffset;\r\n                const y = triangleHeight * layer + verticalOffset;\r\n                vertices.push(Vector3.fromValues(x, y, 0));\r\n                if (layer > 0) {\r\n                    // down triangle\r\n                    if (vertex > 0) {\r\n                        faces.push(new Face([index, index - 1, index - count - 2], null, color));\r\n                    }\r\n                    // up triangle\r\n                    faces.push(new Face([index, index - count - 2, index - count - 1], null, color));\r\n                }\r\n                index++;\r\n            }\r\n        }\r\n        faces.forEach((face) => face.calculateCentroid(vertices));\r\n        super(vertices, faces);\r\n    }\r\n}\r\n","import { GREEN, RED, BLUE, YELLOW, BLACK } from \"./colors\";\r\nimport { TriangleLattice } from \"./../geometry/triangleLattice\";\r\nimport { Group } from \"./../geometry/group\";\r\nimport { SQRT_3 } from \"../math/constants\";\r\nconst DEG_60_RADIANS = (60 * Math.PI) / 180;\r\nexport class PyraminxNet {\r\n    constructor(size, sideLength = 0.925) {\r\n        this.size = size;\r\n        const fullHeight = sideLength * (SQRT_3 / 2);\r\n        const inDiameter = fullHeight / 1.5;\r\n        const faceSpacing = inDiameter * 0.1;\r\n        const U = new TriangleLattice(sideLength, size, YELLOW);\r\n        const R = new TriangleLattice(sideLength, size, GREEN);\r\n        const L = new TriangleLattice(sideLength, size, BLUE);\r\n        const B = new TriangleLattice(sideLength, size, RED);\r\n        this.L = L;\r\n        this.R = R;\r\n        this.U = U;\r\n        this.B = B;\r\n        R.rotate(-DEG_60_RADIANS, 0, 0, 1);\r\n        R.translate(0, inDiameter + faceSpacing, 0);\r\n        R.rotate(2 * DEG_60_RADIANS, 0, 0, 1);\r\n        U.rotate(DEG_60_RADIANS, 0, 0, 1);\r\n        U.translate(0, inDiameter + faceSpacing, 0);\r\n        U.rotate(-2 * DEG_60_RADIANS, 0, 0, 1);\r\n        B.rotate(3 * DEG_60_RADIANS, 0, 0, 1);\r\n        B.translate(0, inDiameter + faceSpacing, 0);\r\n        B.rotate(-2 * DEG_60_RADIANS, 0, 0, 1);\r\n        this.faces = {\r\n            top: this.U,\r\n            right: this.R,\r\n            left: this.L,\r\n            back: this.B,\r\n        };\r\n        this.group = new Group([U, R, L, B]);\r\n    }\r\n    setColors(colors) {\r\n        let { left, right, top, back } = colors;\r\n        this.setFaceColors(this.L, left);\r\n        this.setFaceColors(this.R, right);\r\n        this.setFaceColors(this.U, top);\r\n        this.setFaceColors(this.B, back);\r\n    }\r\n    setFaceColors(lattice, colors) {\r\n        lattice.faces.forEach((f, i) => {\r\n            if (colors && colors[i]) {\r\n                f.color = colors[i];\r\n            }\r\n            else {\r\n                f.color = BLACK;\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { GREEN, RED, BLUE, YELLOW, BLACK } from \"./colors\";\r\nimport { TriangleLattice } from \"./../geometry/triangleLattice\";\r\nimport { Group } from \"./../geometry/group\";\r\nconst ARC_COS_THIRD = Math.acos(1 / 3);\r\nconst DEG_120_RADIANS = (120 * Math.PI) / 180;\r\nconst SQRT_24 = Math.sqrt(24);\r\nexport class Pyraminx {\r\n    constructor(size, sideLength = 1.75) {\r\n        this.size = size;\r\n        const insphereRadius = sideLength / SQRT_24;\r\n        const U = new TriangleLattice(sideLength, size, YELLOW);\r\n        const R = new TriangleLattice(sideLength, size, GREEN);\r\n        const L = new TriangleLattice(sideLength, size, BLUE);\r\n        const B = new TriangleLattice(sideLength, size, RED);\r\n        this.L = L;\r\n        this.R = R;\r\n        this.U = U;\r\n        this.B = B;\r\n        U.rotate(DEG_120_RADIANS, 0, 0, 1);\r\n        U.rotate(ARC_COS_THIRD, 1, 0, 0);\r\n        U.translate(0, 0, insphereRadius);\r\n        R.rotate(ARC_COS_THIRD, 1, 0, 0);\r\n        R.translate(0, 0, insphereRadius);\r\n        L.rotate(-DEG_120_RADIANS, 0, 0, 1);\r\n        L.rotate(ARC_COS_THIRD, 1, 0, 0);\r\n        L.translate(0, 0, insphereRadius);\r\n        B.rotate(Math.PI, 0, 1, 0);\r\n        B.translate(0, 0, insphereRadius);\r\n        this.faces = {\r\n            top: this.U,\r\n            right: this.R,\r\n            left: this.L,\r\n            back: this.B,\r\n        };\r\n        this.group = new Group([U, L, R, B]);\r\n    }\r\n    setColors(colors) {\r\n        let { left, right, top, back } = colors;\r\n        this.setFaceColors(this.L, left);\r\n        this.setFaceColors(this.R, right);\r\n        this.setFaceColors(this.U, top);\r\n        this.setFaceColors(this.B, back);\r\n    }\r\n    setFaceColors(lattice, colors) {\r\n        lattice.faces.forEach((f, i) => {\r\n            if (colors && colors[i]) {\r\n                f.color = colors[i];\r\n            }\r\n            else {\r\n                f.color = BLACK;\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { Face } from \"./../geometry/face\";\r\nimport { Geometry } from \"../geometry/geometry\";\r\nimport { polarToCartesian, lineSegmentLength, pentagonOutRadius, } from \"../math/utils\";\r\nimport { Vector2, Vector3 } from \"../math/vector\";\r\nexport class DividedPentagon extends Geometry {\r\n    /**\r\n     *\r\n     * @param color\r\n     * @param layers number of layers\r\n     * @param length length of entire edge of the outer pentagon\r\n     */\r\n    constructor(color, layers = 2, length = 1.6, layerWidth = 0.4 // TODO: calculate this somehow\r\n    ) {\r\n        const outRadius = pentagonOutRadius(length);\r\n        const radiusDiff = layerWidthToRadiusDiff(layerWidth);\r\n        const centerOutRadius = outRadius - radiusDiff * (layers - 1);\r\n        const vertices = faceVerticies(layers, centerOutRadius, radiusDiff, layerWidth);\r\n        super(vertices, makeFaces(layers, color, vertices));\r\n    }\r\n}\r\n/**\r\n * Given the the distance between two parallel sides of the\r\n * dividen pentagon, calculate the difference in pentagon radius\r\n */\r\nfunction layerWidthToRadiusDiff(width) {\r\n    const aSquared = width * width;\r\n    const angleRadians = (71 * Math.PI) / 180;\r\n    // Law of cosines\r\n    const cSquared = 2 * aSquared - 2 * aSquared * Math.cos(angleRadians);\r\n    const diff = 2 * Math.sqrt(Math.abs(aSquared - cSquared));\r\n    return diff;\r\n}\r\n/**\r\n * creates mapping for indicies in one layer to another\r\n * so we can build the geometry for a megaminx face\r\n */\r\nfunction downMapping(layer) {\r\n    if (layer < 1) {\r\n        return [];\r\n    }\r\n    let mapping = [];\r\n    const layerPoints = 5 + (layer - 1) * 10;\r\n    let previousPoints = 5 * (layer - 1) * (layer - 1);\r\n    for (let i = 0; i < layerPoints; i++) {\r\n        mapping.push(i + previousPoints);\r\n        if (i % (layerPoints / 5) === 0) {\r\n            mapping.push(i + previousPoints);\r\n        }\r\n    }\r\n    mapping.push(mapping.shift());\r\n    mapping.push(mapping.shift());\r\n    return mapping;\r\n}\r\nfunction layerVertexNumbers(layer) {\r\n    let previousPoints = 5 * layer * layer;\r\n    let vertexNumbers = [];\r\n    for (let i = 0, layerPoints = 5 + layer * 10; i < layerPoints; i++) {\r\n        vertexNumbers.push(i + previousPoints);\r\n    }\r\n    return vertexNumbers;\r\n}\r\nfunction makeFaces(layers, color, vertices) {\r\n    let faces = [];\r\n    const firstLayerFace = new Face([0, 1, 2, 3, 4], vertices, color);\r\n    faces.push(firstLayerFace);\r\n    let totalPoints = 5;\r\n    let currentPoint = 5;\r\n    for (let i = 1; i < layers; i++) {\r\n        const layerPoints = 5 + i * 10;\r\n        totalPoints += layerPoints;\r\n        const downMap = downMapping(i);\r\n        const prevLayer = layerVertexNumbers(i - 1);\r\n        const currentLayer = layerVertexNumbers(i);\r\n        while (currentPoint < totalPoints) {\r\n            const currentLayerPoint = currentPoint - (prevLayer[prevLayer.length - 1] + 1);\r\n            const f1isCorner = currentLayerPoint % (layerPoints / 5) === 0;\r\n            if (f1isCorner) {\r\n                currentPoint++;\r\n                continue;\r\n            }\r\n            const f2isCorner = (currentLayerPoint + 1) % (layerPoints / 5) === 0;\r\n            let f1 = currentPoint;\r\n            let f2 = currentLayer[(currentLayerPoint + 1) % currentLayer.length];\r\n            let f3 = f2isCorner ? f2 + 1 : downMap.shift();\r\n            let f4 = f2isCorner\r\n                ? downMap.shift()\r\n                : prevLayer[(prevLayer.indexOf(f3) - 1 + prevLayer.length) % prevLayer.length];\r\n            currentPoint++;\r\n            faces.push(new Face([f1, f2, f3, f4], vertices, color));\r\n        }\r\n    }\r\n    return faces;\r\n}\r\n/**\r\n * Takes two points and extrapolates points along the line they make\r\n *\r\n * @param p1 point 1\r\n * @param p2 point 2\r\n * @param segments how many points to extrapolate from each direction p1 -> p2 and p2 -> p1\r\n */\r\nfunction segmentPoints(p1, p2, segments, layerWidth) {\r\n    if (segments === 0) {\r\n        return [\r\n            Vector3.fromValues(p1.x, p1.y, 0),\r\n            Vector3.fromValues(p2.x, p2.y, 0),\r\n        ];\r\n    }\r\n    const length = lineSegmentLength(p1, p2);\r\n    let points = [];\r\n    for (let i = segments; i > 0; i--) {\r\n        // extrapolate from p1.v\r\n        let a = Vector3.fromValues(p1.x + ((p2.x - p1.x) / length) * layerWidth * i, p1.y + ((p2.y - p1.y) / length) * layerWidth * i, 0);\r\n        points.unshift(a);\r\n        // extrapolate from p2.v\r\n        let b = Vector3.fromValues(p2.x + ((p1.x - p2.x) / length) * layerWidth * i, p2.y + ((p1.y - p2.y) / length) * layerWidth * i, 0);\r\n        points.push(b);\r\n    }\r\n    points.unshift(Vector3.fromValues(p1.x, p1.y, 0));\r\n    points.push(Vector3.fromValues(p2.x, p2.y, 0));\r\n    return points;\r\n}\r\nfunction layerVerticies(layer, radius, layerWidth) {\r\n    let verticies = [];\r\n    for (let i = 0; i < 5; i++) {\r\n        const theta = (i * (2 * Math.PI)) / 5 - Math.PI / 10;\r\n        const v = polarToCartesian(radius, theta);\r\n        if (verticies.length > 0) {\r\n            const lastPoint = verticies[verticies.length - 1];\r\n            const points = segmentPoints(Vector2.fromValues(lastPoint.x, lastPoint.y), v, layer, layerWidth);\r\n            points.shift(); // Remove the first, otherwise it's duplicated\r\n            verticies = verticies.concat(points);\r\n        }\r\n        else {\r\n            verticies.push(Vector3.fromValues(v.x, v.y, 0));\r\n        }\r\n    }\r\n    // Insert segments for last and first\r\n    const first = verticies[0];\r\n    const last = verticies[verticies.length - 1];\r\n    const points = segmentPoints(Vector2.fromValues(last.x, last.y), Vector2.fromValues(first.x, first.y), layer, layerWidth);\r\n    points.pop();\r\n    points.shift();\r\n    verticies = verticies.concat(points);\r\n    return verticies;\r\n}\r\nfunction faceVerticies(layers, radius, radiusDiff, layerWidth) {\r\n    let verticies = [];\r\n    for (let i = 0; i < layers; i++) {\r\n        const r = radius + radiusDiff * i;\r\n        verticies = [...verticies, ...layerVerticies(i, r, layerWidth)];\r\n    }\r\n    return verticies;\r\n}\r\n","import { WHITE, RED, GREEN, PURPLE, YELLOW, BLUE, GREY, DARK_BLUE, LIGHT_YELLOW, PINK, LIGHT_GREEN, ORANGE, BLACK, } from \"./colors\";\r\nimport { Group } from \"./../geometry/group\";\r\nimport { DividedPentagon } from \"./../geometry/dividedPentagon\";\r\nimport { pentagonInRadius } from \"../math/utils\";\r\nimport { chunkArray } from \"../utils/arrays\";\r\nimport { Matrix4 } from \"../math/matrix\";\r\nconst DEG_36_RADIANS = (36 * Math.PI) / 180;\r\nconst DEG_72_RADIANS = (72 * Math.PI) / 180;\r\n/**\r\n * for a megaminx with side length 1,\r\n * layer widths that look good.\r\n */\r\nconst OPTIMAL_LAYER_WIDTH = {\r\n    2: 0.3,\r\n    3: 0.17,\r\n    4: 0.121,\r\n};\r\nfunction getLayerWidth(layers) {\r\n    return OPTIMAL_LAYER_WIDTH[layers];\r\n}\r\nexport class MegaminxNet {\r\n    constructor(layers) {\r\n        this.layers = layers;\r\n        const sideLength = 0.75;\r\n        const layerWidth = getLayerWidth(layers);\r\n        // Left\r\n        this.U = new DividedPentagon(WHITE, layers, sideLength, layerWidth);\r\n        this.F = new DividedPentagon(RED, layers, sideLength, layerWidth);\r\n        this.R = new DividedPentagon(BLUE, layers, sideLength, layerWidth);\r\n        this.L = new DividedPentagon(GREEN, layers, sideLength, layerWidth);\r\n        this.dl = new DividedPentagon(LIGHT_YELLOW, layers, sideLength, layerWidth);\r\n        this.dr = new DividedPentagon(PINK, layers, sideLength, layerWidth);\r\n        // Right\r\n        this.BL = new DividedPentagon(PURPLE, layers, sideLength, layerWidth);\r\n        this.BR = new DividedPentagon(YELLOW, layers, sideLength, layerWidth);\r\n        this.d = new DividedPentagon(GREY, layers, sideLength, layerWidth);\r\n        this.bl = new DividedPentagon(DARK_BLUE, layers, sideLength, layerWidth);\r\n        this.br = new DividedPentagon(LIGHT_GREEN, layers, sideLength, layerWidth);\r\n        this.b = new DividedPentagon(ORANGE, layers, sideLength, layerWidth);\r\n        const ind = 2 * pentagonInRadius(sideLength);\r\n        // Left\r\n        this.U.translate(0, ind, 0);\r\n        this.U.rotate(5 * DEG_36_RADIANS, 0, 0, 1);\r\n        this.R.rotate(-DEG_72_RADIANS, 0, 0, 1);\r\n        this.R.translate(0, ind, 0);\r\n        this.R.rotate(5 * DEG_36_RADIANS, 0, 0, 1);\r\n        this.L.rotate(DEG_72_RADIANS, 0, 0, 1);\r\n        this.L.translate(0, ind, 0);\r\n        this.L.rotate(-5 * DEG_36_RADIANS, 0, 0, 1);\r\n        this.dl.rotate(2 * DEG_72_RADIANS, 0, 0, 1);\r\n        this.dl.translate(0, ind, 0);\r\n        this.dl.rotate(-5 * DEG_36_RADIANS, 0, 0, 1);\r\n        this.dr.rotate(-2 * DEG_72_RADIANS, 0, 0, 1);\r\n        this.dr.translate(0, ind, 0);\r\n        this.dr.rotate(-5 * DEG_36_RADIANS, 0, 0, 1);\r\n        // Right\r\n        this.b.rotate(Math.PI, 0, 0, 1);\r\n        this.b.rotate(-2 * DEG_36_RADIANS, 0, 0, 1);\r\n        this.d.rotate(3 * DEG_36_RADIANS, 0, 0, 1);\r\n        this.d.translate(0, ind, 0);\r\n        this.d.rotate(5 * DEG_36_RADIANS, 0, 0, 1);\r\n        this.br.rotate(DEG_36_RADIANS, 0, 0, 1);\r\n        this.br.translate(0, ind, 0);\r\n        this.br.rotate(5 * DEG_36_RADIANS, 0, 0, 1);\r\n        this.BR.rotate(-DEG_36_RADIANS, 0, 0, 1);\r\n        this.BR.translate(0, ind, 0);\r\n        this.BR.rotate(-5 * DEG_36_RADIANS, 0, 0, 1);\r\n        this.BL.rotate(-3 * DEG_36_RADIANS, 0, 0, 1);\r\n        this.BL.translate(0, ind, 0);\r\n        this.BL.rotate(5 * DEG_36_RADIANS, 0, 0, 1);\r\n        this.bl.rotate(5 * DEG_36_RADIANS, 0, 0, 1);\r\n        this.bl.translate(0, ind, 0);\r\n        this.bl.rotate(-5 * DEG_36_RADIANS, 0, 0, 1);\r\n        let bottomTransforms = new Matrix4();\r\n        bottomTransforms.rotate(-DEG_72_RADIANS, 0, 0, 1);\r\n        bottomTransforms.translate(0, 2 * ind, 0);\r\n        bottomTransforms.rotate(2 * DEG_72_RADIANS, 0, 0, 1);\r\n        bottomTransforms.translate(0, -ind, 0);\r\n        [this.d, this.bl, this.BL, this.BR, this.br, this.b].forEach((face) => {\r\n            Matrix4.multiply(face.matrix, bottomTransforms, face.matrix);\r\n        });\r\n        this.faces = {\r\n            U: this.U,\r\n            F: this.F,\r\n            R: this.R,\r\n            dr: this.dr,\r\n            dl: this.dl,\r\n            L: this.L,\r\n            d: this.d,\r\n            br: this.br,\r\n            BR: this.BR,\r\n            BL: this.BL,\r\n            bl: this.bl,\r\n            b: this.b,\r\n        };\r\n        this.group = new Group([\r\n            this.U,\r\n            this.F,\r\n            this.L,\r\n            this.dr,\r\n            this.dl,\r\n            this.R,\r\n            this.d,\r\n            this.bl,\r\n            this.BL,\r\n            this.BR,\r\n            this.br,\r\n            this.b,\r\n        ]);\r\n        this.group.scale(0.33, 0.33, 0.33);\r\n        this.group.translate(-1.75 * sideLength, 0, 0);\r\n    }\r\n    setColors(colors) {\r\n        let { U, R, F, d, L, b, dr, dl, br, BR, BL, bl } = colors;\r\n        this.setFaceColors(this.U, U);\r\n        this.setFaceColors(this.R, R);\r\n        this.setFaceColors(this.F, F);\r\n        this.setFaceColors(this.d, d);\r\n        this.setFaceColors(this.L, L);\r\n        this.setFaceColors(this.b, b);\r\n        this.setFaceColors(this.dr, dr);\r\n        this.setFaceColors(this.dl, dl);\r\n        this.setFaceColors(this.BR, BR);\r\n        this.setFaceColors(this.BL, BL);\r\n        this.setFaceColors(this.bl, bl);\r\n        this.setFaceColors(this.br, br);\r\n    }\r\n    oldSetColors(colors) {\r\n        const n = this.layers;\r\n        const numStickers = 5 * n * n - 5 * n + 1;\r\n        let [U, R, F, dr, dl, L, d, br, BR, BL, bl, b] = chunkArray(colors, numStickers);\r\n        this.setFaceColors(this.U, U);\r\n        this.setFaceColors(this.R, R);\r\n        this.setFaceColors(this.F, F);\r\n        this.setFaceColors(this.d, d);\r\n        this.setFaceColors(this.L, L);\r\n        this.setFaceColors(this.b, b);\r\n        this.setFaceColors(this.dr, dr);\r\n        this.setFaceColors(this.dl, dl);\r\n        this.setFaceColors(this.br, br);\r\n        this.setFaceColors(this.BR, BR);\r\n        this.setFaceColors(this.BL, BL);\r\n        this.setFaceColors(this.bl, bl);\r\n    }\r\n    setFaceColors(faceStickers, colors) {\r\n        faceStickers.faces.forEach((f, i) => {\r\n            if (colors && colors[i]) {\r\n                f.color = colors[i];\r\n            }\r\n            else {\r\n                f.color = BLACK;\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { WHITE, RED, GREEN, YELLOW, BLUE, ORANGE, LIGHT_GREEN, PINK, LIGHT_YELLOW, DARK_BLUE, GREY, PURPLE, BLACK, } from \"./colors\";\r\nimport { Group } from \"./../geometry/group\";\r\nimport { DividedPentagon } from \"../geometry/dividedPentagon\";\r\nimport { dodecahedronInRadius } from \"../math/utils\";\r\nconst OPTIMAL_LAYER_WIDTH = {\r\n    2: 0.3,\r\n    3: 0.17,\r\n    4: 0.121,\r\n};\r\nfunction getLayerWidth(length, layers) {\r\n    return OPTIMAL_LAYER_WIDTH[layers] || length / (layers * 1.9);\r\n}\r\nexport class Megaminx {\r\n    constructor(layers = 2) {\r\n        this.layers = layers;\r\n        const length = 0.75;\r\n        const megaminxRadius = dodecahedronInRadius(length);\r\n        const layerWidth = getLayerWidth(length, layers);\r\n        // Front\r\n        this.U = new DividedPentagon(WHITE, layers, length, layerWidth);\r\n        this.F = new DividedPentagon(RED, layers, length, layerWidth);\r\n        this.R = new DividedPentagon(BLUE, layers, length, layerWidth);\r\n        this.dr = new DividedPentagon(PINK, layers, length, layerWidth);\r\n        this.dl = new DividedPentagon(LIGHT_YELLOW, layers, length, layerWidth);\r\n        this.L = new DividedPentagon(GREEN, layers, length, layerWidth);\r\n        // Back\r\n        this.d = new DividedPentagon(GREY, layers, length, layerWidth);\r\n        this.br = new DividedPentagon(LIGHT_GREEN, layers, length, layerWidth);\r\n        this.BR = new DividedPentagon(YELLOW, layers, length, layerWidth);\r\n        this.BL = new DividedPentagon(PURPLE, layers, length, layerWidth);\r\n        this.bl = new DividedPentagon(DARK_BLUE, layers, length, layerWidth);\r\n        this.b = new DividedPentagon(ORANGE, layers, length, layerWidth);\r\n        this.F.translate(0, 0, megaminxRadius);\r\n        this.b.rotate(Math.PI, 0, 0, 1);\r\n        this.b.rotate(Math.PI, 0, 1, 0);\r\n        this.b.translate(0, 0, megaminxRadius);\r\n        this.U.rotate(Math.PI, 0, 0, 1);\r\n        this.U.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\r\n        this.U.translate(0, 0, megaminxRadius);\r\n        this.L.rotate((72 * Math.PI) / 180, 0, 0, 1);\r\n        this.L.rotate(Math.PI, 0, 0, 1);\r\n        this.L.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\r\n        this.L.translate(0, 0, megaminxRadius);\r\n        this.R.rotate((72 * Math.PI) / 180, 0, 0, 1);\r\n        this.R.rotate(Math.PI / 5, 0, 0, 1);\r\n        this.R.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\r\n        this.R.translate(0, 0, megaminxRadius);\r\n        this.dr.rotate((72 * Math.PI) / 180, 0, 0, 1);\r\n        this.dr.rotate(-Math.PI / 5, 0, 0, 1);\r\n        this.dr.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\r\n        this.dr.translate(0, 0, megaminxRadius);\r\n        this.dl.rotate((72 * Math.PI) / 180, 0, 0, 1);\r\n        this.dl.rotate((-3 * Math.PI) / 5, 0, 0, 1);\r\n        this.dl.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\r\n        this.dl.translate(0, 0, megaminxRadius);\r\n        this.BL.rotate(Math.PI / 5, 0, 0, 1);\r\n        this.BL.rotate((-116.57 * Math.PI) / 180, 1, 0, 0);\r\n        this.BL.translate(0, 0, megaminxRadius);\r\n        this.BR.rotate(-Math.PI / 5, 0, 0, 1);\r\n        this.BR.rotate((-116.57 * Math.PI) / 180, 1, 0, 0);\r\n        this.BR.translate(0, 0, megaminxRadius);\r\n        this.bl.rotate((3 * Math.PI) / 5, 0, 0, 1);\r\n        this.bl.rotate((-116.57 * Math.PI) / 180, 1, 0, 0);\r\n        this.bl.translate(0, 0, megaminxRadius);\r\n        this.d.rotate((5 * Math.PI) / 5, 0, 0, 1);\r\n        this.d.rotate((-116.57 * Math.PI) / 180, 1, 0, 0);\r\n        this.d.translate(0, 0, megaminxRadius);\r\n        this.br.rotate((7 * Math.PI) / 5, 0, 0, 1);\r\n        this.br.rotate((-116.57 * Math.PI) / 180, 1, 0, 0);\r\n        this.br.translate(0, 0, megaminxRadius);\r\n        this.stickers = [\r\n            this.U,\r\n            this.F,\r\n            this.R,\r\n            this.dr,\r\n            this.dl,\r\n            this.L,\r\n            this.d,\r\n            this.br,\r\n            this.BR,\r\n            this.BL,\r\n            this.bl,\r\n            this.b,\r\n        ];\r\n        this.faces = {\r\n            U: this.U,\r\n            F: this.F,\r\n            R: this.R,\r\n            dr: this.dr,\r\n            dl: this.dl,\r\n            L: this.L,\r\n            d: this.d,\r\n            br: this.br,\r\n            BR: this.BR,\r\n            BL: this.BL,\r\n            bl: this.bl,\r\n            b: this.b,\r\n        };\r\n        this.group = new Group(this.stickers);\r\n    }\r\n    setColors(colors) {\r\n        let { U, R, F, d, L, b, dr, dl, br, BR, BL, bl } = colors;\r\n        this.setFaceColors(this.U, U);\r\n        this.setFaceColors(this.R, R);\r\n        this.setFaceColors(this.F, F);\r\n        this.setFaceColors(this.d, d);\r\n        this.setFaceColors(this.L, L);\r\n        this.setFaceColors(this.b, b);\r\n        this.setFaceColors(this.dr, dr);\r\n        this.setFaceColors(this.dl, dl);\r\n        this.setFaceColors(this.BR, BR);\r\n        this.setFaceColors(this.BL, BL);\r\n        this.setFaceColors(this.bl, bl);\r\n        this.setFaceColors(this.br, br);\r\n    }\r\n    setFaceColors(faceStickers, colors) {\r\n        faceStickers.faces.forEach((f, i) => {\r\n            if (colors && colors[i]) {\r\n                f.color = colors[i];\r\n            }\r\n            else {\r\n                f.color = BLACK;\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { Face } from \"./face\";\r\nimport { Geometry } from \"./geometry\";\r\nimport { Vector3 } from \"../math/vector\";\r\n/**\r\n * Makes a (size*size) grid of colored planes for the\r\n * rubiks cube stickers. Indexed from the top\r\n * left to bottom right. See Below\r\n *\r\n * ```\r\n *    0 1 2\r\n *    3 4 5\r\n *    6 7 8\r\n * ```\r\n *\r\n * @param length length of the grid\r\n * @param size number of elements to segment grid into\r\n * @param color\r\n */\r\nexport function makeGrid(length, size, color) {\r\n    const halfLength = length / 2;\r\n    const elementWidth = length / size;\r\n    const halfElementWidth = elementWidth / 2;\r\n    let stickers = [];\r\n    for (let i = 0; i < size; i++) {\r\n        let vOffset = -(-halfLength + halfElementWidth + elementWidth * i);\r\n        stickers = stickers.concat(makeRow(length, size, color, vOffset));\r\n    }\r\n    return stickers;\r\n}\r\n/**\r\n * Makes a row of planes for the rubiks cube stickers.\r\n * indexed from left to right\r\n *\r\n *     0 1 2\r\n *\r\n * @param length length of the row horizontally\r\n * @param size number of elements to segment row into\r\n * @param color color\r\n * @param vOffset vertical offset. places vertices of row vertically offset by this amount from x axis\r\n */\r\nexport function makeRow(length, size, color, vOffset = 0) {\r\n    const halfLength = length / 2;\r\n    const elementWidth = length / size;\r\n    const halfElementWidth = elementWidth / 2;\r\n    let stickers = [];\r\n    for (let i = 0; i < size; i++) {\r\n        let hOffset = -halfLength + halfElementWidth + elementWidth * i;\r\n        let vertices = [\r\n            Vector3.fromValues(-halfElementWidth + hOffset, halfElementWidth + vOffset, 0),\r\n            Vector3.fromValues(halfElementWidth + hOffset, halfElementWidth + vOffset, 0),\r\n            Vector3.fromValues(halfElementWidth + hOffset, -halfElementWidth + vOffset, 0),\r\n            Vector3.fromValues(-halfElementWidth + hOffset, -halfElementWidth + vOffset, 0),\r\n        ];\r\n        let faces = [new Face([0, 1, 2, 3], vertices, color)];\r\n        stickers.push(new Geometry(vertices, faces));\r\n    }\r\n    return stickers;\r\n}\r\n","import { YELLOW, RED, BLUE, GREEN, ORANGE, BLACK } from \"./../colors\";\r\nimport { Group } from \"./../../geometry/group\";\r\nimport { makeGrid, makeRow } from \"./../../geometry/grid\";\r\nimport { calculateCentroid } from \"../../math/utils\";\r\nimport { Vector3 } from \"../../math/vector\";\r\nexport class RubiksCubeTopLayer {\r\n    constructor(size, rotationAngle = Math.PI / 4) {\r\n        this.size = size;\r\n        this.cubeWidth = 1.45;\r\n        this.halfCubeWidth = this.cubeWidth / 2;\r\n        this.stickerWidth = this.cubeWidth / size;\r\n        this.halfStickerWidth = this.stickerWidth / 2;\r\n        this.cubeWidth = this.stickerWidth * size;\r\n        this.U = new Group(makeGrid(this.cubeWidth, this.size, YELLOW));\r\n        this.R = new Group(makeRow(this.cubeWidth, this.size, RED));\r\n        this.F = new Group(makeRow(this.cubeWidth, this.size, BLUE));\r\n        this.B = new Group(makeRow(this.cubeWidth, this.size, GREEN));\r\n        this.L = new Group(makeRow(this.cubeWidth, this.size, ORANGE));\r\n        const borderOffset = this.halfCubeWidth + this.halfStickerWidth;\r\n        this.B.translate(0, borderOffset, 0);\r\n        this.B.rotate(Math.PI, 0, 0, 1);\r\n        this.F.translate(0, -borderOffset, 0);\r\n        this.R.translate(borderOffset, 0, 0);\r\n        this.R.rotate(Math.PI / 2, 0, 0, 1);\r\n        this.L.translate(-borderOffset, 0, 0);\r\n        this.L.rotate(-Math.PI / 2, 0, 0, 1);\r\n        this.rotateBorder(this.F.objects, rotationAngle);\r\n        this.rotateBorder(this.R.objects, rotationAngle);\r\n        this.rotateBorder(this.B.objects, rotationAngle);\r\n        this.rotateBorder(this.L.objects, rotationAngle);\r\n        this.stickers = [this.U, this.R, this.F, this.B, this.L];\r\n        this.group = new Group(this.stickers);\r\n        this.faces = {\r\n            U: this.U,\r\n            R: this.R,\r\n            F: this.F,\r\n            L: this.L,\r\n            B: this.B,\r\n        };\r\n    }\r\n    setFaceColors(faceStickers, colors) {\r\n        faceStickers.objects.forEach((g, i) => {\r\n            if (colors && colors[i]) {\r\n                g.faces[0].color = colors[i];\r\n            }\r\n            else {\r\n                g.faces[0].color = BLACK;\r\n            }\r\n        });\r\n    }\r\n    setColors(colors) {\r\n        let { U, R, F, L, B } = colors;\r\n        this.setFaceColors(this.U, U);\r\n        this.setFaceColors(this.R, R);\r\n        this.setFaceColors(this.F, F);\r\n        this.setFaceColors(this.L, L);\r\n        this.setFaceColors(this.B, B);\r\n    }\r\n    /**\r\n     * given a row of stickers centered at 0,0,0\r\n     * rotates each vertex of each sticker around\r\n     * the top of the sticker.\r\n     */\r\n    rotateBorder(stickers, radians) {\r\n        stickers.forEach((sticker) => {\r\n            sticker.vertices = sticker.vertices.map((vertex) => {\r\n                return vertex.rotateX(Vector3.fromValues(0, this.halfStickerWidth, 0), radians);\r\n            });\r\n            sticker.centroid = calculateCentroid(sticker.vertices);\r\n        });\r\n    }\r\n}\r\n","import { YELLOW, RED, BLUE, WHITE, ORANGE, GREEN, BLACK } from \"./../colors\";\r\nimport { Group } from \"./../../geometry/group\";\r\nimport { makeGrid } from \"../../geometry/grid\";\r\nexport class RubiksCubeNet {\r\n    constructor(size) {\r\n        const cubeWidth = 1;\r\n        this.size = size;\r\n        const U = makeGrid(cubeWidth, size, YELLOW);\r\n        const R = makeGrid(cubeWidth, size, RED);\r\n        const F = makeGrid(cubeWidth, size, BLUE);\r\n        const D = makeGrid(cubeWidth, size, WHITE);\r\n        const L = makeGrid(cubeWidth, size, ORANGE);\r\n        const B = makeGrid(cubeWidth, size, GREEN);\r\n        this.U = new Group(U);\r\n        this.U.translate(0, cubeWidth, 0);\r\n        this.R = new Group(R);\r\n        this.R.translate(cubeWidth, 0, 0);\r\n        this.F = new Group(F);\r\n        this.D = new Group(D);\r\n        this.D.translate(0, -cubeWidth, 0);\r\n        this.L = new Group(L);\r\n        this.L.translate(-cubeWidth, 0, 0);\r\n        this.B = new Group(B);\r\n        this.B.translate(2 * cubeWidth, 0, 0);\r\n        this.stickers = [this.U, this.R, this.F, this.D, this.L, this.B];\r\n        this.faces = {\r\n            U: this.U,\r\n            R: this.R,\r\n            F: this.F,\r\n            D: this.D,\r\n            L: this.L,\r\n            B: this.B,\r\n        };\r\n        this.group = new Group(this.stickers);\r\n        this.group.translate(-cubeWidth / 4, 0, 0);\r\n        this.group.scale(0.5, 0.5, 0.5);\r\n    }\r\n    setFaceColors(faceStickers, colors) {\r\n        faceStickers.objects.forEach((g, i) => {\r\n            if (colors && colors[i]) {\r\n                g.faces[0].color = colors[i];\r\n            }\r\n            else {\r\n                g.faces[0].color = BLACK;\r\n            }\r\n        });\r\n    }\r\n    setColors(colors) {\r\n        let { U, R, F, D, L, B } = colors;\r\n        this.setFaceColors(this.U, U);\r\n        this.setFaceColors(this.R, R);\r\n        this.setFaceColors(this.F, F);\r\n        this.setFaceColors(this.D, D);\r\n        this.setFaceColors(this.L, L);\r\n        this.setFaceColors(this.B, B);\r\n    }\r\n}\r\n","import { YELLOW, RED, BLUE, WHITE, ORANGE, GREEN, BLACK } from \"./../colors\";\r\nimport { Group } from \"../../geometry/group\";\r\nimport { makeGrid } from \"../../geometry/grid\";\r\nexport class RubiksCube {\r\n    constructor(size) {\r\n        this.size = size;\r\n        const cubeWidth = 1.25;\r\n        const halfWidth = cubeWidth / 2;\r\n        this.U = new Group(makeGrid(cubeWidth, size, YELLOW));\r\n        this.R = new Group(makeGrid(cubeWidth, size, RED));\r\n        this.F = new Group(makeGrid(cubeWidth, size, BLUE));\r\n        this.D = new Group(makeGrid(cubeWidth, size, WHITE));\r\n        this.L = new Group(makeGrid(cubeWidth, size, ORANGE));\r\n        this.B = new Group(makeGrid(cubeWidth, size, GREEN));\r\n        this.U.rotate(-Math.PI / 2, 0, 1, 0);\r\n        this.U.rotate(-Math.PI / 2, 1, 0, 0);\r\n        this.U.translate(0, 0, halfWidth);\r\n        this.R.translate(0, 0, halfWidth);\r\n        this.F.rotate(-Math.PI / 2, 0, 1, 0);\r\n        this.F.translate(0, 0, halfWidth);\r\n        this.D.rotate(-Math.PI / 2, 0, 1, 0);\r\n        this.D.rotate(Math.PI / 2, 1, 0, 0);\r\n        this.D.translate(0, 0, halfWidth);\r\n        this.L.rotate(-Math.PI, 0, 1, 0);\r\n        this.L.translate(0, 0, halfWidth);\r\n        this.B.rotate(Math.PI / 2, 0, 1, 0);\r\n        this.B.translate(0, 0, halfWidth);\r\n        this.stickers = [this.U, this.R, this.F, this.D, this.L, this.B];\r\n        this.faces = {\r\n            U: this.U,\r\n            R: this.R,\r\n            F: this.F,\r\n            D: this.D,\r\n            L: this.L,\r\n            B: this.B,\r\n        };\r\n        this.group = new Group(this.stickers);\r\n    }\r\n    setFaceColors(faceStickers, colors) {\r\n        faceStickers.objects.forEach((g, i) => {\r\n            if (colors && colors[i]) {\r\n                g.faces[0].color = colors[i];\r\n            }\r\n            else {\r\n                g.faces[0].color = BLACK;\r\n            }\r\n        });\r\n    }\r\n    setColors(colors) {\r\n        let { U, R, F, D, L, B } = colors;\r\n        this.setFaceColors(this.U, U);\r\n        this.setFaceColors(this.R, R);\r\n        this.setFaceColors(this.F, F);\r\n        this.setFaceColors(this.D, D);\r\n        this.setFaceColors(this.L, L);\r\n        this.setFaceColors(this.B, B);\r\n    }\r\n}\r\n","import { calculateCentroid } from \"../math/utils\";\r\nimport { Object3D } from \"./object3d\";\r\nexport class Arrow extends Object3D {\r\n    constructor(p1, p2) {\r\n        super();\r\n        this.p1 = p1;\r\n        this.p2 = p2;\r\n        this.centroid = calculateCentroid([p1, p2]);\r\n    }\r\n}\r\n","export function applyTransformations(vertex, transforms) {\r\n    let v = vertex.clone();\r\n    transforms.forEach((m, i) => {\r\n        v.transformMat4(m);\r\n    });\r\n    return v;\r\n}\r\n","import { Arrow } from \"./../geometry/arrow\";\r\nimport { Geometry } from \"../geometry/geometry\";\r\nimport { Group } from \"../geometry/group\";\r\nimport { applyTransformations } from \"./utils\";\r\n/**\r\n * Renderer class to take scene geometry and render it to 2d\r\n * polygon coordinates.\r\n *\r\n * 1. Takes a scene and camera\r\n * 2. converts the scene 3d geometry to 2d screen geometry based on the camera\r\n * 3. tries to render each face in order from furthest from camera to closest\r\n * 4. finally, draws the lines (arrows) over top of everything\r\n *\r\n * Implementers need just implement\r\n *   - drawPolygon - a method that draws polygons on some 2d graphics area\r\n *   - drawArrow - a method that draws an arrow\r\n *   - onBeforeRender - do any prep work necessary before rendering a frame\r\n *   - onComplete - handle any final logic\r\n */\r\nexport class PolygonRenderer {\r\n    constructor() {\r\n        this.polygons = [];\r\n        this.arrows = [];\r\n    }\r\n    render(scene, camera) {\r\n        this.polygons = [];\r\n        scene.objects.forEach((object) => {\r\n            this.renderObject3D(object, camera, []);\r\n        });\r\n        this.onBeforeRender();\r\n        this.renderPolygons();\r\n        this.renderArrows();\r\n        this.onComplete();\r\n    }\r\n    renderPolygons() {\r\n        this.polygons.sort((a, b) => {\r\n            return a.centroid.z - b.centroid.z;\r\n        });\r\n        this.polygons.forEach((p) => this.drawPolygon(p));\r\n    }\r\n    renderArrows() {\r\n        this.arrows.forEach(({ p1, p2, uid }) => {\r\n            this.drawArrow(p1, p2, uid);\r\n        });\r\n    }\r\n    renderObject3D(object, camera, transformations) {\r\n        if (object instanceof Geometry) {\r\n            this.renderGeometry(object, camera, transformations);\r\n        }\r\n        else if (object instanceof Arrow) {\r\n            this.renderArrow(object, camera, transformations);\r\n        }\r\n        else if (object instanceof Group) {\r\n            let group = object;\r\n            // let sorted = this.sortObjects(group.objects, camera, [\r\n            //   group.matrix,\r\n            //   ...transformations,\r\n            // ]);\r\n            group.objects.forEach((object) => {\r\n                this.renderObject3D(object, camera, [group.matrix, ...transformations]);\r\n            });\r\n        }\r\n    }\r\n    renderGeometry(object, camera, transformations) {\r\n        // this.sortFaces(object.faces, object, transformations);\r\n        object.faces.forEach((face) => {\r\n            let points = [];\r\n            face.indices\r\n                .map((index) => object.vertices[index])\r\n                .forEach((vertex) => {\r\n                let objectToScreen = [\r\n                    object.matrix,\r\n                    ...transformations,\r\n                    camera.matrix,\r\n                ];\r\n                let screenPoint = applyTransformations(vertex, objectToScreen);\r\n                // Need to flip y to look correct on svg viewbox\r\n                screenPoint.multiply(1, -1, 1);\r\n                points.push(screenPoint);\r\n            });\r\n            this.addPolygon(points, face, object, transformations);\r\n        });\r\n    }\r\n    renderArrow(object, camera, transformations) {\r\n        let objectToScreen = [object.matrix, ...transformations, camera.matrix];\r\n        let p1Screen = applyTransformations(object.p1, objectToScreen);\r\n        let p2Screen = applyTransformations(object.p2, objectToScreen);\r\n        this.arrows.push({ p1: p1Screen, p2: p2Screen, uid: object.uid });\r\n    }\r\n    addPolygon(points, face, object, transformations) {\r\n        this.polygons.push({\r\n            points,\r\n            face,\r\n            object,\r\n            centroid: applyTransformations(face.centroid, [\r\n                object.matrix,\r\n                ...transformations,\r\n            ]),\r\n        });\r\n    }\r\n    sortObjects(objects, camera, transformations) {\r\n        let sorted = [...objects];\r\n        sorted.sort((a, b) => {\r\n            let aToWorld = [a.matrix, ...transformations];\r\n            let bToWorld = [b.matrix, ...transformations];\r\n            let aCentroid = applyTransformations(a.centroid, aToWorld);\r\n            let bCentroid = applyTransformations(b.centroid, bToWorld);\r\n            // TODO actually use camera, currently only sorting by Z\r\n            return aCentroid.z - bCentroid.z;\r\n        });\r\n        return sorted;\r\n    }\r\n}\r\n","import { BLACK } from \"../puzzles/colors\";\r\nexport function createSVGElement(width, height, minx, miny, svgWidth, svgHeight) {\r\n    const svgElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\r\n    svgElement.setAttributeNS(null, \"width\", width.toString());\r\n    svgElement.setAttributeNS(null, \"height\", height.toString());\r\n    svgElement.setAttributeNS(null, \"viewBox\", `${minx} ${miny} ${svgWidth} ${svgHeight}`);\r\n    svgElement.setAttributeNS(null, \"id\", \"sr-visualizer\");\r\n    return svgElement;\r\n}\r\nexport function createPolygonElement(points, color, strokeWidth) {\r\n    const polygon = document.createElementNS(\"http://www.w3.org/2000/svg\", \"polygon\");\r\n    updatePolygonElement(polygon, points, color, strokeWidth);\r\n    return polygon;\r\n}\r\nexport function createArrowLineElement(start, end, color, strokeWidth) {\r\n    const line = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\r\n    let strokeColor = color ? color.value : BLACK.value;\r\n    line.setAttributeNS(null, \"x1\", start.x.toString());\r\n    line.setAttributeNS(null, \"y1\", (-start.y).toString());\r\n    line.setAttributeNS(null, \"x2\", end.x.toString());\r\n    line.setAttributeNS(null, \"y2\", (-end.y).toString());\r\n    line.setAttributeNS(null, \"stroke\", strokeColor);\r\n    line.setAttributeNS(null, \"marker-end\", \"url(#arrowhead)\");\r\n    if (strokeWidth) {\r\n        line.setAttributeNS(null, \"stroke-width\", strokeWidth);\r\n    }\r\n    return line;\r\n}\r\nexport function updatePolygonElement(polygon, points, color, strokeWidth) {\r\n    const pointsAttribute = makePointsAttributeValue(points);\r\n    const colorValue = color ? color.value : \"black\";\r\n    const strokeValue = (color && color.stroke) || \"#000000\";\r\n    polygon.setAttributeNS(null, \"points\", pointsAttribute);\r\n    polygon.setAttributeNS(null, \"fill\", colorValue);\r\n    if (strokeWidth) {\r\n        polygon.setAttributeNS(null, \"stroke\", strokeValue);\r\n        polygon.setAttributeNS(null, \"stroke-width\", strokeWidth);\r\n    }\r\n    polygon.setAttributeNS(null, \"stroke-linejoin\", \"round\");\r\n}\r\nexport function clearSVG(svg) {\r\n    while (svg.hasChildNodes()) {\r\n        svg.removeChild(svg.lastChild);\r\n    }\r\n}\r\nexport function createMarkers(color) {\r\n    const defs = document.createElementNS(\"http://www.w3.org/2000/svg\", \"defs\");\r\n    const arrowHeadMarker = document.createElementNS(\"http://www.w3.org/2000/svg\", \"marker\");\r\n    arrowHeadMarker.setAttributeNS(null, \"id\", \"arrowhead\");\r\n    arrowHeadMarker.setAttributeNS(null, \"markerWidth\", \"4\");\r\n    arrowHeadMarker.setAttributeNS(null, \"markerHeight\", \"3.5\");\r\n    arrowHeadMarker.setAttributeNS(null, \"refX\", \"3\");\r\n    arrowHeadMarker.setAttributeNS(null, \"refY\", \"1.75\");\r\n    arrowHeadMarker.setAttributeNS(null, \"orient\", \"auto\");\r\n    const arrowHeadPolygon = document.createElementNS(\"http://www.w3.org/2000/svg\", \"polygon\");\r\n    arrowHeadPolygon.setAttributeNS(null, \"points\", \"0 0, 4 1.75, 0 3.5\");\r\n    arrowHeadPolygon.setAttributeNS(null, \"fill\", color.value);\r\n    defs.appendChild(arrowHeadMarker);\r\n    arrowHeadMarker.appendChild(arrowHeadPolygon);\r\n    return defs;\r\n}\r\nfunction makePointsAttributeValue(points) {\r\n    return points.reduce((pointString, point) => {\r\n        return `${pointString ? pointString + \" \" : \"\"}${point.x}, ${point.y}`;\r\n    }, \"\");\r\n}\r\n","import { BLACK } from \"./../puzzles/colors\";\r\nimport { PolygonRenderer } from \"./polygonRenderer\";\r\nimport { createSVGElement, createPolygonElement, updatePolygonElement, createArrowLineElement, createMarkers, } from \"../svg/svg\";\r\n/**\r\n * Renderer to draw puzzles using html svg elements\r\n */\r\nexport class HtmlSvgRenderer extends PolygonRenderer {\r\n    /**\r\n     * Creates an SVG renderer. This will create it's own html `<svg>` element. it's\r\n     * the user's job to add this element to the page.\r\n     *\r\n     * @example\r\n     * ```\r\n     * const renderer = new HtmlSvgRenderer(width, height, minx, miny, svgWidth, svgHeight)\r\n     * document.getElementById('my-element').appendChild(renderer.domElement);\r\n     * ```\r\n     *\r\n     * @param width svg element width in pixels\r\n     * @param height svg element height in pixels\r\n     * @param minx min x for the svg element viewbox\r\n     * @param miny min x for the svg element viewbox\r\n     * @param svgWidth svg viewbox width\r\n     * @param svgHeight svg viewbox height\r\n     */\r\n    constructor(width, height, minx, miny, svgWidth, svgHeight, arrowColor) {\r\n        super();\r\n        this.strokeWidth = \"0.035\";\r\n        this.arrowStrokeWidth = \"0.03\";\r\n        this.polygons = [];\r\n        this.lines = [];\r\n        this.uidToPolygon = {};\r\n        this.uidToLine = {};\r\n        this.arrowColor = arrowColor || BLACK;\r\n        this.domElement = document.createElement(\"div\");\r\n        this.domElement.className = \"svg-renderer\";\r\n        this.svgElement = createSVGElement(width, height, minx, miny, svgWidth, svgHeight);\r\n        const markers = createMarkers(this.arrowColor);\r\n        this.svgElement.appendChild(markers);\r\n        this.domElement.appendChild(this.svgElement);\r\n    }\r\n    onBeforeRender() { }\r\n    drawPolygon({ points, face, object }) {\r\n        if (!this.uidToPolygon[face.uid]) {\r\n            // Create new polygon for a face that hasn't been rendered\r\n            this.uidToPolygon[face.uid] = createPolygonElement(points, face.color || object.color, this.strokeWidth);\r\n        }\r\n        else {\r\n            // Just update existing polygon element\r\n            const polygon = this.uidToPolygon[face.uid];\r\n            updatePolygonElement(polygon, points, face.color || object.color, this.strokeWidth);\r\n        }\r\n        this.svgElement.appendChild(this.uidToPolygon[face.uid]);\r\n    }\r\n    drawArrow(p1Screen, p2Screen, uid) {\r\n        let arrow;\r\n        if (!this.uidToLine[uid]) {\r\n            arrow = createArrowLineElement(p1Screen, p2Screen, this.arrowColor, this.arrowStrokeWidth);\r\n            this.uidToLine[uid] = arrow;\r\n        }\r\n        else {\r\n            arrow = this.uidToLine[uid];\r\n            arrow.setAttributeNS(null, \"x1\", p1Screen[0].toString());\r\n            arrow.setAttributeNS(null, \"y1\", (-p1Screen[1]).toString());\r\n            arrow.setAttributeNS(null, \"x2\", p2Screen[0].toString());\r\n            arrow.setAttributeNS(null, \"y2\", (-p2Screen[1]).toString());\r\n        }\r\n        this.svgElement.appendChild(this.uidToLine[uid]);\r\n    }\r\n    onComplete() { }\r\n}\r\n","import { BLACK } from \"../puzzles/colors\";\r\nimport { PolygonRenderer } from \"./polygonRenderer\";\r\nexport class HtmlCanvasRenderer extends PolygonRenderer {\r\n    constructor(width, height, lineWidth = 5, arrowColor = BLACK) {\r\n        super();\r\n        this.width = width;\r\n        this.height = height;\r\n        this.lineWidth = lineWidth;\r\n        this.arrowColor = arrowColor;\r\n        this.domElement = document.createElement(\"div\");\r\n        this.domElement.className = \"canvas-renderer\";\r\n        this.canvasElement = document.createElement(\"canvas\");\r\n        this.domElement.appendChild(this.canvasElement);\r\n        this.canvasElement.width = width;\r\n        this.canvasElement.height = height;\r\n        this.ctx = this.canvasElement.getContext(\"2d\");\r\n    }\r\n    /**\r\n     * Visualizer point values will be in range (-.9, .9)\r\n     * Convert these values to canvas points (0, imgSize)\r\n     * using linear interpolation\r\n     *\r\n     * really the camera matrix should be set up properly\r\n     * so we don't have to do this...\r\n     */\r\n    convertRange(n, range) {\r\n        return ((n - -0.9) / (0.9 - -0.9)) * range;\r\n    }\r\n    onBeforeRender() {\r\n        this.ctx.clearRect(0, 0, this.width, this.height);\r\n    }\r\n    drawPolygon(polygon) {\r\n        var _a, _b;\r\n        this.ctx.lineWidth = this.lineWidth;\r\n        this.ctx.lineJoin = \"round\";\r\n        this.ctx.fillStyle = ((_b = (_a = polygon === null || polygon === void 0 ? void 0 : polygon.face) === null || _a === void 0 ? void 0 : _a.color) === null || _b === void 0 ? void 0 : _b.value) || \"#000000\";\r\n        this.ctx.strokeStyle = \"#000000\";\r\n        this.ctx.moveTo(this.convertRange(polygon.points[0].x, this.width), this.convertRange(polygon.points[0].y, this.height));\r\n        this.ctx.beginPath();\r\n        for (let i = 0; i <= polygon.points.length; i++) {\r\n            let point = polygon.points[(i + 1) % polygon.points.length];\r\n            this.ctx.lineTo(this.convertRange(point.x, this.width), this.convertRange(point.y, this.height));\r\n        }\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n    }\r\n    drawArrow(p1, p2, uid) {\r\n        const toX = this.convertRange(p2.x, this.width);\r\n        const toY = this.convertRange(-p2.y, this.height);\r\n        const fromX = this.convertRange(p1.x, this.width);\r\n        const fromY = this.convertRange(-p1.y, this.height);\r\n        const headlen = 20; // length of head in pixels\r\n        const dx = toX - fromX;\r\n        const dy = toY - fromY;\r\n        const angle = Math.atan2(dy, dx);\r\n        this.ctx.strokeStyle = this.arrowColor.value;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(fromX, fromY);\r\n        this.ctx.lineTo(toX, toY);\r\n        this.ctx.lineTo(toX - headlen * Math.cos(angle - Math.PI / 6), toY - headlen * Math.sin(angle - Math.PI / 6));\r\n        this.ctx.moveTo(toX, toY);\r\n        this.ctx.lineTo(toX - headlen * Math.cos(angle + Math.PI / 6), toY - headlen * Math.sin(angle + Math.PI / 6));\r\n        this.ctx.stroke();\r\n    }\r\n    setLineWidth(lineWidth) {\r\n        this.lineWidth = lineWidth;\r\n    }\r\n    onComplete() { }\r\n}\r\n","import { Matrix4 } from \"../math/matrix\";\r\nexport class Camera {\r\n    constructor() {\r\n        this.matrix = Matrix4.perspective(Math.PI / 2, 1, 0.1, 1000);\r\n        this.matrix.translate(0, 0, -5);\r\n        this.matrix.scale(4, 4, 1);\r\n    }\r\n}\r\n","export class Scene {\r\n    constructor() {\r\n        this.objects = [];\r\n    }\r\n    add(geometry) {\r\n        this.objects.push(geometry);\r\n    }\r\n    clear() {\r\n        this.objects = [];\r\n    }\r\n}\r\n","export var VisualizerType;\r\n(function (VisualizerType) {\r\n    VisualizerType[\"CUBE\"] = \"cube\";\r\n    VisualizerType[\"CUBE_NET\"] = \"cube-net\";\r\n    VisualizerType[\"CUBE_TOP\"] = \"cube-top\";\r\n    VisualizerType[\"MEGAMINX\"] = \"megaminx\";\r\n    VisualizerType[\"MEGAMINX_NET\"] = \"megaminx-net\";\r\n    VisualizerType[\"MEGAMINX_TOP\"] = \"megaminx-top\";\r\n    VisualizerType[\"PYRAMINX\"] = \"pyraminx\";\r\n    VisualizerType[\"PYRAMINX_NET\"] = \"pyraminx-net\";\r\n    VisualizerType[\"SKEWB\"] = \"skewb\";\r\n    VisualizerType[\"SKEWB_NET\"] = \"skewb-net\";\r\n    VisualizerType[\"SQUARE1\"] = \"square1\";\r\n    VisualizerType[\"SQUARE1_NET\"] = \"square1-net\";\r\n})(VisualizerType || (VisualizerType = {}));\r\n","import { VisualizerType } from \"./enum\";\r\nimport { RED, YELLOW, BLUE, WHITE, ORANGE, GREEN, PINK, LIGHT_YELLOW, GREY, LIGHT_GREEN, PURPLE, DARK_BLUE, } from \"./../puzzles/colors\";\r\nimport { DEFAULT_SQ1_SCHEME } from \"../puzzles/square1/constants\";\r\nexport const defaultCubeOptions = {\r\n    size: 3,\r\n    scheme: {\r\n        U: YELLOW,\r\n        R: RED,\r\n        F: BLUE,\r\n        D: WHITE,\r\n        L: ORANGE,\r\n        B: GREEN,\r\n    },\r\n    rotations: [\r\n        {\r\n            x: 0,\r\n            y: 45,\r\n            z: 0,\r\n        },\r\n        {\r\n            x: 34,\r\n            y: 0,\r\n            z: 0,\r\n        },\r\n    ],\r\n};\r\nexport const defaultMegaminxOptions = {\r\n    size: 2,\r\n    scheme: {\r\n        U: WHITE,\r\n        F: RED,\r\n        R: BLUE,\r\n        dr: PINK,\r\n        dl: LIGHT_YELLOW,\r\n        L: GREEN,\r\n        d: GREY,\r\n        br: LIGHT_GREEN,\r\n        BR: YELLOW,\r\n        BL: PURPLE,\r\n        bl: DARK_BLUE,\r\n        b: ORANGE,\r\n    },\r\n};\r\nexport const defaultPyraminxOptions = {\r\n    size: 3,\r\n    scheme: {\r\n        left: BLUE,\r\n        right: GREEN,\r\n        top: YELLOW,\r\n        back: RED,\r\n    },\r\n    rotations: [\r\n        {\r\n            x: 0,\r\n            y: 0,\r\n            z: 60,\r\n        },\r\n        {\r\n            x: -60,\r\n            y: 0,\r\n            z: 0,\r\n        },\r\n    ],\r\n};\r\nexport const defaultSkewbOptions = {\r\n    scheme: {\r\n        top: YELLOW,\r\n        front: BLUE,\r\n        right: RED,\r\n        back: GREEN,\r\n        left: ORANGE,\r\n        bottom: WHITE,\r\n    },\r\n    rotations: [\r\n        {\r\n            x: 0,\r\n            y: 45,\r\n            z: 0,\r\n        },\r\n        {\r\n            x: 34,\r\n            y: 0,\r\n            z: 0,\r\n        },\r\n    ],\r\n};\r\nexport const defaultSquare1Options = {\r\n    scheme: DEFAULT_SQ1_SCHEME,\r\n    rotations: [\r\n        {\r\n            x: 0,\r\n            y: 0,\r\n            z: -34,\r\n        },\r\n        {\r\n            x: -56,\r\n            y: 0,\r\n            z: 0,\r\n        },\r\n    ],\r\n};\r\nexport function getDefaultOptions(type) {\r\n    switch (type) {\r\n        case VisualizerType.CUBE:\r\n            return defaultCubeOptions;\r\n        case VisualizerType.CUBE_NET:\r\n            return Object.assign(Object.assign({}, defaultCubeOptions), { rotations: null });\r\n        case VisualizerType.CUBE_TOP:\r\n            return Object.assign(Object.assign({}, defaultCubeOptions), { rotations: null });\r\n        case VisualizerType.MEGAMINX:\r\n        case VisualizerType.MEGAMINX_NET:\r\n        case VisualizerType.MEGAMINX_TOP:\r\n            return defaultMegaminxOptions;\r\n        case VisualizerType.PYRAMINX:\r\n            return defaultPyraminxOptions;\r\n        case VisualizerType.PYRAMINX_NET:\r\n            return Object.assign(Object.assign({}, defaultPyraminxOptions), { rotations: null });\r\n        case VisualizerType.SKEWB:\r\n            return defaultSkewbOptions;\r\n        case VisualizerType.SKEWB_NET:\r\n            return Object.assign(Object.assign({}, defaultSkewbOptions), { rotations: null });\r\n        case VisualizerType.SQUARE1:\r\n            return defaultSquare1Options;\r\n        case VisualizerType.SQUARE1_NET:\r\n            return Object.assign(Object.assign({}, defaultSquare1Options), { rotations: null });\r\n        default:\r\n            throw new Error(`Could not get default options for puzzle ${type}`);\r\n    }\r\n}\r\n","import { BLACK } from \"../puzzles/colors\";\r\nexport function validatePuzzleOptions(options) {\r\n    if (options.alg && typeof options.alg !== \"string\") {\r\n        console.warn(`Inavlid alg ${options.alg}. alg must be a string`);\r\n        options.alg = \"\";\r\n    }\r\n    if (options.case && typeof options.case !== \"string\") {\r\n        console.warn(`Inavlid case ${options.case}. case must be a string`);\r\n        options.case = \"\";\r\n    }\r\n    if (options.scheme) {\r\n        if (typeof options.scheme !== \"object\" || Array.isArray(options.scheme)) {\r\n            console.warn(`Invalid scheme ${options.scheme}. scheme must be an object`);\r\n            options.scheme = {};\r\n        }\r\n        else {\r\n            Object.keys(options.scheme).forEach((face) => {\r\n                const faceColor = options.scheme[face];\r\n                if (faceColor == null ||\r\n                    typeof faceColor !== \"object\" ||\r\n                    !faceColor.value) {\r\n                    console.warn(`Invalid scheme color ${faceColor}. must be an type IColor`);\r\n                    options.scheme[face] = BLACK;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    if (options.mask) {\r\n        if (typeof options.mask !== \"object\" || Array.isArray(options.mask)) {\r\n            console.warn(`Invalid mask ${options.mask}. scheme must be an object`);\r\n            options.mask = {};\r\n        }\r\n        else {\r\n            Object.keys(options.mask).forEach((face) => {\r\n                const maskValues = options.mask[face];\r\n                if (!Array.isArray(maskValues)) {\r\n                    console.warn(`Invalid mask ${maskValues}. must be an array`);\r\n                    options.mask[face] = [];\r\n                }\r\n                else {\r\n                    for (let i = 0; i < maskValues.length; i++) {\r\n                        if (!Number.isInteger(maskValues[i])) {\r\n                            console.warn(`Invalid mask value ${maskValues[i]}. must be a number`);\r\n                            options.mask[face] = [];\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    if (options.stickerColors) {\r\n        if (typeof options.stickerColors !== \"object\" ||\r\n            Array.isArray(options.stickerColors)) {\r\n            console.warn(`Invalid stickerColors ${options.stickerColors}. stickerColors must be an object`);\r\n            options.stickerColors = {};\r\n        }\r\n        else {\r\n            Object.keys(options.stickerColors).forEach((face) => {\r\n                const faceColors = options.stickerColors[face];\r\n                if (!Array.isArray(faceColors)) {\r\n                    console.warn(`Invalid colors ${faceColors}. must be an array`);\r\n                    options.stickerColors[face] = [];\r\n                }\r\n                else {\r\n                    for (let i = 0; i < faceColors.length; i++) {\r\n                        if (!validColor(faceColors[i])) {\r\n                            options.stickerColors[face] = [];\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    if (options.rotations) {\r\n        if (!Array.isArray(options.rotations)) {\r\n            console.warn(`invalid rotations ${options.rotations}, must be an array`);\r\n            options.rotations = [];\r\n        }\r\n        else {\r\n            for (let i = 0; i < options.rotations.length; i++) {\r\n                if (!validRotation(options.rotations[i])) {\r\n                    options.rotations = [];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (options.scale && !Number.isFinite(options.scale)) {\r\n        console.warn(`invalid scale ${options.scale}, must be a finite number`);\r\n        options.scale = 1;\r\n    }\r\n    if (options.translation && !validTranslation(options.translation)) {\r\n        options.translation = { x: 0, y: 0, z: 0 };\r\n    }\r\n    if (options.arrows) {\r\n        if (!Array.isArray(options.arrows)) {\r\n            console.warn(`invalid arrows, must be an array`);\r\n            options.arrows = [];\r\n        }\r\n        else {\r\n            for (let i = 0; i < options.arrows.length; i++) {\r\n                if (!validArrow(options.arrows[i])) {\r\n                    options.arrows = [];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nexport function validColor(c) {\r\n    if (typeof c !== \"object\") {\r\n        console.warn(`invalid color ${c}, must be type object`);\r\n        return false;\r\n    }\r\n    if (!c.value || typeof c.value !== \"string\") {\r\n        console.warn(`invalid color value ${c.value}, must be type string`);\r\n        return false;\r\n    }\r\n    if (c.stroke && typeof c.stroke !== \"string\") {\r\n        console.warn(`invalid color stroke ${c.stroke}, must be type string`);\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nfunction validRotation(r) {\r\n    if (!r || typeof r !== \"object\") {\r\n        console.warn(`invalid rotation ${r}, must be an object`);\r\n        return false;\r\n    }\r\n    if (r.x && !Number.isFinite(r.x)) {\r\n        console.warn(`invalid x rotation ${r.x}, must be a number`);\r\n        return false;\r\n    }\r\n    if (r.y && !Number.isFinite(r.y)) {\r\n        console.warn(`invalid y rotation ${r.y}, must be a number`);\r\n        return false;\r\n    }\r\n    if (r.z && !Number.isFinite(r.z)) {\r\n        console.warn(`invalid z rotation ${r.z}, must be a number`);\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nfunction validTranslation(r) {\r\n    if (typeof r !== \"object\" || Array.isArray(r)) {\r\n        console.warn(`invalid translation ${r}, must be an object`);\r\n        return false;\r\n    }\r\n    if (r.x && !Number.isFinite(r.x)) {\r\n        console.warn(`invalid x translation ${r.x}, must be a number`);\r\n        return false;\r\n    }\r\n    if (r.y && !Number.isFinite(r.y)) {\r\n        console.warn(`invalid y translation ${r.y}, must be a number`);\r\n        return false;\r\n    }\r\n    if (r.z && !Number.isFinite(r.z)) {\r\n        console.warn(`invalid z translation ${r.z}, must be a number`);\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nfunction validArrow(a) {\r\n    if (typeof a !== \"object\") {\r\n        console.warn(`invalid arrow ${a}, must be an object`);\r\n        return false;\r\n    }\r\n    if (typeof a.end !== \"object\" || typeof a.start !== \"object\") {\r\n        console.warn(`invalid arrow ${a}, must have start and end`);\r\n        return false;\r\n    }\r\n    if (typeof a.start.face !== \"string\" || !Number.isInteger(a.start.sticker)) {\r\n        console.warn(`invalid arrow start ${a.start}`);\r\n        return false;\r\n    }\r\n    if (typeof a.end.face !== \"string\" || !Number.isInteger(a.end.sticker)) {\r\n        console.warn(`invalid arrow end ${a.end}`);\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n","import { WHITE, RED, BLUE, GREEN, BLACK, YELLOW, PURPLE } from \"./colors\";\r\nimport { DividedPentagon } from \"./../geometry/dividedPentagon\";\r\nimport { degreesToRadians, dodecahedronInRadius } from \"../math/utils\";\r\nimport { Group } from \"../geometry/group\";\r\nconst OPTIMAL_LAYER_WIDTH = {\r\n    2: 0.3,\r\n    3: 0.17,\r\n    4: 0.121,\r\n};\r\nfunction getLayerWidth(length, layers) {\r\n    return OPTIMAL_LAYER_WIDTH[layers] || length / (layers * 1.9);\r\n}\r\nexport class MegaminxTop {\r\n    constructor() {\r\n        this.createFaces();\r\n        this.removeHiddenStickers();\r\n    }\r\n    createFaces() {\r\n        const layers = 2;\r\n        const length = 0.75;\r\n        const layerWidth = getLayerWidth(length, layers);\r\n        const megaminxRadius = dodecahedronInRadius(length);\r\n        this.U = new DividedPentagon(WHITE, layers, length, layerWidth);\r\n        this.F = new DividedPentagon(RED, layers, length, layerWidth);\r\n        this.R = new DividedPentagon(BLUE, layers, length, layerWidth);\r\n        this.L = new DividedPentagon(GREEN, layers, length, layerWidth);\r\n        this.BR = new DividedPentagon(YELLOW, layers, length, layerWidth);\r\n        this.BL = new DividedPentagon(PURPLE, layers, length, layerWidth);\r\n        this.F.translate(0, 0, megaminxRadius);\r\n        this.U.rotate(Math.PI, 0, 0, 1);\r\n        this.U.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\r\n        this.U.translate(0, 0, megaminxRadius);\r\n        this.L.rotate((72 * Math.PI) / 180, 0, 0, 1);\r\n        this.L.rotate(Math.PI, 0, 0, 1);\r\n        this.L.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\r\n        this.L.translate(0, 0, megaminxRadius);\r\n        this.R.rotate((72 * Math.PI) / 180, 0, 0, 1);\r\n        this.R.rotate(Math.PI / 5, 0, 0, 1);\r\n        this.R.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\r\n        this.R.translate(0, 0, megaminxRadius);\r\n        this.BL.rotate(Math.PI / 5, 0, 0, 1);\r\n        this.BL.rotate((-116.57 * Math.PI) / 180, 1, 0, 0);\r\n        this.BL.translate(0, 0, megaminxRadius);\r\n        this.BR.rotate(-Math.PI / 5, 0, 0, 1);\r\n        this.BR.rotate((-116.57 * Math.PI) / 180, 1, 0, 0);\r\n        this.BR.translate(0, 0, megaminxRadius);\r\n        this.faces = {\r\n            U: this.U,\r\n            F: this.F,\r\n            R: this.R,\r\n            dr: this.BR,\r\n            dl: this.BL,\r\n            L: this.L,\r\n        };\r\n        this.group = new Group([this.U, this.F, this.R, this.BR, this.BL, this.L]);\r\n        this.group.rotate(degreesToRadians(63), 1, 0, 0);\r\n    }\r\n    setColors(colors) {\r\n        let { U, R, F, L, BR, BL } = colors;\r\n        this.createFaces();\r\n        // If length is larger than we expect for\r\n        // a side of the puzzle, assume we're receiving\r\n        // colors for the entire face of the puzzle. and\r\n        // just take out the the colors for visible stickers\r\n        // if (R.length > 3) {\r\n        //   R = R.slice(2, 5);\r\n        //   F = F.slice(2, 5);\r\n        //   L = L.slice(2, 5);\r\n        //   BR = BR.slice(2, 5);\r\n        //   BL = BL.slice(2, 5);\r\n        // }\r\n        // this.U.faces[1].color = BLACK;\r\n        // this.R.faces[1].color = BLACK;\r\n        // this.F.faces[1].color = BLACK;\r\n        // this.L.faces[1].color = BLACK;\r\n        // this.BR.faces[1].color = BLACK;\r\n        // this.BL.faces[1].color = BLACK;\r\n        this.setFaceColors(this.U, U);\r\n        this.setFaceColors(this.R, R);\r\n        this.setFaceColors(this.F, F);\r\n        this.setFaceColors(this.L, L);\r\n        this.setFaceColors(this.BR, BR);\r\n        this.setFaceColors(this.BL, BL);\r\n        this.removeHiddenStickers();\r\n    }\r\n    setFaceColors(faceStickers, colors) {\r\n        faceStickers.faces.forEach((f, i) => {\r\n            if (colors && colors[i]) {\r\n                f.color = colors[i];\r\n            }\r\n            else {\r\n                f.color = BLACK;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * hide stickers that aren't in the top layer\r\n     * so only the top of the megaminx is shown\r\n     */\r\n    removeHiddenStickers() {\r\n        this.F.faces = this.F.faces.slice(2, 5);\r\n        this.BL.faces = this.BL.faces.slice(8, 11);\r\n        this.L.faces = this.L.faces.slice(4, 7);\r\n        this.R.faces = [this.R.faces[1], this.R.faces[2], this.R.faces[10]];\r\n        this.BR.faces = this.BR.faces.slice(6, 9);\r\n    }\r\n}\r\n","import { MegaminxTop } from \"./../puzzles/megaminxTop\";\r\nimport { RubiksCubeTopLayer } from \"./../puzzles/rubiksCube/rubiksCubeTop\";\r\nimport { Square1Net } from \"./../puzzles/square1/square1Net\";\r\nimport { Square1Simualtor } from \"./../simulator/square1/square1Simulator\";\r\nimport { Square1 } from \"./../puzzles/square1/square1\";\r\nimport { SkewbNet } from \"./../puzzles/skewbNet\";\r\nimport { SkewbSimulator } from \"./../simulator/skewb/skewbSimulator\";\r\nimport { Skewb } from \"./../puzzles/skewb\";\r\nimport { PyraminxSimulator } from \"./../simulator/pyraminx/pyraminxSimulator\";\r\nimport { PyraminxNet } from \"./../puzzles/pyraminxNet\";\r\nimport { MegaminxNet } from \"./../puzzles/megaminxNet\";\r\nimport { Megaminx } from \"./../puzzles/megaminx\";\r\nimport { MegaminxSimulator } from \"./../simulator/megaminx/megaminxSimulator\";\r\nimport { RubiksCubeNet } from \"./../puzzles/rubiksCube/rubiksCubeNet\";\r\nimport { RubiksCube } from \"../puzzles/rubiksCube/rubiksCube\";\r\nimport { RubiksCubeSimulator } from \"../simulator/rubiksCube/rubiksCubeSimulator\";\r\nimport { Pyraminx } from \"../puzzles/pyraminx\";\r\nimport { VisualizerType } from \"./enum\";\r\n/**\r\n * Since puzzle geometry doesn't change for any instance of \"Visuzlier\"\r\n * we can cache the geometry generated to avoid generating it on each time\r\n * we render a puzzle\r\n */\r\nconst geometryCache = {\r\n    [VisualizerType.CUBE]: {},\r\n    [VisualizerType.CUBE_NET]: {},\r\n    [VisualizerType.CUBE_TOP]: {},\r\n    [VisualizerType.MEGAMINX]: {},\r\n    [VisualizerType.MEGAMINX_NET]: {},\r\n    [VisualizerType.MEGAMINX_TOP]: {},\r\n    [VisualizerType.PYRAMINX]: {},\r\n    [VisualizerType.PYRAMINX_NET]: {},\r\n    [VisualizerType.SKEWB]: {},\r\n    [VisualizerType.SKEWB_NET]: {},\r\n    [VisualizerType.SQUARE1]: {},\r\n    [VisualizerType.SQUARE1_NET]: {},\r\n};\r\n/**\r\n * Creates puzzle geometry for a given puzzle type.\r\n * Will initialize the geometry on puzzle options\r\n * passed in\r\n *\r\n * @param type Type of the puzzle {@link VisualizerType} (cube, skewb, etc...)\r\n * @param options  Puzzle options {@link PuzzleOptions}\r\n */\r\nexport function getPuzzleGeometry(type, options) {\r\n    switch (type) {\r\n        case VisualizerType.CUBE:\r\n            return createCube(options);\r\n        case VisualizerType.CUBE_NET:\r\n            return createCubeNet(options);\r\n        case VisualizerType.CUBE_TOP:\r\n            return createCubeTop(options);\r\n        case VisualizerType.MEGAMINX:\r\n            return createMegaminx(options);\r\n        case VisualizerType.MEGAMINX_NET:\r\n            return createMegaminxNet(options);\r\n        case VisualizerType.MEGAMINX_TOP:\r\n            return createMegaminxTop(options);\r\n        case VisualizerType.PYRAMINX:\r\n            return createPyraminx(options);\r\n        case VisualizerType.PYRAMINX_NET:\r\n            return createPyraminxNet(options);\r\n        case VisualizerType.SKEWB:\r\n            return createSkewb(options);\r\n        case VisualizerType.SKEWB_NET:\r\n            return createSkewbNet(options);\r\n        case VisualizerType.SQUARE1:\r\n            return createSquare1(options);\r\n        case VisualizerType.SQUARE1_NET:\r\n            return createSquare1Net(options);\r\n    }\r\n}\r\n/**\r\n * Returns a puzzle simulator for the type of puzzle\r\n *\r\n * @param type\r\n * @param options\r\n */\r\nexport function getPuzzleSimulator(type, options) {\r\n    switch (type) {\r\n        case VisualizerType.CUBE:\r\n        case VisualizerType.CUBE_NET:\r\n        case VisualizerType.CUBE_TOP:\r\n            return new RubiksCubeSimulator(options.size);\r\n        case VisualizerType.MEGAMINX:\r\n        case VisualizerType.MEGAMINX_NET:\r\n        case VisualizerType.MEGAMINX_TOP:\r\n            return new MegaminxSimulator();\r\n        case VisualizerType.PYRAMINX:\r\n        case VisualizerType.PYRAMINX_NET:\r\n            return new PyraminxSimulator();\r\n        case VisualizerType.SKEWB:\r\n        case VisualizerType.SKEWB_NET:\r\n            return new SkewbSimulator();\r\n        case VisualizerType.SQUARE1:\r\n        case VisualizerType.SQUARE1_NET:\r\n            return initSquare1Simulator(options);\r\n    }\r\n}\r\nexport function createCube(options = {}) {\r\n    if (!geometryCache[VisualizerType.CUBE][options.size]) {\r\n        geometryCache[VisualizerType.CUBE][options.size] = new RubiksCube(options.size);\r\n    }\r\n    return geometryCache[VisualizerType.CUBE][options.size];\r\n}\r\nexport function createCubeNet(options = {}) {\r\n    if (!geometryCache[VisualizerType.CUBE_NET][options.size]) {\r\n        geometryCache[VisualizerType.CUBE_NET][options.size] = new RubiksCubeNet(options.size);\r\n    }\r\n    return geometryCache[VisualizerType.CUBE_NET][options.size];\r\n}\r\nexport function createCubeTop(options = {}) {\r\n    if (!geometryCache[VisualizerType.CUBE_TOP][options.size]) {\r\n        geometryCache[VisualizerType.CUBE_TOP][options.size] =\r\n            new RubiksCubeTopLayer(options.size);\r\n    }\r\n    return geometryCache[VisualizerType.CUBE_TOP][options.size];\r\n}\r\nexport function createMegaminx(options = {}) {\r\n    if (!geometryCache[VisualizerType.MEGAMINX][options.size]) {\r\n        geometryCache[VisualizerType.MEGAMINX][options.size] = new Megaminx(options.size);\r\n    }\r\n    return geometryCache[VisualizerType.MEGAMINX][options.size];\r\n}\r\nexport function createMegaminxNet(options = {}) {\r\n    if (!geometryCache[VisualizerType.MEGAMINX_NET][options.size]) {\r\n        geometryCache[VisualizerType.MEGAMINX_NET][options.size] = new MegaminxNet(options.size);\r\n    }\r\n    return geometryCache[VisualizerType.MEGAMINX_NET][options.size];\r\n}\r\nexport function createMegaminxTop(options = {}) {\r\n    if (!geometryCache[VisualizerType.MEGAMINX_TOP][2]) {\r\n        // megaminx top size not supported, so just cache by size 2\r\n        geometryCache[VisualizerType.MEGAMINX_TOP][2] = new MegaminxTop();\r\n    }\r\n    return geometryCache[VisualizerType.MEGAMINX_TOP][2];\r\n}\r\nexport function createPyraminx(options = {}) {\r\n    if (!geometryCache[VisualizerType.PYRAMINX][options.size]) {\r\n        geometryCache[VisualizerType.PYRAMINX][options.size] = new Pyraminx(options.size);\r\n    }\r\n    return geometryCache[VisualizerType.PYRAMINX][options.size];\r\n}\r\nexport function createPyraminxNet(options = {}) {\r\n    if (!geometryCache[VisualizerType.PYRAMINX_NET][options.size]) {\r\n        geometryCache[VisualizerType.PYRAMINX_NET][options.size] = new PyraminxNet(options.size);\r\n    }\r\n    return geometryCache[VisualizerType.PYRAMINX_NET][options.size];\r\n}\r\nexport function createSkewb(options = {}) {\r\n    if (!geometryCache[VisualizerType.SKEWB][1]) {\r\n        // Skewb size not supported, so just cache by size 1\r\n        geometryCache[VisualizerType.SKEWB][1] = new Skewb();\r\n    }\r\n    return geometryCache[VisualizerType.SKEWB][1];\r\n}\r\nexport function createSkewbNet(options = {}) {\r\n    if (!geometryCache[VisualizerType.SKEWB_NET][1]) {\r\n        // Skewb size not supported, so just cache by size 1\r\n        geometryCache[VisualizerType.SKEWB_NET][1] = new SkewbNet();\r\n    }\r\n    return geometryCache[VisualizerType.SKEWB_NET][1];\r\n}\r\nexport function createSquare1(options = {}) {\r\n    const simulator = initSquare1Simulator(options);\r\n    const geometry = new Square1(simulator.topLayer, simulator.bottomLayer, simulator.middleRotated, options.scheme);\r\n    return geometry;\r\n}\r\nexport function createSquare1Net(options = {}) {\r\n    const simulator = initSquare1Simulator(options);\r\n    const geometry = new Square1Net(simulator.topLayer, simulator.bottomLayer, simulator.middleRotated, options.scheme);\r\n    return geometry;\r\n}\r\nfunction initSquare1Simulator(options) {\r\n    const simulator = new Square1Simualtor(options.scheme);\r\n    if (options.case) {\r\n        simulator.case(options.case);\r\n    }\r\n    else if (options.alg) {\r\n        simulator.alg(options.alg);\r\n    }\r\n    return simulator;\r\n}\r\n","/**\r\n * Credit to logic https://github.com/toji/gl-matrix/blob/master/src/quat.js\r\n */\r\nexport class Quaternion {\r\n    static fromEuler(x, y, z) {\r\n        let halfToRad = Math.PI / 360;\r\n        x *= halfToRad;\r\n        z *= halfToRad;\r\n        y *= halfToRad;\r\n        let sx = Math.sin(x);\r\n        let cx = Math.cos(x);\r\n        let sy = Math.sin(y);\r\n        let cy = Math.cos(y);\r\n        let sz = Math.sin(z);\r\n        let cz = Math.cos(z);\r\n        let a = sx * cy * cz - cx * sy * sz;\r\n        let b = cx * sy * cz + sx * cy * sz;\r\n        let c = cx * cy * sz - sx * sy * cz;\r\n        let d = cx * cy * cz + sx * sy * sz;\r\n        return new Quaternion(a, b, c, d);\r\n    }\r\n    constructor(a, b, c, d) {\r\n        this.a = a;\r\n        this.b = b;\r\n        this.c = c;\r\n        this.d = d;\r\n    }\r\n}\r\n","import { Square1 } from \"./../puzzles/square1/square1\";\r\nimport { Geometry } from \"./../geometry/geometry\";\r\nimport { Arrow } from \"./../geometry/arrow\";\r\nimport { getDefaultOptions } from \"./options\";\r\nimport { MASK_COLOR } from \"./../puzzles/colors\";\r\nimport { VisualizerType } from \"./enum\";\r\nimport { validatePuzzleOptions, } from \"./interface\";\r\nimport { Scene } from \"../rendering/scene\";\r\nimport { Camera } from \"./../rendering/camera\";\r\nimport { applyTransformations } from \"../rendering/utils\";\r\nimport { Group } from \"../geometry/group\";\r\nimport { getPuzzleGeometry, getPuzzleSimulator } from \"./puzzleCreator\";\r\nimport { Matrix4 } from \"../math/matrix\";\r\nimport { Quaternion } from \"../math/quaternion\";\r\n/**\r\n * Applies a color scheme to simulator values\r\n *\r\n * @param faceValues face values from the simulator\r\n * @param scheme color scheme to\r\n */\r\nfunction applyColorScheme(faceValues, scheme) {\r\n    return Object.keys(faceValues).reduce((colors, face) => {\r\n        colors[face] = faceValues[face].map((value) => scheme[value] || MASK_COLOR);\r\n        return colors;\r\n    }, {});\r\n}\r\nfunction isSquare1(type) {\r\n    return type === VisualizerType.SQUARE1 || type === VisualizerType.SQUARE1_NET;\r\n}\r\nfunction isPyraminx(type) {\r\n    return (type === VisualizerType.PYRAMINX || type === VisualizerType.PYRAMINX_NET);\r\n}\r\nfunction isMegaminx(type) {\r\n    return (type === VisualizerType.MEGAMINX ||\r\n        type === VisualizerType.MEGAMINX_NET ||\r\n        type === VisualizerType.MEGAMINX_TOP);\r\n}\r\n/**\r\n * Return true if we can apply simulator colors. Currently\r\n * we don't simulate n-layered megaminx/pyraminx.\r\n */\r\nfunction canApplySimulatorColors(type, size) {\r\n    if (isPyraminx(type)) {\r\n        return size === 3;\r\n    }\r\n    if (isMegaminx(type)) {\r\n        return size === 2;\r\n    }\r\n    return true;\r\n}\r\nfunction createArrow(a, puzzle, group) {\r\n    var _a, _b, _c, _d, _e, _f, _g, _h;\r\n    // Get the face the arrow is pointing to\r\n    let startFace = puzzle.faces[a.start.face];\r\n    let endFace = puzzle.faces[a.end.face];\r\n    if (!startFace || !endFace) {\r\n        throw new Error(`Invalid arrow definition ${JSON.stringify(a)}`);\r\n    }\r\n    // Transform from sticker coordinates to group coordinates\r\n    let startTransformations = [\r\n        startFace.matrix,\r\n        puzzle.group.matrix,\r\n        group.matrix,\r\n    ];\r\n    let endTransformations = [endFace.matrix, puzzle.group.matrix, group.matrix];\r\n    let start;\r\n    let end;\r\n    // Get the stickers on the face\r\n    if (startFace instanceof Geometry && endFace instanceof Geometry) {\r\n        start = (_a = startFace.faces[a.start.sticker]) === null || _a === void 0 ? void 0 : _a.centroid;\r\n        end = (_b = endFace.faces[a.end.sticker]) === null || _b === void 0 ? void 0 : _b.centroid;\r\n    }\r\n    else {\r\n        if (puzzle instanceof Square1) {\r\n            start = (_c = startFace.objects[a.start.sticker]) === null || _c === void 0 ? void 0 : _c.faces[0].centroid;\r\n            end = (_d = endFace.objects[a.end.sticker]) === null || _d === void 0 ? void 0 : _d.faces[0].centroid;\r\n        }\r\n        else {\r\n            start = (_e = startFace.objects[a.start.sticker]) === null || _e === void 0 ? void 0 : _e.centroid;\r\n            end = (_f = endFace.objects[a.end.sticker]) === null || _f === void 0 ? void 0 : _f.centroid;\r\n        }\r\n        startTransformations.unshift((_g = startFace.objects[a.start.sticker]) === null || _g === void 0 ? void 0 : _g.matrix);\r\n        endTransformations.unshift((_h = endFace.objects[a.end.sticker]) === null || _h === void 0 ? void 0 : _h.matrix);\r\n    }\r\n    if (!start || !end) {\r\n        throw new Error(`Invalid arrow definition ${JSON.stringify(a)}`);\r\n    }\r\n    let p1 = applyTransformations(start, startTransformations);\r\n    let p2 = applyTransformations(end, endTransformations);\r\n    return new Arrow(p1, p2);\r\n}\r\n/**\r\n * Encapsulates logic for setting up a puzzle environment for rendering\r\n * images. Sets up puzzle geometry, applies any algorithm or masking\r\n * if necessary, and renders the puzzle\r\n */\r\nexport class Visualizer {\r\n    constructor(renderer, type, options = {}) {\r\n        this.type = type;\r\n        this.camera = new Camera();\r\n        this.scene = new Scene();\r\n        this.group = new Group();\r\n        this.scene.add(this.group);\r\n        this.renderer = renderer;\r\n        this.initPuzzleOptions(options);\r\n        this.puzzleGeometry = getPuzzleGeometry(this.type, this.options);\r\n        this.simulator = getPuzzleSimulator(this.type, this.options);\r\n        this.buildGroupMatrix();\r\n        this.applyColors();\r\n        this.addArrows();\r\n        this.group.addObject(this.puzzleGeometry.group);\r\n        this.render();\r\n    }\r\n    applyColors() {\r\n        const hasCustomColors = this.options.stickerColors && !isSquare1(this.type);\r\n        const canUseSimulator = canApplySimulatorColors(this.type, this.options.size);\r\n        if (hasCustomColors) {\r\n            this.puzzleGeometry.setColors(this.options.stickerColors);\r\n        }\r\n        else if (canUseSimulator) {\r\n            this.applySimulatorColors();\r\n        }\r\n        else {\r\n            // Apply scheme to puzzle geomety manually, for puzzles\r\n            // not supported by simulators (megaminx != 2 pyraminx != 3)\r\n            const faces = this.puzzleGeometry.faces;\r\n            Object.keys(faces).forEach((face) => {\r\n                const stickers = faces[face];\r\n                const faceColor = this.options.scheme[face];\r\n                if (stickers instanceof Geometry) {\r\n                    stickers.faces.forEach((f) => (f.color = faceColor));\r\n                }\r\n                else if (stickers instanceof Group) {\r\n                    stickers.objects.forEach((o) => (o.color = faceColor));\r\n                }\r\n            });\r\n        }\r\n    }\r\n    applySimulatorColors() {\r\n        if (this.options.mask)\r\n            this.applyMask(this.options);\r\n        if (this.options.alg || this.options.case)\r\n            this.applyAlgorithm();\r\n        const faceValues = this.simulator.getValues();\r\n        const faceColors = applyColorScheme(faceValues, this.options.scheme);\r\n        this.puzzleGeometry.setColors(faceColors);\r\n    }\r\n    applyAlgorithm() {\r\n        if (isSquare1(this.type)) {\r\n            // puzzle factory applies algorithm to square 1 when greating the puzzle geometry\r\n            return;\r\n        }\r\n        if (this.options.case) {\r\n            this.simulator.case(this.options.case);\r\n        }\r\n        else if (this.options.alg) {\r\n            this.simulator.alg(this.options.alg);\r\n        }\r\n    }\r\n    applyMask(options) {\r\n        Object.keys(options.mask).forEach((maskedFace) => {\r\n            options.mask[maskedFace].forEach((index) => this.simulator.setValue(maskedFace, index, \"mask\"));\r\n        });\r\n    }\r\n    /**\r\n     * build the group matrix for the puzzle. This sets up the\r\n     * rotation, scale, and translation for the resulting rendered\r\n     * image.\r\n     */\r\n    buildGroupMatrix() {\r\n        this.group.matrix = new Matrix4();\r\n        // Rotate the group matrix\r\n        if (this.options.rotations) {\r\n            this.options.rotations.forEach((rotation) => {\r\n                const { x = 0, y = 0, z = 0 } = rotation;\r\n                let rotationMatrix = Matrix4.fromQuaternion(Quaternion.fromEuler(x, y, z));\r\n                Matrix4.multiply(this.group.matrix, rotationMatrix, this.group.matrix);\r\n            });\r\n        }\r\n        // Scale the group matrix\r\n        if (this.options.scale) {\r\n            let scale = this.options.scale;\r\n            this.group.matrix.scale(scale, scale, scale);\r\n        }\r\n        // Translate the group matrix\r\n        if (this.options.translation) {\r\n            const { x = 0, y = 0, z = 0 } = this.options.translation;\r\n            let translationMatrix = Matrix4.fromTranslation(x, y, z);\r\n            Matrix4.multiply(this.group.matrix, translationMatrix, this.group.matrix);\r\n        }\r\n    }\r\n    addArrows() {\r\n        if (!this.options.arrows) {\r\n            return;\r\n        }\r\n        this.options.arrows.forEach((arrow) => {\r\n            try {\r\n                this.scene.add(createArrow(arrow, this.puzzleGeometry, this.group));\r\n            }\r\n            catch (e) {\r\n                console.error(e);\r\n                console.warn(`Invalid arrow ${JSON.stringify(arrow)}`);\r\n            }\r\n        });\r\n    }\r\n    initPuzzleOptions(options) {\r\n        this.options = Object.assign(Object.assign({}, getDefaultOptions(this.type)), options);\r\n        validatePuzzleOptions(this.options);\r\n    }\r\n    applyOptionsToPuzzle() {\r\n        this.simulator.reset();\r\n        this.buildGroupMatrix();\r\n        this.applyColors();\r\n        this.addArrows();\r\n    }\r\n    setPuzzleOptions(options) {\r\n        this.initPuzzleOptions(options);\r\n        // Handle square1 geometry separately, since it\r\n        // changes, unlike the other puzzles\r\n        if (isSquare1(this.type)) {\r\n            this.puzzleGeometry = getPuzzleGeometry(this.type, this.options);\r\n            this.group.setObjects([this.puzzleGeometry.group]);\r\n        }\r\n        this.applyOptionsToPuzzle();\r\n    }\r\n    render() {\r\n        this.renderer.render(this.scene, this.camera);\r\n    }\r\n}\r\n","import { BLACK, GREY } from \"./../puzzles/colors\";\r\nimport { Visualizer } from \"./visualizer\";\r\nimport { HtmlSvgRenderer } from \"../rendering/htmlSvgRenderer\";\r\nimport { validColor } from \"./interface\";\r\nconst defaultOptions = {\r\n    width: 500,\r\n    height: 500,\r\n    minx: -0.9,\r\n    miny: -0.9,\r\n    svgWidth: 1.8,\r\n    svgHeight: 1.8,\r\n    strokeWidth: 0.02,\r\n    arrowColor: GREY,\r\n    arrowStrokeWidth: 0.03,\r\n};\r\n/**\r\n * Visualize puzzles with svg in a DOM\r\n */\r\nexport function SVG(element, type, options = {}) {\r\n    return new SvgVisualizer(element, type, options);\r\n}\r\nexport class SvgVisualizer extends Visualizer {\r\n    constructor(element, type, options = {}) {\r\n        options = Object.assign(Object.assign({}, defaultOptions), options);\r\n        if (typeof element === \"string\") {\r\n            element = document.querySelector(element);\r\n            if (element === null) {\r\n                throw new Error(`Could not find visuzlier element by query selector: ${element}`);\r\n            }\r\n        }\r\n        const renderer = new HtmlSvgRenderer(options.width, options.height, options.minx, options.miny, options.svgWidth, options.svgHeight, options.arrowColor);\r\n        renderer.strokeWidth = \"\" + options.strokeWidth;\r\n        element.appendChild(renderer.domElement);\r\n        super(renderer, type, options.puzzle);\r\n        this.svgOptions = options;\r\n    }\r\n    /**\r\n     * Set the stroke width for the svg elements rendered and re draw the puzzle.\r\n     *\r\n     * @param strokeWidth - value to set the stroke width to. It depends on the svg options and puzzle size,\r\n     *                      but good values are around .01 - .06\r\n     */\r\n    setStrokeWidth(strokeWidth) {\r\n        this.svgOptions.strokeWidth = strokeWidth;\r\n        this.renderer.strokeWidth =\r\n            \"\" + this.svgOptions.strokeWidth;\r\n        this.render();\r\n    }\r\n    /**\r\n     * Dynamically update the svg element options\r\n     *\r\n     * @param options - options for the svg element that is being rendered to\r\n     */\r\n    setSvgOptions(options) {\r\n        this.svgOptions = Object.assign(Object.assign({}, defaultOptions), options);\r\n        validateSvgOptions(this.svgOptions);\r\n        const renderer = this.renderer;\r\n        const svgElement = renderer.svgElement;\r\n        renderer.strokeWidth = \"\" + this.svgOptions.strokeWidth;\r\n        renderer.arrowStrokeWidth = \"\" + this.svgOptions.arrowStrokeWidth;\r\n        svgElement.setAttributeNS(null, \"width\", this.svgOptions.width.toString());\r\n        svgElement.setAttributeNS(null, \"height\", this.svgOptions.width.toString());\r\n        svgElement.setAttributeNS(null, \"viewBox\", `${this.svgOptions.minx} ${this.svgOptions.miny} ${this.svgOptions.svgWidth} ${this.svgOptions.svgHeight}`);\r\n        this.render();\r\n    }\r\n}\r\nfunction validateSvgOptions(options) {\r\n    if (!Number.isInteger(options.width)) {\r\n        console.warn(`invalid svg width ${options.width}. Must be a whole number`);\r\n        options.width = defaultOptions.width;\r\n    }\r\n    if (!Number.isInteger(options.height)) {\r\n        console.warn(`invalid svg height ${options.height}. Must be a whole number`);\r\n        options.width = defaultOptions.height;\r\n    }\r\n    if (!Number.isFinite(options.minx)) {\r\n        console.warn(`invalid svg minx ${options.minx}`);\r\n        options.minx = defaultOptions.minx;\r\n    }\r\n    if (!Number.isFinite(options.miny)) {\r\n        console.warn(`invalid svg miny ${options.miny}`);\r\n        options.minx = defaultOptions.miny;\r\n    }\r\n    if (!Number.isFinite(options.svgWidth)) {\r\n        console.warn(`invalid svgWidth ${options.svgWidth}`);\r\n        options.minx = defaultOptions.svgWidth;\r\n    }\r\n    if (!Number.isFinite(options.svgHeight)) {\r\n        console.warn(`invalid svgHeight ${options.svgHeight}`);\r\n        options.minx = defaultOptions.svgHeight;\r\n    }\r\n    if (!Number.isFinite(options.strokeWidth)) {\r\n        console.warn(`invalid strokeWidth ${options.strokeWidth}`);\r\n        options.minx = defaultOptions.strokeWidth;\r\n    }\r\n    if (!Number.isFinite(options.arrowStrokeWidth)) {\r\n        console.warn(`invalid arrowStrokeWidth ${options.arrowStrokeWidth}`);\r\n        options.minx = defaultOptions.arrowStrokeWidth;\r\n    }\r\n    if (options.arrowColor && !validColor(options.arrowColor)) {\r\n        options.arrowColor = BLACK;\r\n    }\r\n}\r\n","import { GREY } from \"./../puzzles/colors\";\r\nimport { SVG } from \"./svg\";\r\nconst defaultOptions = {\r\n    width: 500,\r\n    height: 500,\r\n    minx: -0.9,\r\n    miny: -0.9,\r\n    svgWidth: 1.8,\r\n    svgHeight: 1.8,\r\n    strokeWidth: 0.02,\r\n    arrowColor: GREY,\r\n    arrowStrokeWidth: 0.03,\r\n};\r\n/**\r\n * Creates PNG element\r\n */\r\nexport function PNG(container, type, options = {}) {\r\n    if (typeof container === \"string\") {\r\n        container = document.querySelector(container);\r\n        if (container === null) {\r\n            throw new Error(`Could not find visuzlier element by query selector: ${container}`);\r\n        }\r\n    }\r\n    let element = document.createElement(\"div\");\r\n    options = Object.assign(Object.assign({}, defaultOptions), options);\r\n    SVG(element, type, options);\r\n    setTimeout(() => {\r\n        let svgElement = element.querySelector(\"svg\");\r\n        let targetImage = document.createElement(\"img\");\r\n        container.appendChild(targetImage);\r\n        let canvas = document.createElement(\"canvas\");\r\n        let ctx = canvas.getContext(\"2d\");\r\n        let loader = new Image();\r\n        loader.width = canvas.width = targetImage.width = options.width;\r\n        loader.height = canvas.height = targetImage.height = options.height;\r\n        loader.onload = function () {\r\n            ctx.drawImage(loader, 0, 0, loader.width, loader.height);\r\n            targetImage.src = canvas.toDataURL();\r\n        };\r\n        var svgAsXML = new XMLSerializer().serializeToString(svgElement);\r\n        loader.src = `data:image/svg+xml,${encodeURIComponent(svgAsXML)}`;\r\n    });\r\n}\r\n","import { Visualizer } from \".\";\r\nimport { HtmlCanvasRenderer } from \"../rendering/htmlCanvasRenderer\";\r\nimport { GREY } from \"../puzzles/colors\";\r\nconst defaultOptions = {\r\n    width: 500,\r\n    height: 500,\r\n    lineWidth: 5,\r\n    arrowColor: GREY,\r\n};\r\n/**\r\n * Visualize puzzles with canvas\r\n */\r\nexport function Canvas(element, type, options = {}) {\r\n    return new CanvasVisualizer(element, type, options);\r\n}\r\nexport class CanvasVisualizer extends Visualizer {\r\n    constructor(element, type, options) {\r\n        options = Object.assign(Object.assign({}, defaultOptions), options);\r\n        if (typeof element === \"string\") {\r\n            element = document.querySelector(element);\r\n            if (element === null) {\r\n                throw new Error(`Could not find visuzlier element by query selector: ${element}`);\r\n            }\r\n        }\r\n        const renderer = new HtmlCanvasRenderer(options.width, options.height, options.lineWidth, options.arrowColor);\r\n        element.appendChild(renderer.domElement);\r\n        super(renderer, type, options.puzzle);\r\n    }\r\n}\r\n","export const Masks = {\r\n    CUBE_3: {\r\n        LAST_LAYER: {\r\n            F: [3, 4, 5, 6, 7, 8],\r\n            B: [3, 4, 5, 6, 7, 8],\r\n            R: [3, 4, 5, 6, 7, 8],\r\n            L: [3, 4, 5, 6, 7, 8],\r\n            D: [0, 1, 2, 3, 4, 5, 6, 7, 8],\r\n        },\r\n        F2L: {\r\n            F: [0, 1, 2],\r\n            B: [0, 1, 2],\r\n            R: [0, 1, 2],\r\n            L: [0, 1, 2],\r\n            U: [0, 1, 2, 3, 4, 5, 6, 7, 8],\r\n        },\r\n        FIRST_LAYER: {\r\n            F: [0, 1, 2, 3, 4, 5],\r\n            B: [0, 1, 2, 3, 4, 5],\r\n            R: [0, 1, 2, 3, 4, 5],\r\n            L: [0, 1, 2, 3, 4, 5],\r\n            U: [0, 1, 2, 3, 4, 5, 6, 7, 8],\r\n        },\r\n        OLL: {\r\n            R: [0, 1, 2, 3, 4, 5, 6, 7, 8],\r\n            F: [0, 1, 2, 3, 4, 5, 6, 7, 8],\r\n            D: [0, 1, 2, 3, 4, 5, 6, 7, 8],\r\n            L: [0, 1, 2, 3, 4, 5, 6, 7, 8],\r\n            B: [0, 1, 2, 3, 4, 5, 6, 7, 8],\r\n        },\r\n        CORNERS_LAST_LAYER: {\r\n            U: [1, 3, 5, 7],\r\n            F: [1, 3, 4, 5, 6, 7, 8],\r\n            B: [1, 3, 4, 5, 6, 7, 8],\r\n            R: [1, 3, 4, 5, 6, 7, 8],\r\n            L: [1, 3, 4, 5, 6, 7, 8],\r\n            D: [0, 1, 2, 3, 4, 5, 6, 7, 8],\r\n        },\r\n        EDGES_LAST_LAYER: {\r\n            U: [0, 2, 6, 8],\r\n            F: [0, 2, 3, 4, 5, 6, 7, 8],\r\n            B: [0, 2, 3, 4, 5, 6, 7, 8],\r\n            R: [0, 2, 3, 4, 5, 6, 7, 8],\r\n            L: [0, 2, 3, 4, 5, 6, 7, 8],\r\n            D: [0, 1, 2, 3, 4, 5, 6, 7, 8],\r\n        },\r\n    },\r\n    MEGA_3: {\r\n        OLL: {\r\n            F: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n            R: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n            L: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n            BR: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n            BL: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n            d: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n            b: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n            dl: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n            dr: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n            bl: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n            br: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n        },\r\n    },\r\n};\r\n","import { TurnType } from \"./algorithms/algorithm\";\r\nimport { parseCubeAlgorithm } from \"./algorithms/cube\";\r\nimport { Square1Simualtor } from \"./simulator/square1/square1Simulator\";\r\nimport { SkewbSimulator } from \"./simulator/skewb/skewbSimulator\";\r\nimport { PyraminxSimulator } from \"./simulator/pyraminx/pyraminxSimulator\";\r\nimport { MegaminxSimulator } from \"./simulator/megaminx/megaminxSimulator\";\r\nimport { RubiksCubeSimulator } from \"./simulator/rubiksCube/rubiksCubeSimulator\";\r\nimport { Square1Net } from \"./puzzles/square1/square1Net\";\r\nimport { Square1 } from \"./puzzles/square1/square1\";\r\nimport { SkewbNet } from \"./puzzles/skewbNet\";\r\nimport { Skewb } from \"./puzzles/skewb\";\r\nimport { PyraminxNet } from \"./puzzles/pyraminxNet\";\r\nimport { Pyraminx } from \"./puzzles/pyraminx\";\r\nimport { MegaminxNet } from \"./puzzles/megaminxNet\";\r\nimport { Megaminx } from \"./puzzles/megaminx\";\r\nimport { RubiksCubeTopLayer } from \"./puzzles/rubiksCube/rubiksCubeTop\";\r\nimport { RubiksCubeNet } from \"./puzzles/rubiksCube/rubiksCubeNet\";\r\nimport { RubiksCube } from \"./puzzles/rubiksCube/rubiksCube\";\r\nimport { HtmlSvgRenderer } from \"./rendering/htmlSvgRenderer\";\r\nimport { HtmlCanvasRenderer } from \"./rendering/htmlCanvasRenderer\";\r\nimport { PolygonRenderer } from \"./rendering/polygonRenderer\";\r\nimport { Camera } from \"./rendering/camera\";\r\nimport { Scene } from \"./rendering/scene\";\r\nimport { parseMegaminxAlgorithm } from \"./algorithms/megaminx\";\r\nimport { parsePyraminxAlgorithm } from \"./algorithms/pyraminx\";\r\nimport { parseSkewbAlgorithm } from \"./algorithms/skewb\";\r\nimport { parseSquare1Algorithm } from \"./algorithms/square1\";\r\nimport * as Colors_1 from \"./puzzles/colors\";\r\nexport { Colors_1 as Colors };\r\nexport * from \"./visualizer\";\r\nexport * from \"./rendering/renderer\";\r\nexport const Rendering = {\r\n    Scene,\r\n    Camera,\r\n    HtmlSvgRenderer,\r\n    HtmlCanvasRenderer,\r\n    PolygonRenderer,\r\n};\r\nexport const PuzzleGeometry = {\r\n    RubiksCube,\r\n    RubiksCubeNet,\r\n    RubiksCubeTopLayer,\r\n    Megaminx,\r\n    MegaminxNet,\r\n    Pyraminx,\r\n    PyraminxNet,\r\n    Skewb,\r\n    SkewbNet,\r\n    Square1,\r\n    Square1Net,\r\n};\r\nexport const Simulator = {\r\n    RubiksCubeSimulator,\r\n    MegaminxSimulator,\r\n    PyraminxSimulator,\r\n    SkewbSimulator,\r\n    Square1Simualtor,\r\n};\r\nexport const Algorithm = {\r\n    TurnType,\r\n    parseCubeAlgorithm: parseCubeAlgorithm,\r\n    parseMegaminxAlgorithm: parseMegaminxAlgorithm,\r\n    parsePyraminxAlgorithm: parsePyraminxAlgorithm,\r\n    parseSkewbAlgorithm: parseSkewbAlgorithm,\r\n    parseSquare1Algorithm: parseSquare1Algorithm,\r\n};\r\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","TurnType","TurnAbbreviation","CubeAlgorithmUnit","possibleMoves","F","U","R","L","D","B","M","E","S","X","Y","Z","cubeRotations","cubeTurnRegex","parseCubeAlgorithm","algorithm","match","turns","exec","rawSlices","rawFace","outerBlockIndicator","rawType","Clockwise","isLowerCaseMove","toLowerCase","indexOf","toUpperCase","turn","unit","getMove","turnType","getTurnType","slices","getSlices","push","Error","intValue","parseInt","CounterClockwise","Double","Simulator","constructor","stickers","Map","faces","addFace","label","has","size","toString","stickerIds","reduce","nextSticker","stickerId","set","faceId","addTurn","changes","doTurn","reverse","movingSticker","replacedSticker","cached","forEach","change","isSolved","entries","entry","next","id","done","getValues","values","map","setValue","face","index","console","warn","faceStickers","alg","split","reset","faceName","YELLOW","RED","BLUE","WHITE","ORANGE","GREEN","PURPLE","GREY","DARK_BLUE","LIGHT_YELLOW","LIGHT_GREEN","PINK","BLACK","MASK_COLOR","YELLOW_STICKERLESS","stroke","RED_STICKERLESS","BLUE_STICKERLESS","WHITE_STICKERLESS","ORANGE_STICKERLESS","GREEN_STICKERLESS","PURPLE_STICKERLESS","GREY_STICKERLESS","DARK_BLUE_STICKERLESS","LIGHT_YELLOW_STICKERLESS","LIGHT_GREEN_STICKERLESS","PINK_STICKERLESS","PIECE_TYPE","Vector3","fromValues","x","y","z","transformMat4","m","w","multiply","rotateX","origin","radians","Math","cos","sin","rotateZ","clone","Vector2","ROTATION_VECTOR","TOP_COLOR","BOTTOM_COLOR","FRONT_COLOR","LEFT_COLOR","RIGHT_COLOR","BACK_COLOR","DEFAULT_SQ1_SCHEME","top","front","bottom","left","right","back","SOLVED_TOP_PIECES","type","CORNER","colors","EDGE","SOLVED_BOTTOM_PIECES","square1TurnRegex","parseSquare1Algorithm","slice","pieceValue","Square1Simualtor","scheme","super","topLayer","solvedTop","bottomLayer","solvedBottom","middleRotated","move","rotateTop","rotateBottom","topNum","bottomNum","i","length","topSlice","splice","bottomSlice","concat","originalTurns","piece","shift","abs","pop","unshift","skewbTurnRegex","DirectionToTurnType","parseSkewbAlgorithm","rawUnit","rawDirection","fillArray","Array","fill","SkewbSimulator","center","topLeft","topRight","bottomLeft","bottomRight","doTurns","assign","pyraminxTurnRegex","parsePyraminxAlgorithm","PyraminxSimulator","u","r","l","b","MEGAMINX_FACES","megaminxTurnNotation","PochmannDirections","FaceClockwise","FaceCounter","parseMegaminxAlgorithm","rawNumber","n","MegaminxSimulator","dr","dl","d","br","BR","BL","bl","makeFaceTurnDefinitions","Dxx","Rxx","turnFunc","bind","SIMULATOR_FACE","CUBE_FACES","CUBE_AXIS","CUBE_AXIS_FACES","AXIS_ORIENTATION","AXIS_FACE_ORIENTATION","degreesToRadians","degrees","PI","polarToCartesian","radius","theta","dodecahedronInRadius","sqrt","calculateCentroid","vertices","cx","cy","cz","vertex","RubiksCubeSimulator","gridSize","faceChanges","axis","column","layerChanges","nextFaceName","nextFace","currentFace","row","stickerIndex","sticker1","axisAlignedSticker","sticker2","clockwiseSticker","counterClockwiseSticker","oppositeSticker","turnFace","from","to","error","increment","current","range","layer","layers","generateUid","Matrix4","m1","m2","m3","m4","m5","m6","m7","m8","m9","m10","m11","m12","m13","m14","m15","m16","fromQuaternion","q","a","c","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","fromTranslation","fromXRotation","s","fromYRotation","copy","out","matrix","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b0","b1","b2","b3","perspective","fovy","aspect","near","far","f","tan","Infinity","nf","isArray","translate","scale","rotate","len","hypot","b00","b01","b02","b10","b11","b12","b20","b21","b22","t","Object3D","uid","centroid","rad","setColor","color","Group","objects","setObjects","addObject","object","setCentroid","vector","SQRT_3","ATAN_15_DEG","atan","DEG_30_RADIANS","DEG_60_RADIANS","Square1Builder","sideLength","halfSide","halfEdgePiece","layerWidth","middleWidth","halfMiddleWidth","borderLayerWidth","outerHalfSide","outerHalfEdgePiece","pieces","buildSquare1","group","makeLayer","geometry","angle","corner","square1Corner","edge","square1Edge","setColors","Face","indices","filter","v","includes","Geometry","Square1Net","side1","side2","points","side","square1Middle","rotated","layerHeight","halfMiddleHeight","cornerLength","frontColor","leftColor","backColor","INNER_FACE_COLOR","Square1","innerCentroid","innerFaceCentroid","rightColor","Plane","width","height","Triangle","verticies","SkewbNet","centerWidth","pow","cubeWidth","orange","makeStickers","green","white","red","yellow","blue","triangles","triangle","setFaceColors","Skewb","halfWidth","TriangleLattice","base","halfBase","fullHeight","triangleBase","triangleHeight","inradius","count","PyraminxNet","inDiameter","faceSpacing","lattice","ARC_COS_THIRD","acos","DEG_120_RADIANS","SQRT_24","Pyraminx","insphereRadius","DividedPentagon","outRadius","pentagonOutRadius","radiusDiff","aSquared","angleRadians","cSquared","layerWidthToRadiusDiff","layerVerticies","faceVerticies","firstLayerFace","totalPoints","currentPoint","layerPoints","downMap","downMapping","prevLayer","layerVertexNumbers","currentLayer","currentLayerPoint","f2isCorner","f1","f2","f3","f4","makeFaces","mapping","previousPoints","vertexNumbers","segmentPoints","p1","p2","segments","lineSegmentLength","lastPoint","first","last","OPTIMAL_LAYER_WIDTH","MegaminxNet","getLayerWidth","ind","bottomTransforms","oldSetColors","numStickers","array","chunkSize","newSize","ceil","_","chunkArray","Megaminx","megaminxRadius","makeGrid","halfLength","elementWidth","halfElementWidth","vOffset","makeRow","hOffset","RubiksCubeTopLayer","rotationAngle","halfCubeWidth","stickerWidth","halfStickerWidth","borderOffset","rotateBorder","g","sticker","RubiksCubeNet","RubiksCube","Arrow","applyTransformations","transforms","PolygonRenderer","polygons","arrows","render","scene","camera","renderObject3D","onBeforeRender","renderPolygons","renderArrows","onComplete","sort","p","drawPolygon","drawArrow","transformations","renderGeometry","renderArrow","screenPoint","addPolygon","objectToScreen","p1Screen","p2Screen","sortObjects","sorted","aToWorld","bToWorld","aCentroid","bCentroid","updatePolygonElement","polygon","strokeWidth","pointsAttribute","pointString","point","makePointsAttributeValue","colorValue","strokeValue","setAttributeNS","HtmlSvgRenderer","minx","miny","svgWidth","svgHeight","arrowColor","arrowStrokeWidth","lines","uidToPolygon","uidToLine","domElement","document","createElement","className","svgElement","createElementNS","createSVGElement","markers","defs","arrowHeadMarker","arrowHeadPolygon","appendChild","createMarkers","createPolygonElement","arrow","start","end","line","strokeColor","createArrowLineElement","HtmlCanvasRenderer","lineWidth","canvasElement","ctx","getContext","convertRange","clearRect","_a","_b","lineJoin","fillStyle","strokeStyle","moveTo","beginPath","lineTo","closePath","toX","toY","fromX","fromY","dx","dy","atan2","setLineWidth","Camera","Scene","add","clear","VisualizerType","defaultCubeOptions","rotations","defaultMegaminxOptions","defaultPyraminxOptions","defaultSkewbOptions","defaultSquare1Options","validatePuzzleOptions","options","case","keys","faceColor","mask","maskValues","Number","isInteger","stickerColors","faceColors","validColor","validRotation","isFinite","translation","validTranslation","validArrow","MegaminxTop","createFaces","removeHiddenStickers","geometryCache","CUBE","CUBE_NET","CUBE_TOP","MEGAMINX","MEGAMINX_NET","MEGAMINX_TOP","PYRAMINX","PYRAMINX_NET","SKEWB","SKEWB_NET","SQUARE1","SQUARE1_NET","getPuzzleGeometry","createCube","createCubeNet","createCubeTop","createMegaminx","createMegaminxNet","createMegaminxTop","createPyraminx","createPyraminxNet","createSkewb","createSkewbNet","simulator","initSquare1Simulator","createSquare1","createSquare1Net","Quaternion","fromEuler","halfToRad","sx","sy","sz","isSquare1","canApplySimulatorColors","isPyraminx","isMegaminx","Visualizer","renderer","initPuzzleOptions","puzzleGeometry","getPuzzleSimulator","buildGroupMatrix","applyColors","addArrows","hasCustomColors","canUseSimulator","applySimulatorColors","applyMask","applyAlgorithm","faceValues","applyColorScheme","maskedFace","rotation","rotationMatrix","translationMatrix","puzzle","_c","_d","_e","_f","_g","_h","startFace","endFace","JSON","stringify","startTransformations","endTransformations","createArrow","e","getDefaultOptions","applyOptionsToPuzzle","setPuzzleOptions","defaultOptions","SVG","element","SvgVisualizer","querySelector","svgOptions","setStrokeWidth","setSvgOptions","validateSvgOptions","PNG","container","setTimeout","targetImage","canvas","loader","Image","onload","drawImage","src","toDataURL","svgAsXML","XMLSerializer","serializeToString","encodeURIComponent","Canvas","CanvasVisualizer","Masks","CUBE_3","LAST_LAYER","F2L","FIRST_LAYER","OLL","CORNERS_LAST_LAYER","EDGES_LAST_LAYER","MEGA_3","Rendering","PuzzleGeometry","Algorithm"],"sourceRoot":""}