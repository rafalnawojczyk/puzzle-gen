{"version":3,"sources":["webpack://puzzleGen/webpack/universalModuleDefinition","webpack://puzzleGen/./src/algorithms/algorithm.ts","webpack://puzzleGen/./src/algorithms/cube.ts","webpack://puzzleGen/./src/simulator/simulator.ts","webpack://puzzleGen/./src/puzzles/colors.ts","webpack://puzzleGen/./src/puzzles/square1/enum.ts","webpack://puzzleGen/./src/puzzles/square1/constants.ts","webpack://puzzleGen/./src/algorithms/square1.ts","webpack://puzzleGen/./src/simulator/square1/square1Simulator.ts","webpack://puzzleGen/./src/algorithms/skewb.ts","webpack://puzzleGen/./src/utils/arrays.ts","webpack://puzzleGen/./src/simulator/skewb/skewbSimulator.ts","webpack://puzzleGen/./src/algorithms/pyraminx.ts","webpack://puzzleGen/./src/simulator/pyraminx/pyraminxSimulator.ts","webpack://puzzleGen/./src/simulator/megaminx/constants.ts","webpack://puzzleGen/./src/algorithms/megaminx.ts","webpack://puzzleGen/./src/simulator/megaminx/megaminxSimulator.ts","webpack://puzzleGen/./src/simulator/rubiksCube/constants.ts","webpack://puzzleGen/./node_modules/gl-matrix/esm/common.js","webpack://puzzleGen/./node_modules/gl-matrix/esm/vec3.js","webpack://puzzleGen/./src/math/utils.ts","webpack://puzzleGen/./src/simulator/rubiksCube/rubiksCubeSimulator.ts","webpack://puzzleGen/./node_modules/gl-matrix/esm/mat4.js","webpack://puzzleGen/./src/geometry/object3d.ts","webpack://puzzleGen/./src/geometry/group.ts","webpack://puzzleGen/./src/math/constants.ts","webpack://puzzleGen/./src/puzzles/square1/interface.ts","webpack://puzzleGen/./src/geometry/face.ts","webpack://puzzleGen/./src/geometry/geometry.ts","webpack://puzzleGen/./src/puzzles/square1/square1Net.ts","webpack://puzzleGen/./src/puzzles/square1/square1.ts","webpack://puzzleGen/./src/geometry/plane.ts","webpack://puzzleGen/./src/geometry/triangle.ts","webpack://puzzleGen/./src/puzzles/skewbNet.ts","webpack://puzzleGen/./src/puzzles/skewb.ts","webpack://puzzleGen/./src/geometry/triangleLattice.ts","webpack://puzzleGen/./src/puzzles/pyraminxNet.ts","webpack://puzzleGen/./src/puzzles/pyraminx.ts","webpack://puzzleGen/./src/geometry/dividedPentagon.ts","webpack://puzzleGen/./src/puzzles/megaminxNet.ts","webpack://puzzleGen/./src/puzzles/megaminx.ts","webpack://puzzleGen/./src/geometry/grid.ts","webpack://puzzleGen/./src/puzzles/rubiksCube/rubiksCubeTop.ts","webpack://puzzleGen/./src/puzzles/rubiksCube/rubiksCubeNet.ts","webpack://puzzleGen/./src/puzzles/rubiksCube/rubiksCube.ts","webpack://puzzleGen/./src/svg/svg.ts","webpack://puzzleGen/./src/rendering/customSvgRenderer.ts","webpack://puzzleGen/./src/rendering/camera.ts","webpack://puzzleGen/./src/rendering/scene.ts","webpack://puzzleGen/./src/visualizer/enum.ts","webpack://puzzleGen/./src/visualizer/puzzleCreator.ts","webpack://puzzleGen/./src/visualizer/visualizer.ts","webpack://puzzleGen/./src/visualizer/svg.ts","webpack://puzzleGen/./src/visualizer/mask.ts","webpack://puzzleGen/./src/index.ts","webpack://puzzleGen/webpack/bootstrap","webpack://puzzleGen/webpack/startup","webpack://puzzleGen/webpack/runtime/define property getters","webpack://puzzleGen/webpack/runtime/hasOwnProperty shorthand","webpack://puzzleGen/webpack/runtime/make namespace object"],"names":["root","factory","exports","module","define","amd","this","TurnType","TurnAbbreviation","CubeAlgorithmUnit","possibleMoves","F","U","R","L","D","B","M","E","S","X","Y","Z","cubeRotations","cubeTurnRegex","parseCubeAlgorithm","algorithm","match","turns","exec","rawSlices","rawFace","outerBlockIndicator","rawType","Clockwise","isLowerCaseMove","toLowerCase","indexOf","toUpperCase","turn","unit","getMove","turnType","getTurnType","slices","getSlices","push","Error","parseInt","CounterClockwise","Double","Simulator","stickers","Map","faces","label","has","size","toString","stickerIds","reduce","nextSticker","stickerId","set","faceId","changes","reverse","get","movingSticker","replacedSticker","cached","forEach","change","entries","entry","next","value","id","done","values","key","map","face","index","console","warn","faceStickers","log","alg","split","doTurn","YELLOW","RED","BLUE","WHITE","ORANGE","GREEN","PURPLE","GREY","DARK_BLUE","LIGHT_YELLOW","LIGHT_GREEN","PINK","BLACK","MASK_COLOR","PIECE_TYPE","ROTATION_VECTOR","TOP_COLOR","BOTTOM_COLOR","FRONT_COLOR","LEFT_COLOR","RIGHT_COLOR","BACK_COLOR","SOLVED_TOP_PIECES","type","CORNER","colors","EDGE","SOLVED_BOTTOM_PIECES","square1TurnRegex","parseSquare1Algorithm","slice","top","bottom","pieceValue","Square1Simualtor","super","topLayer","JSON","parse","stringify","bottomLayer","middleRotated","move","rotateTop","rotateBottom","topNum","bottomNum","i","length","topSlice","splice","bottomSlice","concat","piece","shift","Math","abs","pop","unshift","skewbTurnRegex","DirectionToTurnType","parseSkewbAlgorithm","rawUnit","rawDirection","fillArray","Array","fill","SkewbSimulator","addFace","front","right","back","left","addTurn","center","topLeft","topRight","bottomLeft","bottomRight","doTurns","Object","assign","pyraminxTurnRegex","parsePyraminxAlgorithm","PyraminxSimulator","r","u","l","b","MEGAMINX_FACES","megaminxStefanPochmann","PochmannDirections","UClockwise","UCounter","parseMegaminxAlgorithm","MegaminxSimulator","faceName","dr","dl","d","br","BR","BL","bl","makeFaceTurnDefinitions","Rxx","Dxx","SIMULATOR_FACE","CUBE_FACES","CUBE_AXIS","CUBE_AXIS_FACES","AXIS_ORIENTATION","AXIS_FACE_ORIENTATION","ARRAY_TYPE","Float32Array","create","out","clone","a","rotateZ","rad","p","cos","sin","degreesToRadians","degrees","PI","polarToCartesian","radius","theta","calculateCentroid","vertices","cx","cy","cz","vertex","random","hypot","y","arguments","sqrt","RubiksCubeSimulator","gridSize","faceChanges","axis","column","layerChanges","nextFaceName","nextFace","currentFace","row","stickerIndex","sticker1","axisAlignedSticker","sticker2","clockwiseSticker","oppositeSticker","counterClockwiseSticker","from","to","error","increment","current","range","layer","layers","turnFace","turnFunc","bind","translate","v","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","x","z","Object3D","matrix","centroid","vector","s","c","t","b00","b01","b02","b10","b11","b12","b20","b21","b22","len","color","Group","objects","setObjects","object","ATAN_15_DEG","atan","DEG_30_RADIANS","DEG_60_RADIANS","Square1Builder","sideLength","halfSide","halfEdgePiece","layerWidth","middleWidth","halfMiddleWidth","borderLayerWidth","outerHalfSide","outerHalfEdgePiece","pieces","buildSquare1","group","geometry","angle","corner","square1Corner","rotate","edge","square1Edge","generateUid","Face","indices","uid","filter","includes","Geometry","Square1Net","side1","side2","points","side","rotated","layerHeight","halfMiddleHeight","cornerLength","makeLayer","m","square1Middle","Square1","m1","m2","Plane","width","height","Triangle","verticies","SkewbNet","centerWidth","pow","cubeWidth","red","makeStickers","yellow","blue","orange","green","white","scale","triangles","triangle","setFaceColors","Skewb","halfWidth","TriangleLattice","base","halfBase","fullHeight","triangleBase","triangleHeight","inradius","count","PyraminxNet","inDiameter","lattice","f","ARC_COS_THIRD","acos","DEG_120_RADIANS","SQRT_24","Pyraminx","insphereRadius","DividedPentagon","outRadius","pentagonOutRadius","radiusDiff","aSquared","angleRadians","cSquared","layerWidthToRadiusDiff","layerVerticies","faceVerticies","firstLayerFace","totalPoints","currentPoint","layerPoints","downMap","downMapping","prevLayer","layerVertexNumbers","currentLayer","currentLayerPoint","f2isCorner","f1","f2","f3","f4","makeFaces","mapping","previousPoints","vertexNumbers","segmentPoints","p1","p2","segments","lineSegmentLength","lastPoint","first","last","DEG_36_RADIANS","DEG_72_RADIANS","OPTIMAL_LAYER_WIDTH","2","3","4","MegaminxNet","getLayerWidth","ind","tan","n","numStickers","array","chunkSize","newSize","ceil","_","chunkArray","Megaminx","megaminxRadius","makeGrid","halfLength","elementWidth","halfElementWidth","vOffset","makeRow","hOffset","RubiksCubeTopLayer","rotationAngle","stickerWidth","halfStickerWidth","halfCubeWidth","borderOffset","rotateBorder","g","radians","sticker","RubiksCubeNet","RubiksCube","updatePolygonElement","polygon","strokeWidth","pointsAttribute","pointString","point","makePointsAttributeValue","colorValue","strokeValue","stroke","setAttributeNS","CustomSVGRenderer","minx","miny","svgWidth","svgHeight","polygons","uidToPolygon","domElement","document","createElement","className","svgElement","createElementNS","createSVGElement","appendChild","scene","camera","renderObject3D","renderPolygons","sort","transformations","createPolygonElement","applyTransformations","renderGeometry","sortObjects","objectToScreen","screenPoint","addPolygon","aToWorld","bToWorld","aCentroid","bCentroid","transforms","w","Camera","fovy","nf","Scene","VisualizerType","initSquare1Simulator","options","simulator","case","defaultCubeOptions","scheme","defaultMegaminxOptions","defaultPyraminxOptions","defaultSkewbOptions","defaultSquare1Options","isSquare1","SQUARE1","SQUARE1_NET","Visualizer","renderer","CUBE","CUBE_NET","CUBE_TOP","MEGAMINX","MEGAMINX_NET","PYRAMINX","PYRAMINX_NET","SKEWB","SKEWB_NET","getDefaultOptions","puzzleGeometry","createCube","createCubeNet","createCubeTop","createMegaminx","createMegaminxNet","createPyraminx","createPyraminxNet","createSquare1","createSquare1Net","puzzleFactory","add","stickerColors","applyManualColors","applySimulatorColors","render","setColors","mask","applyMask","applyAlgorithm","faceColors","faceValues","getValues","keys","maskedFace","setValue","defaultOptions","SVG","element","querySelector","puzzle","Masks","CUBE_3","LAST_LAYER","F2L","FIRST_LAYER","OLL","CORNERS_LAST_LAYER","EDGES_LAST_LAYER","Rendering","PuzzleGeometry","Algorithm","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","definition","o","defineProperty","enumerable","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag"],"mappings":"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","file":"puzzleGen.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"puzzleGen\"] = factory();\n\telse\n\t\troot[\"puzzleGen\"] = factory();\n})(this, function() {\nreturn ","export var TurnType;\n(function (TurnType) {\n    TurnType[TurnType[\"Clockwise\"] = 0] = \"Clockwise\";\n    TurnType[TurnType[\"CounterClockwise\"] = 1] = \"CounterClockwise\";\n    TurnType[TurnType[\"Double\"] = 2] = \"Double\";\n})(TurnType || (TurnType = {}));\n","import { TurnType } from \"./algorithm\";\nvar TurnAbbreviation;\n(function (TurnAbbreviation) {\n    TurnAbbreviation[\"Clockwise\"] = \"\";\n    TurnAbbreviation[\"CounterClockwise\"] = \"'\";\n    TurnAbbreviation[\"Double\"] = \"2\";\n})(TurnAbbreviation || (TurnAbbreviation = {}));\nexport var CubeAlgorithmUnit;\n(function (CubeAlgorithmUnit) {\n    CubeAlgorithmUnit[\"F\"] = \"F\";\n    CubeAlgorithmUnit[\"U\"] = \"U\";\n    CubeAlgorithmUnit[\"R\"] = \"R\";\n    CubeAlgorithmUnit[\"L\"] = \"L\";\n    CubeAlgorithmUnit[\"D\"] = \"D\";\n    CubeAlgorithmUnit[\"B\"] = \"B\";\n    CubeAlgorithmUnit[\"M\"] = \"M\";\n    CubeAlgorithmUnit[\"E\"] = \"E\";\n    CubeAlgorithmUnit[\"S\"] = \"S\";\n    CubeAlgorithmUnit[\"X\"] = \"x\";\n    CubeAlgorithmUnit[\"Y\"] = \"y\";\n    CubeAlgorithmUnit[\"Z\"] = \"z\";\n})(CubeAlgorithmUnit || (CubeAlgorithmUnit = {}));\nexport const possibleMoves = [\n    CubeAlgorithmUnit.F,\n    CubeAlgorithmUnit.U,\n    CubeAlgorithmUnit.R,\n    CubeAlgorithmUnit.L,\n    CubeAlgorithmUnit.D,\n    CubeAlgorithmUnit.B,\n    CubeAlgorithmUnit.M,\n    CubeAlgorithmUnit.E,\n    CubeAlgorithmUnit.S,\n    CubeAlgorithmUnit.X,\n    CubeAlgorithmUnit.Y,\n    CubeAlgorithmUnit.Z,\n];\nconst cubeRotations = [\n    CubeAlgorithmUnit.X,\n    CubeAlgorithmUnit.Y,\n    CubeAlgorithmUnit.Z,\n];\nconst cubeTurnRegex = /([2-9]+)?([UuFfRrDdLlBbMESxyz])(w)?([2\\'])?/g;\n/**\n * Takes in an algorithm string and parses the turns from it\n * algorithm string format should be moves separated by a single space\n * (ex. \"U R2 L' x\")\n *\n * https://www.worldcubeassociation.org/regulations/#article-12-notation\n */\nexport function parseCubeAlgorithm(algorithm) {\n    if (!algorithm) {\n        return [];\n    }\n    let turns = [];\n    let match;\n    while ((match = cubeTurnRegex.exec(algorithm))) {\n        let rawSlices = match[1];\n        let rawFace = match[2];\n        let outerBlockIndicator = match[3];\n        let rawType = match[4] || TurnAbbreviation.Clockwise; // Default to clockwise\n        let isLowerCaseMove = rawFace === rawFace.toLowerCase() &&\n            cubeRotations.indexOf(rawFace) === -1;\n        if (isLowerCaseMove) {\n            rawFace = rawFace.toUpperCase();\n        }\n        let turn = {\n            unit: getMove(rawFace),\n            turnType: getTurnType(rawType),\n            slices: isLowerCaseMove ? 2 : getSlices(rawSlices, outerBlockIndicator),\n        };\n        turns.push(turn);\n    }\n    return turns;\n}\nfunction getSlices(rawSlices, outerBlockIndicator) {\n    if (outerBlockIndicator && !rawSlices) {\n        return 2;\n    }\n    else if (!outerBlockIndicator && rawSlices) {\n        throw new Error(`Invalid move: Cannot specify num slices if outer block move indicator 'w' is not present`);\n    }\n    else if (!outerBlockIndicator && !rawSlices) {\n        return 1;\n    }\n    else {\n        return parseInt(rawSlices);\n    }\n}\nfunction getMove(rawFace) {\n    if (possibleMoves.indexOf(rawFace) < 0) {\n        throw new Error(`Invalid move (${rawFace}): Possible turn faces are [U R F L D B M E S x y z]`);\n    }\n    else\n        return rawFace;\n}\nfunction getTurnType(rawType) {\n    switch (rawType) {\n        case TurnAbbreviation.Clockwise:\n            return TurnType.Clockwise;\n        case TurnAbbreviation.CounterClockwise:\n            return TurnType.CounterClockwise;\n        case TurnAbbreviation.Double:\n            return TurnType.Double;\n        default:\n            throw new Error(`Invalid move modifier (${rawType})`);\n    }\n}\n","/**\n * Class for simulating turns on symmetric twisty puzzles. This is acheived by\n * defining a set of faces with stickers, and a set of turns.\n *\n * @see {@link SkewbSimulator}\n *\n * @example\n * ```typescript\n * // extend class to create a coin simulator\n * export class CoinSimulator extends Simulator {\n *   constructor() {\n *     super()\n *\n *     // Add a head face with one \"heads\" sticker\n *     // Label this face \"top\"\n *      const { stickerIds: top } = this.addFace(['heads'], 'top');\n *\n *     // Add a tail face with one \"tails\" sticker\n *     // Label this face \"bottom\"\n *      const { stickerIds: bottom } = this.addface(['tails'], 'bottom');\n *\n *     // Define a turn by providing the\n *     // sticker id for the top and bottom stickers.\n *     // Label this \"turnOver\"\n *     this.addTurn([top[0], bottom[0]], \"turnOver\");\n *   }\n *\n *   // Flip the coin over\n *   turnOver() {\n *     // Execute the \"turnOver\" turn we created\n *     this.doTurn(\"turnOver\")\n *   }\n *\n * }\n * ```\n */\nexport class Simulator {\n    constructor() {\n        this.stickers = new Map();\n        this.faces = new Map();\n        this.turns = new Map();\n    }\n    /**\n     * Adds a face of stickers to the puzzle.\n     *\n     * @param stickers - array of sticker values\n     * @param label - label to reference the face by\n     * @returns object with the faceId and list of sticker ids.\n     *  faceId will be label if that is present. Otherwise it\n     *  will be generated.\n     * @example\n     * ```\n     * const stickers = ['red', 'red', 'red', 'red'];\n     *\n     * // Add the F face\n     * addFace(stickers, 'F')\n     * ```\n     */\n    addFace(stickers, label) {\n        if (label && this.faces.has(label)) {\n            throw `Face ${label} already exists`;\n        }\n        else if (!label) {\n            label = (this.faces.size + 1).toString();\n        }\n        // Add Stickers\n        const stickerIds = stickers.reduce((stickerIds, nextSticker) => {\n            const stickerId = (this.stickers.size + 1).toString();\n            this.stickers.set(stickerId, nextSticker);\n            stickerIds.push(stickerId);\n            return stickerIds;\n        }, []);\n        // Add Face\n        this.faces.set(label, stickerIds);\n        return {\n            faceId: label,\n            stickerIds,\n        };\n    }\n    /**\n     * Creates a turn definition that tells the simulator\n     * what sticker values to change when turning.\n     *\n     * A change is an array with two sticker ids (ex. ['sticker1', 'sticker2'])\n     * this means that when turning 'sticker1' will go to 'sticker2'.\n     * Or when doing a reverse turn, `sticker2' will go to 'sticker1'\n     *\n     * @param changes - list of turn definitions.\n     * @param label - label to reference the turn by\n     * @returns label of the turn that was created\n     */\n    addTurn(changes, label) {\n        if (label && this.turns.has(label)) {\n            throw `Turn ${label} already exists`;\n        }\n        else if (!label) {\n            label = (this.turns.size + 1).toString();\n        }\n        this.turns.set(label, changes);\n        return label;\n    }\n    /**\n     * Executes a turn on the puzzle\n     *\n     * @param label - label of the turn to execute\n     * @param prime - true to do the turn in reverse\n     */\n    doTurn(label, reverse = false) {\n        const changes = this.turns.get(label);\n        if (!changes) {\n            throw `Unknown turn ${label}`;\n        }\n        let movingSticker = reverse ? 1 : 0;\n        let replacedSticker = reverse ? 0 : 1;\n        let cached = {};\n        changes.forEach((change) => {\n            // Cache value we're replacing\n            cached[change[replacedSticker]] = this.stickers.get(change[replacedSticker]);\n            // Update sticker with new value\n            this.stickers.set(change[replacedSticker], cached[change[movingSticker]] ||\n                this.stickers.get(change[movingSticker]));\n        });\n    }\n    /**\n     * checks that every sticker on every face\n     * is the same value\n     */\n    isSolved() {\n        const faces = this.faces.entries();\n        let entry = faces.next();\n        do {\n            const stickerIds = entry.value[1];\n            let value = this.stickers.get(stickerIds[0]);\n            for (let id of stickerIds) {\n                if (value != this.stickers.get(id))\n                    return false;\n            }\n            entry = faces.next();\n        } while (!entry.done);\n        return true;\n    }\n    getValues() {\n        let values = {};\n        this.faces.forEach((stickerIds, key) => {\n            values[key] = stickerIds.map((id) => this.stickers.get(id));\n        });\n        return values;\n    }\n    /**\n     * override value of sticker on a face\n     *\n     * @param face - label\n     * @param index - index of sticker to set value of\n     * @param value - value to set the sticker to\n     */\n    setValue(face, index, value) {\n        if (!this.faces.has(face)) {\n            console.warn(`attempting to set sticker value on invalid face: ${face}`);\n            return;\n        }\n        let faceStickers = this.faces.get(face);\n        let stickerId = faceStickers[index];\n        if (!faceStickers) {\n            console.warn(`attempting to set sticker value for invalid sticker: ${face} ${index}`);\n            return;\n        }\n        console.log(stickerId, value);\n        this.stickers.set(stickerId, value);\n    }\n    /**\n     * parse and execute a sequence of moves\n     *\n     * @example\n     * ```typescript\n     * // assuming U, R, and F are turn labels\n     * simulator.alg(\"U R F\")\n     * ```\n     *\n     * @param alg - algorithm\n     */\n    alg(alg) {\n        // Default implementation\n        if (!alg) {\n            return;\n        }\n        alg.split(\" \").forEach((turn) => this.doTurn(turn));\n    }\n    /**\n     * reverses an algorithm then executes it\n     */\n    case(alg) {\n        // No default implementation\n    }\n}\n","// Standard Cube Colors\nexport const YELLOW = { value: \"#FFFF00\" };\nexport const RED = { value: \"#FF0000\" };\nexport const BLUE = { value: \"#0000FF\" };\nexport const WHITE = { value: \"#FFFFFF\" };\nexport const ORANGE = { value: \"#FFA500\" };\nexport const GREEN = { value: \"#00FF00\" };\n// Extra colors for megaminx\nexport const PURPLE = { value: \"#800080\" };\nexport const GREY = { value: \"#808080\" };\nexport const DARK_BLUE = { value: \"#00008B\" };\nexport const LIGHT_YELLOW = { value: \"#ffffb3\" };\nexport const LIGHT_GREEN = { value: \"#32CD32\" };\nexport const PINK = { value: \"#FF69B4\" };\nexport const BLACK = { value: \"#000000\" };\nexport const MASK_COLOR = { value: \"#404040\" };\n// Stickerless\nexport const YELLOW_STICKERLESS = {\n    value: \"#FFFF00\",\n    stroke: \"#DDDD00\",\n};\nexport const RED_STICKERLESS = { value: \"#FF0000\", stroke: \"#DD0000\" };\nexport const BLUE_STICKERLESS = { value: \"#0000FF\", stroke: \"#0000DD\" };\nexport const WHITE_STICKERLESS = { value: \"#FFFFFF\", stroke: \"#DDD\" };\nexport const ORANGE_STICKERLESS = {\n    value: \"#FFA500\",\n    stroke: \"#DD8500\",\n};\nexport const GREEN_STICKERLESS = {\n    value: \"#00FF00\",\n    stroke: \"#00DD00\",\n};\nexport const PURPLE_STICKERLESS = {\n    value: \"#800080\",\n    stroke: \"#5c005c\",\n};\nexport const GREY_STICKERLESS = { value: \"#808080\", stroke: \"#6b6b6b\" };\nexport const DARK_BLUE_STICKERLESS = {\n    value: \"#00008B\",\n    stroke: \"#000075\",\n};\nexport const LIGHT_YELLOW_STICKERLESS = {\n    value: \"#ffffb3\",\n    stroke: \"#e6e6a3\",\n};\nexport const LIGHT_GREEN_STICKERLESS = {\n    value: \"#32CD32\",\n    stroke: \"#2db32d\",\n};\nexport const PINK_STICKERLESS = { value: \"#FF69B4\", stroke: \"#de5b9c\" };\n","export var PIECE_TYPE;\n(function (PIECE_TYPE) {\n    PIECE_TYPE[PIECE_TYPE[\"CORNER\"] = 0] = \"CORNER\";\n    PIECE_TYPE[PIECE_TYPE[\"EDGE\"] = 1] = \"EDGE\";\n    PIECE_TYPE[PIECE_TYPE[\"MIDDLE\"] = 2] = \"MIDDLE\";\n})(PIECE_TYPE || (PIECE_TYPE = {}));\n","import { WHITE, RED, BLUE, GREEN, ORANGE, YELLOW } from \"./../colors\";\nimport { PIECE_TYPE } from \"./enum\";\nexport const ROTATION_VECTOR = [0.96875, -0.24803, 0];\nexport const TOP_COLOR = YELLOW;\nexport const BOTTOM_COLOR = WHITE;\nexport const FRONT_COLOR = RED;\nexport const LEFT_COLOR = BLUE;\nexport const RIGHT_COLOR = GREEN;\nexport const BACK_COLOR = ORANGE;\nexport const SOLVED_TOP_PIECES = [\n    { type: PIECE_TYPE.CORNER, colors: [TOP_COLOR, FRONT_COLOR, LEFT_COLOR] },\n    { type: PIECE_TYPE.EDGE, colors: [TOP_COLOR, LEFT_COLOR] },\n    { type: PIECE_TYPE.CORNER, colors: [TOP_COLOR, LEFT_COLOR, BACK_COLOR] },\n    { type: PIECE_TYPE.EDGE, colors: [TOP_COLOR, BACK_COLOR] },\n    { type: PIECE_TYPE.CORNER, colors: [TOP_COLOR, BACK_COLOR, RIGHT_COLOR] },\n    { type: PIECE_TYPE.EDGE, colors: [TOP_COLOR, RIGHT_COLOR] },\n    { type: PIECE_TYPE.CORNER, colors: [TOP_COLOR, RIGHT_COLOR, FRONT_COLOR] },\n    { type: PIECE_TYPE.EDGE, colors: [TOP_COLOR, FRONT_COLOR] },\n];\nexport const SOLVED_BOTTOM_PIECES = [\n    { type: PIECE_TYPE.EDGE, colors: [BOTTOM_COLOR, BACK_COLOR] },\n    { type: PIECE_TYPE.CORNER, colors: [BOTTOM_COLOR, BACK_COLOR, LEFT_COLOR] },\n    { type: PIECE_TYPE.EDGE, colors: [BOTTOM_COLOR, LEFT_COLOR] },\n    { type: PIECE_TYPE.CORNER, colors: [BOTTOM_COLOR, LEFT_COLOR, FRONT_COLOR] },\n    { type: PIECE_TYPE.EDGE, colors: [BOTTOM_COLOR, FRONT_COLOR] },\n    { type: PIECE_TYPE.CORNER, colors: [BOTTOM_COLOR, FRONT_COLOR, RIGHT_COLOR] },\n    { type: PIECE_TYPE.EDGE, colors: [BOTTOM_COLOR, RIGHT_COLOR] },\n    { type: PIECE_TYPE.CORNER, colors: [BOTTOM_COLOR, RIGHT_COLOR, BACK_COLOR] },\n];\n","const square1TurnRegex = /(\\/|\\((-?\\d),(-?\\d)\\))/g;\nexport function parseSquare1Algorithm(algorithm) {\n    let turns = [];\n    let match;\n    while ((match = square1TurnRegex.exec(algorithm))) {\n        if (match[0] === \"/\") {\n            turns.push({ slice: true });\n        }\n        else {\n            turns.push({\n                top: parseInt(match[2]),\n                bottom: parseInt(match[3]),\n            });\n        }\n    }\n    return turns;\n}\n","import { Simulator } from \"./../simulator\";\nimport { SOLVED_BOTTOM_PIECES } from \"./../../puzzles/square1/constants\";\nimport { PIECE_TYPE } from \"../../puzzles/square1/enum\";\nimport { SOLVED_TOP_PIECES } from \"../../puzzles/square1/constants\";\nimport { parseSquare1Algorithm } from \"../../algorithms/square1\";\nconst pieceValue = {\n    [PIECE_TYPE.CORNER]: 2,\n    [PIECE_TYPE.EDGE]: 1,\n};\nexport class Square1Simualtor extends Simulator {\n    constructor() {\n        super();\n        this.topLayer = JSON.parse(JSON.stringify(SOLVED_TOP_PIECES));\n        this.bottomLayer = JSON.parse(JSON.stringify(SOLVED_BOTTOM_PIECES));\n        this.middleRotated = false;\n    }\n    alg(alg) {\n        parseSquare1Algorithm(alg).forEach((move) => {\n            if (\"slice\" in move) {\n                this.slice();\n            }\n            else {\n                this.rotateTop(move.top);\n                this.rotateBottom(move.bottom);\n            }\n        });\n    }\n    case(alg) {\n        parseSquare1Algorithm(alg)\n            .reverse()\n            .forEach((move) => {\n            if (\"slice\" in move) {\n                this.slice();\n            }\n            else {\n                this.rotateTop(move.top * -1);\n                this.rotateBottom(move.bottom * -1);\n            }\n        });\n    }\n    slice() {\n        let topNum = 0;\n        let bottomNum = 0;\n        for (let i = this.topLayer.length, value = 0; i > 0 && value < 6; i--) {\n            value += pieceValue[this.topLayer[i - 1].type];\n            topNum++;\n        }\n        for (let i = this.bottomLayer.length, value = 0; i > 0 && value < 6; i--) {\n            value += pieceValue[this.bottomLayer[i - 1].type];\n            bottomNum++;\n        }\n        const topSlice = this.topLayer.splice(this.topLayer.length - topNum, this.topLayer.length);\n        const bottomSlice = this.bottomLayer.splice(this.bottomLayer.length - bottomNum, this.bottomLayer.length);\n        this.topLayer = this.topLayer.concat(bottomSlice);\n        this.bottomLayer = this.bottomLayer.concat(topSlice);\n        this.middleRotated = !this.middleRotated;\n    }\n    rotateTop(turns) {\n        while (turns != 0) {\n            if (turns < 0) {\n                const piece = this.topLayer.shift();\n                const value = pieceValue[piece.type];\n                if (Math.abs(turns) < value) {\n                    throw \"Invalid Square1 Move\";\n                }\n                this.topLayer.push(piece);\n                turns += value;\n            }\n            else {\n                const piece = this.topLayer.pop();\n                const value = pieceValue[piece.type];\n                if (Math.abs(turns) < value) {\n                    throw \"Invalid Square1 Move\";\n                }\n                this.topLayer.unshift(piece);\n                turns -= value;\n            }\n        }\n    }\n    rotateBottom(turns) {\n        while (turns != 0) {\n            if (turns < 0) {\n                const piece = this.bottomLayer.shift();\n                const value = pieceValue[piece.type];\n                if (Math.abs(turns) < value) {\n                    throw \"Invalid Square1 Move\";\n                }\n                this.bottomLayer.push(piece);\n                turns += value;\n            }\n            else {\n                const piece = this.bottomLayer.pop();\n                const value = pieceValue[piece.type];\n                if (Math.abs(turns) < value) {\n                    throw \"Invalid Square1 Move\";\n                }\n                this.bottomLayer.unshift(piece);\n                turns -= value;\n            }\n        }\n    }\n}\n","import { TurnType } from \"./algorithm\";\nconst skewbTurnRegex = /([LRUB])(\\'?)/g;\nconst DirectionToTurnType = {\n    \"\": TurnType.Clockwise,\n    \"'\": TurnType.CounterClockwise,\n};\nexport function parseSkewbAlgorithm(algorithm) {\n    let turns = [];\n    let match;\n    while ((match = skewbTurnRegex.exec(algorithm))) {\n        const rawUnit = match[1];\n        const rawDirection = match[2];\n        turns.push({\n            unit: rawUnit,\n            turnType: DirectionToTurnType[rawDirection],\n            slices: 1,\n        });\n    }\n    return turns;\n}\n","/**\n * Splits an array into chunks\n *\n * @param array original array\n * @param chunkSize\n *\n * @example\n * ```\n * chunkArray([1,2,3,4,5,6], 2)\n * // returns [[1,2], [3,4], [5,6]]\n * ```\n */\nexport function chunkArray(array, chunkSize) {\n    const newSize = Math.ceil(array.length / chunkSize);\n    return new Array(newSize)\n        .fill(null)\n        .map((_, index) => array.slice(index * chunkSize, (index + 1) * chunkSize));\n}\n/**\n * Generates an array of set size filled with a specific value\n *\n * @param length length of the array\n * @param value value to fill the array with\n */\nexport function fillArray(length, value) {\n    return new Array(length).fill(value);\n}\n","import { TurnType } from \"../../algorithms/algorithm\";\nimport { parseSkewbAlgorithm } from \"../../algorithms/skewb\";\nimport { fillArray } from \"../../utils/arrays\";\nimport { Simulator } from \"./../simulator\";\n/**\n * Simulates a standard skewb\n *\n * Imagine the faces like this\n * ```\n *      U\n *    L F R B\n *      D\n * ```\n *\n * each face has 5 sickers (1 center, 4 corners), stored as\n * an array. Each index of the array maps to stickers like\n * so, 0 being the center, 1-4 being the corners from top left\n * to bottom right\n * ```\n *      1   2\n *        0\n *      3   4\n * ```\n *\n * So all together the simulator stores information like\n * this\n * ```\n *          U1    U2\n *             U0\n *          U3    U4\n * L1    L2 F1    F2 R1    R2 B1    B2\n *    L0       F0       R0       B0\n * L3    L4 F3    F4 F3    F4 B3    B4\n *          D1    D2\n *             D0\n *          D3    D4\n * ```\n */\nexport class SkewbSimulator extends Simulator {\n    constructor() {\n        super();\n        const { stickerIds: top } = this.addFace(fillArray(5, \"top\"), \"top\");\n        const { stickerIds: front } = this.addFace(fillArray(5, \"front\"), \"front\");\n        const { stickerIds: right } = this.addFace(fillArray(5, \"right\"), \"right\");\n        const { stickerIds: bottom } = this.addFace(fillArray(5, \"bottom\"), \"bottom\");\n        const { stickerIds: back } = this.addFace(fillArray(5, \"back\"), \"back\");\n        const { stickerIds: left } = this.addFace(fillArray(5, \"left\"), \"left\");\n        // Skewb Notation https://www.worldcubeassociation.org/regulations/#12h\n        this.addTurn([\n            [right[0], back[0]],\n            [right[2], back[4]],\n            [right[3], back[1]],\n            [right[4], back[3]],\n            [back[0], bottom[0]],\n            [back[4], bottom[2]],\n            [back[1], bottom[3]],\n            [back[3], bottom[4]],\n            [bottom[0], right[0]],\n            [bottom[2], right[2]],\n            [bottom[3], right[3]],\n            [bottom[4], right[4]],\n            [front[4], top[2]],\n            [top[2], left[3]],\n            [left[3], front[4]],\n        ], \"R\");\n        this.addTurn([\n            [center(top), center(left)],\n            [topLeft(top), topLeft(left)],\n            [topRight(top), topRight(left)],\n            [bottomLeft(top), bottomLeft(left)],\n            [center(left), center(back)],\n            [topLeft(left), topRight(back)],\n            [topRight(left), bottomRight(back)],\n            [bottomLeft(left), topLeft(back)],\n            [center(back), center(top)],\n            [topRight(back), topLeft(top)],\n            [bottomRight(back), topRight(top)],\n            [topLeft(back), bottomLeft(top)],\n            [topRight(right), topLeft(front)],\n            [topLeft(front), bottomLeft(bottom)],\n            [bottomLeft(bottom), topRight(right)],\n        ], \"U\");\n        this.addTurn([\n            [center(left), center(front)],\n            [bottomLeft(left), topLeft(front)],\n            [topRight(left), bottomRight(front)],\n            [bottomRight(left), bottomLeft(front)],\n            [center(front), center(bottom)],\n            [topLeft(front), topRight(bottom)],\n            [bottomRight(front), bottomLeft(bottom)],\n            [bottomLeft(front), topLeft(bottom)],\n            [center(bottom), center(left)],\n            [topRight(bottom), bottomLeft(left)],\n            [bottomLeft(bottom), topRight(left)],\n            [topLeft(bottom), bottomRight(left)],\n            [bottomRight(back), bottomLeft(top)],\n            [bottomLeft(top), bottomLeft(right)],\n            [bottomLeft(right), bottomRight(back)],\n        ], \"L\");\n        this.addTurn([\n            [center(back), center(left)],\n            [topRight(back), bottomRight(left)],\n            [bottomLeft(back), topLeft(left)],\n            [bottomRight(back), bottomLeft(left)],\n            [center(left), center(bottom)],\n            [bottomRight(left), bottomRight(bottom)],\n            [topLeft(left), topLeft(bottom)],\n            [bottomLeft(left), bottomLeft(bottom)],\n            [center(bottom), center(back)],\n            [bottomRight(bottom), topRight(back)],\n            [topLeft(bottom), bottomLeft(back)],\n            [bottomLeft(bottom), bottomRight(back)],\n            [topLeft(top), bottomLeft(front)],\n            [bottomLeft(front), bottomRight(right)],\n            [bottomRight(right), topLeft(top)],\n        ], \"B\");\n    }\n    R(reverse) {\n        this.doTurn(\"R\", reverse);\n    }\n    U(reverse) {\n        this.doTurn(\"U\", reverse);\n    }\n    L(reverse) {\n        this.doTurn(\"L\", reverse);\n    }\n    B(reverse) {\n        this.doTurn(\"B\", reverse);\n    }\n    alg(alg) {\n        if (!alg) {\n            return;\n        }\n        this.doTurns(parseSkewbAlgorithm(alg));\n    }\n    case(alg) {\n        if (!alg) {\n            return;\n        }\n        let turns = parseSkewbAlgorithm(alg)\n            .reverse()\n            .map((turn) => (Object.assign(Object.assign({}, turn), { turnType: turn.turnType === TurnType.Clockwise\n                ? TurnType.CounterClockwise\n                : TurnType.Clockwise })));\n        this.doTurns(turns);\n    }\n    doTurns(turns) {\n        turns.forEach((turn) => {\n            let reverse = turn.turnType === TurnType.CounterClockwise;\n            switch (turn.unit) {\n                case \"R\":\n                    this.R(reverse);\n                    break;\n                case \"U\":\n                    this.U(reverse);\n                    break;\n                case \"L\":\n                    this.L(reverse);\n                    break;\n                case \"B\":\n                    this.B(reverse);\n                    break;\n            }\n        });\n    }\n}\nconst center = (face) => face[0];\nconst topLeft = (face) => face[1];\nconst topRight = (face) => face[2];\nconst bottomLeft = (face) => face[3];\nconst bottomRight = (face) => face[4];\n","import { TurnType } from \"./algorithm\";\nconst pyraminxTurnRegex = /([LlRrUuBb])(\\'?)/g;\nconst DirectionToTurnType = {\n    \"\": TurnType.Clockwise,\n    \"'\": TurnType.CounterClockwise,\n};\nexport function parsePyraminxAlgorithm(algorithm) {\n    let turns = [];\n    let match;\n    while ((match = pyraminxTurnRegex.exec(algorithm))) {\n        const rawUnit = match[1];\n        const rawDirection = match[2];\n        turns.push({\n            unit: rawUnit,\n            turnType: DirectionToTurnType[rawDirection],\n            slices: 1,\n        });\n    }\n    return turns;\n}\n","import { TurnType } from \"../../algorithms/algorithm\";\nimport { parsePyraminxAlgorithm } from \"../../algorithms/pyraminx\";\nimport { fillArray } from \"../../utils/arrays\";\nimport { Simulator } from \"./../simulator\";\nexport class PyraminxSimulator extends Simulator {\n    constructor() {\n        super();\n        const { stickerIds: U } = this.addFace(fillArray(9, \"top\"), \"top\");\n        const { stickerIds: L } = this.addFace(fillArray(9, \"left\"), \"left\");\n        const { stickerIds: R } = this.addFace(fillArray(9, \"right\"), \"right\");\n        const { stickerIds: B } = this.addFace(fillArray(9, \"back\"), \"back\");\n        // Tip turns\n        this.addTurn([\n            [U[8], R[8]],\n            [R[8], L[8]],\n            [L[8], U[8]],\n        ], \"u\");\n        this.addTurn([\n            [L[0], B[8]],\n            [B[8], U[4]],\n            [U[4], L[0]],\n        ], \"l\");\n        this.addTurn([\n            [L[4], R[0]],\n            [R[0], B[4]],\n            [B[4], L[4]],\n        ], \"r\");\n        this.addTurn([\n            [R[4], U[0]],\n            [U[0], B[0]],\n            [B[0], R[4]],\n        ], \"b\");\n        // Full turns\n        this.addTurn([\n            [U[5], R[5]],\n            [U[6], R[6]],\n            [U[7], R[7]],\n            [U[8], R[8]],\n            [R[5], L[5]],\n            [R[6], L[6]],\n            [R[7], L[7]],\n            [R[8], L[8]],\n            [L[5], U[5]],\n            [L[6], U[6]],\n            [L[7], U[7]],\n            [L[8], U[8]],\n        ], \"U\");\n        this.addTurn([\n            [L[0], B[8]],\n            [L[1], B[6]],\n            [L[2], B[5]],\n            [L[5], B[7]],\n            [B[8], U[4]],\n            [B[6], U[3]],\n            [B[5], U[7]],\n            [B[7], U[2]],\n            [U[4], L[0]],\n            [U[3], L[1]],\n            [U[7], L[2]],\n            [U[2], L[5]],\n        ], \"L\");\n        this.addTurn([\n            [L[2], R[5]],\n            [L[3], R[1]],\n            [L[4], R[0]],\n            [L[7], R[2]],\n            [R[5], B[2]],\n            [R[1], B[3]],\n            [R[0], B[4]],\n            [R[2], B[7]],\n            [B[2], L[2]],\n            [B[3], L[3]],\n            [B[4], L[4]],\n            [B[7], L[7]],\n        ], \"R\");\n        this.addTurn([\n            [R[2], U[5]],\n            [R[3], U[1]],\n            [R[4], U[0]],\n            [R[7], U[2]],\n            [U[5], B[5]],\n            [U[1], B[1]],\n            [U[0], B[0]],\n            [U[2], B[2]],\n            [B[5], R[2]],\n            [B[1], R[3]],\n            [B[0], R[4]],\n            [B[2], R[7]],\n        ], \"B\");\n    }\n    U(reverse) {\n        this.doTurn(\"U\", reverse);\n    }\n    R(reverse) {\n        this.doTurn(\"R\", reverse);\n    }\n    L(reverse) {\n        this.doTurn(\"L\", reverse);\n    }\n    B(reverse) {\n        this.doTurn(\"B\", reverse);\n    }\n    u(reverse) {\n        this.doTurn(\"u\", reverse);\n    }\n    r(reverse) {\n        this.doTurn(\"r\", reverse);\n    }\n    l(reverse) {\n        this.doTurn(\"l\", reverse);\n    }\n    b(reverse) {\n        this.doTurn(\"b\", reverse);\n    }\n    alg(alg) {\n        if (!alg) {\n            return;\n        }\n        this.doTurns(parsePyraminxAlgorithm(alg));\n    }\n    case(alg) {\n        if (!alg) {\n            return;\n        }\n        let turns = parsePyraminxAlgorithm(alg)\n            .reverse()\n            .map((turn) => (Object.assign(Object.assign({}, turn), { turnType: turn.turnType === TurnType.Clockwise\n                ? TurnType.CounterClockwise\n                : TurnType.Clockwise })));\n        this.doTurns(turns);\n    }\n    doTurns(turns) {\n        turns.forEach((turn) => {\n            let reverse = turn.turnType === TurnType.CounterClockwise;\n            switch (turn.unit) {\n                case \"R\":\n                    this.R(reverse);\n                    break;\n                case \"r\":\n                    this.r(reverse);\n                    break;\n                case \"U\":\n                    this.U(reverse);\n                    break;\n                case \"u\":\n                    this.u(reverse);\n                    break;\n                case \"L\":\n                    this.L(reverse);\n                    break;\n                case \"l\":\n                    this.l(reverse);\n                    break;\n                case \"B\":\n                    this.B(reverse);\n                    break;\n                case \"b\":\n                    this.b(reverse);\n                    break;\n            }\n        });\n    }\n}\n","export const MEGAMINX_FACES = [\n    // Front\n    \"U\",\n    \"R\",\n    \"F\",\n    \"dr\",\n    \"dl\",\n    \"L\",\n    // Back\n    \"d\",\n    \"br\",\n    \"BR\",\n    \"BL\",\n    \"bl\",\n    \"b\",\n];\n","import { TurnType } from \"./algorithm\";\nconst megaminxStefanPochmann = /([RD])(\\+\\+|\\-\\-)|(U)(\\'?)/g;\n// TODO\nconst megaminxAlgRegex = /([FRU])/g;\nvar PochmannDirections;\n(function (PochmannDirections) {\n    PochmannDirections[\"Clockwise\"] = \"++\";\n    PochmannDirections[\"CounterClockwise\"] = \"--\";\n    PochmannDirections[\"UClockwise\"] = \"\";\n    PochmannDirections[\"UCounter\"] = \"'\";\n})(PochmannDirections || (PochmannDirections = {}));\nconst DirectionToTurnType = {\n    [PochmannDirections.Clockwise]: TurnType.Clockwise,\n    [PochmannDirections.CounterClockwise]: TurnType.CounterClockwise,\n    [PochmannDirections.UClockwise]: TurnType.Clockwise,\n    [PochmannDirections.UCounter]: TurnType.CounterClockwise,\n};\n/**\n * Takes in a megaminx algorithm in stefan pochmann notation as a string\n * and parses the turns from it\n *\n * algorithm string format should be moves separated by a single space\n *\n * @example\n * ```typescript\n * parseMegaminxAlgorithm(\"D++ R-- D-- U\")\n * ```\n *\n * @see https://www.worldcubeassociation.org/regulations/#article-12-notation\n */\nexport function parseMegaminxAlgorithm(algorithm) {\n    if (!algorithm) {\n        return [];\n    }\n    let turns = [];\n    let match;\n    while ((match = megaminxStefanPochmann.exec(algorithm))) {\n        const rawUnit = match[1] || match[3];\n        const rawDirection = match[2] || match[4];\n        turns.push({\n            unit: rawUnit,\n            turnType: DirectionToTurnType[rawDirection],\n            slices: 1,\n        });\n    }\n    return turns;\n}\n","import { TurnType } from \"./../../algorithms/algorithm\";\nimport { MEGAMINX_FACES } from \"./constants\";\nimport { Simulator } from \"./../simulator\";\nimport { fillArray } from \"../../utils/arrays\";\nimport { parseMegaminxAlgorithm } from \"../../algorithms/megaminx\";\n/**\n * Simulator to define megaminx type puzzles\n *\n * Currently only standard megaminx size supported.\n */\nexport class MegaminxSimulator extends Simulator {\n    constructor() {\n        super();\n        MEGAMINX_FACES.forEach((faceName) => {\n            this.addFace(fillArray(11, faceName), faceName);\n        });\n        const U = this.faces.get(\"U\"); // White\n        const R = this.faces.get(\"R\"); // Blue\n        const F = this.faces.get(\"F\"); // Red\n        const dr = this.faces.get(\"dr\"); // Pink\n        const dl = this.faces.get(\"dl\"); // Light Yellow\n        const L = this.faces.get(\"L\"); // Green\n        const d = this.faces.get(\"d\"); // Gray\n        const br = this.faces.get(\"br\"); // Light Green\n        const BR = this.faces.get(\"BR\"); // Yellow\n        const BL = this.faces.get(\"BL\"); // Purple\n        const bl = this.faces.get(\"bl\"); // Dark Blue\n        const b = this.faces.get(\"b\"); // Orange\n        // R\n        this.addTurn([\n            [F[2], U[6]],\n            [F[1], U[5]],\n            [F[10], U[4]],\n            [U[6], BR[10]],\n            [U[5], BR[9]],\n            [U[4], BR[8]],\n            [BR[10], br[8]],\n            [BR[9], br[7]],\n            [BR[8], br[6]],\n            [br[8], dr[2]],\n            [br[7], dr[1]],\n            [br[6], dr[10]],\n            [dr[2], F[2]],\n            [dr[1], F[1]],\n            [dr[10], F[10]],\n            ...makeFaceTurnDefinitions(R),\n        ], \"R\");\n        // F\n        this.addTurn([\n            [U[2], R[2]],\n            [U[3], R[3]],\n            [U[4], R[4]],\n            [R[2], dr[2]],\n            [R[3], dr[3]],\n            [R[4], dr[4]],\n            [dr[2], dl[2]],\n            [dr[3], dl[3]],\n            [dr[4], dl[4]],\n            [dl[2], L[2]],\n            [dl[3], L[3]],\n            [dl[4], L[4]],\n            [L[2], U[2]],\n            [L[3], U[3]],\n            [L[4], U[4]],\n            ...makeFaceTurnDefinitions(F),\n        ], \"F\");\n        // U\n        this.addTurn([\n            [F[2], L[4]],\n            [F[3], L[5]],\n            [F[4], L[6]],\n            [L[4], BL[8]],\n            [L[5], BL[9]],\n            [L[6], BL[10]],\n            [BL[8], BR[6]],\n            [BL[9], BR[7]],\n            [BL[10], BR[8]],\n            [BR[6], R[10]],\n            [BR[7], R[1]],\n            [BR[8], R[2]],\n            [R[10], F[2]],\n            [R[1], F[3]],\n            [R[2], F[4]],\n            ...makeFaceTurnDefinitions(U),\n        ], \"U\");\n        // L\n        this.addTurn([\n            [F[4], dl[4]],\n            [F[5], dl[5]],\n            [F[6], dl[6]],\n            [dl[4], bl[8]],\n            [dl[5], bl[9]],\n            [dl[6], bl[10]],\n            [bl[8], BL[6]],\n            [bl[9], BL[7]],\n            [bl[10], BL[8]],\n            [BL[6], U[10]],\n            [BL[7], U[1]],\n            [BL[8], U[2]],\n            [U[10], F[4]],\n            [U[1], F[5]],\n            [U[2], F[6]],\n            ...makeFaceTurnDefinitions(L),\n        ], \"L\");\n        // BR\n        this.addTurn([\n            [U[6], BL[10]],\n            [U[7], BL[1]],\n            [U[8], BL[2]],\n            [BL[10], b[8]],\n            [BL[1], b[9]],\n            [BL[2], b[10]],\n            [b[8], br[4]],\n            [b[9], br[5]],\n            [b[10], br[6]],\n            [br[4], R[8]],\n            [br[5], R[9]],\n            [br[6], R[10]],\n            [R[8], U[6]],\n            [R[9], U[7]],\n            [R[10], U[8]],\n            ...makeFaceTurnDefinitions(BR),\n        ], \"BR\");\n        // BL\n        this.addTurn([\n            [U[8], L[6]],\n            [U[9], L[7]],\n            [U[10], L[8]],\n            [L[6], bl[10]],\n            [L[7], bl[1]],\n            [L[8], bl[2]],\n            [bl[10], b[6]],\n            [bl[1], b[7]],\n            [bl[2], b[8]],\n            [b[6], BR[4]],\n            [b[7], BR[5]],\n            [b[8], BR[6]],\n            [BR[4], U[8]],\n            [BR[5], U[9]],\n            [BR[6], U[10]],\n            ...makeFaceTurnDefinitions(BL),\n        ], \"BL\");\n        // dr\n        this.addTurn([\n            [F[8], R[4]],\n            [F[9], R[5]],\n            [F[10], R[6]],\n            [R[4], br[8]],\n            [R[5], br[9]],\n            [R[6], br[10]],\n            [br[8], d[6]],\n            [br[9], d[7]],\n            [br[10], d[8]],\n            [d[6], dl[10]],\n            [d[7], dl[1]],\n            [d[8], dl[2]],\n            [dl[10], F[8]],\n            [dl[1], F[9]],\n            [dl[2], F[10]],\n            ...makeFaceTurnDefinitions(dr),\n        ], \"dr\");\n        // dl\n        this.addTurn([\n            [F[6], dr[4]],\n            [F[7], dr[5]],\n            [F[8], dr[6]],\n            [dr[4], d[8]],\n            [dr[5], d[9]],\n            [dr[6], d[10]],\n            [d[8], bl[6]],\n            [d[9], bl[7]],\n            [d[10], bl[8]],\n            [bl[6], L[10]],\n            [bl[7], L[1]],\n            [bl[8], L[2]],\n            [L[10], F[6]],\n            [L[1], F[7]],\n            [L[2], F[8]],\n            ...makeFaceTurnDefinitions(dl),\n        ], \"dl\");\n        // d\n        this.addTurn([\n            [br[10], b[2]],\n            [br[1], b[3]],\n            [br[2], b[4]],\n            [b[2], bl[4]],\n            [b[3], bl[5]],\n            [b[4], bl[6]],\n            [bl[4], dl[8]],\n            [bl[5], dl[9]],\n            [bl[6], dl[10]],\n            [dl[8], dr[6]],\n            [dl[9], dr[7]],\n            [dl[10], dr[8]],\n            [dr[6], br[10]],\n            [dr[7], br[1]],\n            [dr[8], br[2]],\n            ...makeFaceTurnDefinitions(d),\n        ], \"d\");\n        // br\n        this.addTurn([\n            [b[10], d[4]],\n            [b[1], d[5]],\n            [b[2], d[6]],\n            [d[4], dr[8]],\n            [d[5], dr[9]],\n            [d[6], dr[10]],\n            [dr[8], R[6]],\n            [dr[9], R[7]],\n            [dr[10], R[8]],\n            [R[6], BR[10]],\n            [R[7], BR[1]],\n            [R[8], BR[2]],\n            [BR[10], b[10]],\n            [BR[1], b[1]],\n            [BR[2], b[2]],\n            ...makeFaceTurnDefinitions(br),\n        ], \"br\");\n        // bl\n        this.addTurn([\n            [BL[4], L[8]],\n            [BL[5], L[9]],\n            [BL[6], L[10]],\n            [L[8], dl[6]],\n            [L[9], dl[7]],\n            [L[10], dl[8]],\n            [dl[6], d[10]],\n            [dl[7], d[1]],\n            [dl[8], d[2]],\n            [d[10], b[4]],\n            [d[1], b[5]],\n            [d[2], b[6]],\n            [b[4], BL[4]],\n            [b[5], BL[5]],\n            [b[6], BL[6]],\n            ...makeFaceTurnDefinitions(bl),\n        ], \"bl\");\n        // b\n        this.addTurn([\n            [br[2], BR[2]],\n            [br[3], BR[3]],\n            [br[4], BR[4]],\n            [BR[2], BL[2]],\n            [BR[3], BL[3]],\n            [BR[4], BL[4]],\n            [BL[2], bl[2]],\n            [BL[3], bl[3]],\n            [BL[4], bl[4]],\n            [bl[2], d[2]],\n            [bl[3], d[3]],\n            [bl[4], d[4]],\n            [d[2], br[2]],\n            [d[3], br[3]],\n            [d[4], br[4]],\n            ...makeFaceTurnDefinitions(b),\n        ], \"b\");\n        // \"Pochmann notation\"\n        // D++ / D--\n        this.addTurn([\n            // Top Layer\n            [F[0], R[0]],\n            [F[1], R[9]],\n            [F[5], R[3]],\n            [F[6], R[4]],\n            [F[7], R[5]],\n            [F[8], R[6]],\n            [F[9], R[7]],\n            [F[10], R[8]],\n            [R[0], BR[0]],\n            [R[3], BR[9]],\n            [R[4], BR[10]],\n            [R[5], BR[1]],\n            [R[6], BR[2]],\n            [R[7], BR[3]],\n            [R[8], BR[4]],\n            [R[9], BR[5]],\n            [BR[0], BL[0]],\n            [BR[9], BL[1]],\n            [BR[10], BL[2]],\n            [BR[1], BL[3]],\n            [BR[2], BL[4]],\n            [BR[3], BL[5]],\n            [BR[4], BL[6]],\n            [BR[5], BL[7]],\n            [BL[0], L[0]],\n            [BL[1], L[7]],\n            [BL[2], L[8]],\n            [BL[3], L[9]],\n            [BL[4], L[10]],\n            [BL[5], L[1]],\n            [BL[6], L[2]],\n            [BL[7], L[3]],\n            [L[0], F[0]],\n            [L[7], F[5]],\n            [L[8], F[6]],\n            [L[9], F[7]],\n            [L[10], F[8]],\n            [L[1], F[9]],\n            [L[2], F[10]],\n            [L[3], F[1]],\n            // Bottom Layer\n            [dr[0], br[0]],\n            [dr[1], br[5]],\n            [dr[2], br[6]],\n            [dr[3], br[7]],\n            [dr[4], br[8]],\n            [dr[5], br[9]],\n            [dr[6], br[10]],\n            [dr[7], br[1]],\n            [dr[8], br[2]],\n            [dr[9], br[3]],\n            [dr[10], br[4]],\n            [br[0], b[0]],\n            [br[1], b[3]],\n            [br[2], b[4]],\n            [br[3], b[5]],\n            [br[4], b[6]],\n            [br[5], b[7]],\n            [br[6], b[8]],\n            [br[7], b[9]],\n            [br[8], b[10]],\n            [br[9], b[1]],\n            [br[10], b[2]],\n            [b[0], bl[0]],\n            [b[1], bl[3]],\n            [b[2], bl[4]],\n            [b[3], bl[5]],\n            [b[4], bl[6]],\n            [b[5], bl[7]],\n            [b[6], bl[8]],\n            [b[7], bl[9]],\n            [b[8], bl[10]],\n            [b[9], bl[1]],\n            [b[10], bl[2]],\n            [bl[0], dl[0]],\n            [bl[1], dl[5]],\n            [bl[2], dl[6]],\n            [bl[3], dl[7]],\n            [bl[4], dl[8]],\n            [bl[5], dl[9]],\n            [bl[6], dl[10]],\n            [bl[7], dl[1]],\n            [bl[8], dl[2]],\n            [bl[9], dl[3]],\n            [bl[10], dl[4]],\n            [dl[0], dr[0]],\n            [dl[1], dr[9]],\n            [dl[2], dr[10]],\n            [dl[3], dr[1]],\n            [dl[4], dr[2]],\n            [dl[5], dr[3]],\n            [dl[6], dr[4]],\n            [dl[7], dr[5]],\n            [dl[8], dr[6]],\n            [dl[9], dr[7]],\n            [dl[10], dr[8]],\n            ...makeFaceTurnDefinitions(d),\n        ], \"D++\");\n        // R++ / R--\n        this.addTurn([\n            // Top Layer\n            [F[0], U[0]],\n            [F[7], U[3]],\n            [F[8], U[4]],\n            [F[9], U[5]],\n            [F[10], U[6]],\n            [F[1], U[7]],\n            [F[2], U[8]],\n            [F[3], U[9]],\n            [U[0], BL[0]],\n            [U[3], BL[9]],\n            [U[4], BL[10]],\n            [U[5], BL[1]],\n            [U[6], BL[2]],\n            [U[7], BL[3]],\n            [U[8], BL[4]],\n            [U[9], BL[5]],\n            [BL[0], bl[0]],\n            [BL[9], bl[1]],\n            [BL[10], bl[2]],\n            [BL[1], bl[3]],\n            [BL[2], bl[4]],\n            [BL[3], bl[5]],\n            [BL[4], bl[6]],\n            [BL[5], bl[7]],\n            [bl[0], dl[0]],\n            [bl[1], dl[7]],\n            [bl[2], dl[8]],\n            [bl[3], dl[9]],\n            [bl[4], dl[10]],\n            [bl[5], dl[1]],\n            [bl[6], dl[2]],\n            [bl[7], dl[3]],\n            [dl[0], F[0]],\n            [dl[7], F[7]],\n            [dl[8], F[8]],\n            [dl[9], F[9]],\n            [dl[10], F[10]],\n            [dl[1], F[1]],\n            [dl[2], F[2]],\n            [dl[3], F[3]],\n            // Bottom Layer\n            [dr[0], R[0]],\n            [dr[1], R[9]],\n            [dr[2], R[10]],\n            [dr[3], R[1]],\n            [dr[4], R[2]],\n            [dr[5], R[3]],\n            [dr[6], R[4]],\n            [dr[7], R[5]],\n            [dr[8], R[6]],\n            [dr[9], R[7]],\n            [dr[10], R[8]],\n            [R[0], BR[0]],\n            [R[1], BR[5]],\n            [R[2], BR[6]],\n            [R[3], BR[7]],\n            [R[4], BR[8]],\n            [R[5], BR[9]],\n            [R[6], BR[10]],\n            [R[7], BR[1]],\n            [R[8], BR[2]],\n            [R[9], BR[3]],\n            [R[10], BR[4]],\n            [BR[0], b[0]],\n            [BR[1], b[1]],\n            [BR[2], b[2]],\n            [BR[3], b[3]],\n            [BR[4], b[4]],\n            [BR[5], b[5]],\n            [BR[6], b[6]],\n            [BR[7], b[7]],\n            [BR[8], b[8]],\n            [BR[9], b[9]],\n            [BR[10], b[10]],\n            [b[0], d[0]],\n            [b[1], d[5]],\n            [b[2], d[6]],\n            [b[3], d[7]],\n            [b[4], d[8]],\n            [b[5], d[9]],\n            [b[6], d[10]],\n            [b[7], d[1]],\n            [b[8], d[2]],\n            [b[9], d[3]],\n            [b[10], d[4]],\n            [d[0], dr[0]],\n            [d[1], dr[5]],\n            [d[2], dr[6]],\n            [d[3], dr[7]],\n            [d[4], dr[8]],\n            [d[5], dr[9]],\n            [d[6], dr[10]],\n            [d[7], dr[1]],\n            [d[8], dr[2]],\n            [d[9], dr[3]],\n            [d[10], dr[4]],\n            ...makeFaceTurnDefinitions(br),\n        ], \"R++\");\n    }\n    U(reverse) {\n        this.doTurn(\"U\", reverse);\n    }\n    R(reverse) {\n        this.doTurn(\"R\", reverse);\n    }\n    F(reverse) {\n        this.doTurn(\"F\", reverse);\n    }\n    dr(reverse) {\n        this.doTurn(\"dr\", reverse);\n    }\n    dl(reverse) {\n        this.doTurn(\"dl\", reverse);\n    }\n    L(reverse) {\n        this.doTurn(\"L\", reverse);\n    }\n    d(reverse) {\n        this.doTurn(\"d\", reverse);\n    }\n    br(reverse) {\n        this.doTurn(\"br\", reverse);\n    }\n    BR(reverse) {\n        this.doTurn(\"BR\", reverse);\n    }\n    BL(reverse) {\n        this.doTurn(\"BL\", reverse);\n    }\n    bl(reverse) {\n        this.doTurn(\"bl\", reverse);\n    }\n    b(reverse) {\n        this.doTurn(\"b\", reverse);\n    }\n    /**\n     * D++ for Pochmann notation. D-- if reverse = false\n     */\n    Dxx(reverse) {\n        this.doTurn(\"D++\", reverse);\n    }\n    /**\n     * R++ for Pochmann notation. R-- if reverse = false\n     */\n    Rxx(reverse) {\n        this.doTurn(\"R++\", reverse);\n    }\n    /**\n     * Parses and executes a megaminx algorithm using WCA standard notation\n     *\n     * @see https://www.stefan-pochmann.info/spocc/other_stuff/tools/scramble_megaminx/)\n     * @see https://www.worldcubeassociation.org/regulations/#12d\n     *\n     * @param alg megaminx algorithm to parse\n     * @example\n     * ```\n     * R-- D++ R++ U'\n     * ```\n     */\n    alg(alg) {\n        if (!alg) {\n            return;\n        }\n        // pochmann notation\n        this.doTurns(parseMegaminxAlgorithm(alg));\n    }\n    case(alg) {\n        if (!alg) {\n            return;\n        }\n        let turns = parseMegaminxAlgorithm(alg)\n            .reverse()\n            .map((turn) => (Object.assign(Object.assign({}, turn), { turnType: turn.turnType === TurnType.Clockwise\n                ? TurnType.CounterClockwise\n                : TurnType.Clockwise })));\n        this.doTurns(turns);\n    }\n    doTurns(turns) {\n        turns.forEach((turn) => {\n            let reverse = turn.turnType === TurnType.CounterClockwise;\n            switch (turn.unit) {\n                case \"R\":\n                    this.Rxx(reverse);\n                    break;\n                case \"D\":\n                    this.Dxx(reverse);\n                    break;\n                case \"U\":\n                    this.U(reverse);\n                    break;\n            }\n        });\n    }\n}\n/**\n * Generates turn definitions for rotating a megaminx face clockwise\n * @param face array of sticker ids\n */\nfunction makeFaceTurnDefinitions(face) {\n    return [\n        // Edges\n        [face[1], face[9]],\n        [face[9], face[7]],\n        [face[7], face[5]],\n        [face[5], face[3]],\n        [face[3], face[1]],\n        // Corners\n        [face[2], face[10]],\n        [face[10], face[8]],\n        [face[8], face[6]],\n        [face[6], face[4]],\n        [face[4], face[2]],\n    ];\n}\n","export var SIMULATOR_FACE;\n(function (SIMULATOR_FACE) {\n    SIMULATOR_FACE[\"U\"] = \"U\";\n    SIMULATOR_FACE[\"R\"] = \"R\";\n    SIMULATOR_FACE[\"F\"] = \"F\";\n    SIMULATOR_FACE[\"D\"] = \"D\";\n    SIMULATOR_FACE[\"L\"] = \"L\";\n    SIMULATOR_FACE[\"B\"] = \"B\";\n})(SIMULATOR_FACE || (SIMULATOR_FACE = {}));\nexport const CUBE_FACES = [\n    SIMULATOR_FACE.U,\n    SIMULATOR_FACE.R,\n    SIMULATOR_FACE.F,\n    SIMULATOR_FACE.D,\n    SIMULATOR_FACE.L,\n    SIMULATOR_FACE.B,\n];\nexport var CUBE_AXIS;\n(function (CUBE_AXIS) {\n    CUBE_AXIS[\"X\"] = \"X\";\n    CUBE_AXIS[\"Y\"] = \"Y\";\n    CUBE_AXIS[\"Z\"] = \"Z\";\n})(CUBE_AXIS || (CUBE_AXIS = {}));\n// Faces that wrap around a given axis\nexport const CUBE_AXIS_FACES = {\n    X: [SIMULATOR_FACE.U, SIMULATOR_FACE.B, SIMULATOR_FACE.D, SIMULATOR_FACE.F],\n    Y: [SIMULATOR_FACE.L, SIMULATOR_FACE.B, SIMULATOR_FACE.R, SIMULATOR_FACE.F],\n    Z: [SIMULATOR_FACE.L, SIMULATOR_FACE.U, SIMULATOR_FACE.R, SIMULATOR_FACE.D],\n};\n// Face's orientation related to other faces on a given axis\n// the number represents the number of turns necessary\n// to orient the face in the same direction\nexport const AXIS_ORIENTATION = {\n    X: {\n        [SIMULATOR_FACE.U]: 0,\n        [SIMULATOR_FACE.B]: 2,\n        [SIMULATOR_FACE.F]: 0,\n        [SIMULATOR_FACE.D]: 0,\n    },\n    Y: {\n        [SIMULATOR_FACE.B]: -1,\n        [SIMULATOR_FACE.F]: -1,\n        [SIMULATOR_FACE.L]: -1,\n        [SIMULATOR_FACE.R]: -1,\n    },\n    Z: {\n        [SIMULATOR_FACE.U]: -1,\n        [SIMULATOR_FACE.D]: 1,\n        [SIMULATOR_FACE.L]: 2,\n        [SIMULATOR_FACE.R]: 0,\n    },\n};\n// True if faces are in reverse orientation\n// from the axis it's on (X, Y, Z).\n// For example D turns on the Y axis, but the\n// y axis layer turns clockwise based on the U\n// face, so D needs to be reversed\nexport const AXIS_FACE_ORIENTATION = {\n    [SIMULATOR_FACE.U]: false,\n    [SIMULATOR_FACE.R]: false,\n    [SIMULATOR_FACE.F]: false,\n    [SIMULATOR_FACE.D]: true,\n    [SIMULATOR_FACE.L]: true,\n    [SIMULATOR_FACE.B]: true,\n};\n","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {ReadonlyVec3} a The first operand\r\n * @param {ReadonlyVec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import { vec3 } from \"gl-matrix\";\nexport function degreesToRadians(degrees) {\n    return (Math.PI * degrees) / 180;\n}\nexport function polarToCartesian(radius, theta) {\n    const x = radius * Math.cos(theta);\n    const y = radius * Math.sin(theta);\n    return [x, y];\n}\nexport function lineSegmentLength(p1, p2) {\n    return Math.sqrt(Math.pow(p2[1] - p1[1], 2) + Math.pow(p2[0] - p1[0], 2));\n}\n/**\n * Calculates the radius of a circle inscribing a regular\n * pentagon given the side length\n */\nexport function pentagonInRadius(length) {\n    return length / (2 * Math.tan(Math.PI / 5));\n}\n/**\n * Calculates the radius of a circle circumscribing a\n * regular pentagon given the side length\n */\nexport function pentagonOutRadius(length) {\n    return length / (2 * Math.sin(Math.PI / 5));\n}\n/**\n * Calculates the radius of the sphere that inscribes a\n * regular dodecahedron given the side length\n */\nexport function dodecahedronInRadius(length) {\n    return (length / 2) * Math.sqrt(5 / 2 + (11 / 10) * Math.sqrt(5));\n}\nexport function calculateCentroid(vertices) {\n    let cx = 0, cy = 0, cz = 0;\n    vertices.forEach((vertex) => {\n        cx += vertex[0];\n        cy += vertex[1];\n        cz += vertex[2];\n    });\n    cx /= vertices.length;\n    cy /= vertices.length;\n    cz /= vertices.length;\n    return vec3.clone([cx, cy, cz]);\n}\n/**\n * generates an array with values in a given range by step\n *\n * ex. range(1, 5) -> [1, 2, 3, 4, 5]\n * ex. range(5, 2) -> [5, 4, 3, 2]\n *\n * @param from start of range\n * @param to end of range\n */\nexport function range(from, to) {\n    if (from === to) {\n        return [from];\n    }\n    const increment = from < to ? 1 : -1;\n    let values = [];\n    for (let current = from; current != to; current += increment) {\n        values.push(current);\n    }\n    values.push(to);\n    return values;\n}\n","import { CubeAlgorithmUnit } from \"./../../algorithms/cube\";\nimport { fillArray } from \"../../utils/arrays\";\nimport { CUBE_FACES, CUBE_AXIS, CUBE_AXIS_FACES, AXIS_ORIENTATION, SIMULATOR_FACE, AXIS_FACE_ORIENTATION, } from \"./constants\";\nimport { Simulator } from \"../simulator\";\nimport { range } from \"../../math/utils\";\nimport { parseCubeAlgorithm } from \"../../algorithms/cube\";\nimport { TurnType } from \"../../algorithms/algorithm\";\nexport class RubiksCubeSimulator extends Simulator {\n    constructor(size) {\n        super();\n        this.size = size;\n        this.gridSize = size * size;\n        CUBE_FACES.forEach((faceName) => {\n            // Create stickers for face\n            this.addFace(fillArray(this.gridSize, faceName), faceName);\n            const faceChanges = this.makeFaceTurnDefinitions(faceName);\n            // Create rotation for stickers on face only\n            this.addTurn(faceChanges, faceName);\n        });\n        // Create rotations for stickers on each layer\n        // around each turnable axis\n        [CUBE_AXIS.X, CUBE_AXIS.Y, CUBE_AXIS.Z].forEach((axis) => {\n            for (let column = 0; column < this.size; column++) {\n                let layerChanges = [];\n                CUBE_AXIS_FACES[axis].forEach((faceName, i) => {\n                    const nextFaceName = CUBE_AXIS_FACES[axis][(i + 1) % CUBE_AXIS_FACES[axis].length];\n                    const nextFace = this.faces.get(nextFaceName);\n                    const currentFace = this.faces.get(faceName);\n                    for (let row = 0; row < this.size; row++) {\n                        const stickerIndex = this.size * row + column;\n                        const sticker1 = currentFace[this.axisAlignedSticker(axis, faceName, stickerIndex)];\n                        const sticker2 = nextFace[this.axisAlignedSticker(axis, nextFaceName, stickerIndex)];\n                        layerChanges.push([sticker1, sticker2]);\n                    }\n                });\n                this.addTurn(layerChanges, `${axis}-${column}`);\n            }\n        });\n    }\n    /**\n     * Makes turn definitions for a face of the cube\n     *\n     * @param faceName the label of the face to make turn definitions\n     * @example returning turn definitions for stickers on a 2x2\n     * ```\n     * addFace(['y', 'y', 'y', 'y'], 'U');\n     * // returns { faceId: 'U', stickerIds: ['1','2','3','4'] }\n     *\n     * makeTurnDefinitions('U');\n     * // returns [\n     * //   ['1','2'],\n     * //   ['2','4'],\n     * //   ['3','1'],\n     * //   ['4','3']\n     * // ]\n     * ```\n     */\n    makeFaceTurnDefinitions(faceName) {\n        const stickerIds = this.faces.get(faceName);\n        return stickerIds.map((stickerId, i) => [\n            stickerId,\n            stickerIds[this.clockwiseSticker(i)],\n        ]);\n    }\n    /**\n     * Given sticker i return the index it will go to\n     * after rotating clockwise\n     *\n     * ex. stickers are stored in an array but represent a grid\n     * so, for a 3x3 sticker index 0 will rotate to 2, 1 to 5, etc...\n     *\n     * ```\n     *  0 | 1 | 2\n     *  ----------\n     *  3 | 4 | 5\n     *  ----------\n     *  6 | 7 | 8\n     * ```\n     */\n    clockwiseSticker(stickerIndex) {\n        return (((stickerIndex + 1) * this.size) % (this.gridSize + 1)) - 1;\n    }\n    /**\n     * Given sticker i return the index it will go to\n     * after rotating counterclockwise\n     */\n    counterClockwiseSticker(stickerIndex) {\n        return this.oppositeSticker(this.clockwiseSticker(stickerIndex));\n    }\n    /**\n     * Given sticker i return the index it will go to\n     * after rotating 180 degrees\n     */\n    oppositeSticker(stickerIndex) {\n        return this.gridSize - (stickerIndex + 1);\n    }\n    axisAlignedSticker(axis, face, stickerIndex) {\n        switch (AXIS_ORIENTATION[axis][face]) {\n            case 0:\n                return stickerIndex;\n            case 1:\n                return this.clockwiseSticker(stickerIndex);\n            case 2:\n                return this.oppositeSticker(stickerIndex);\n            case -1:\n                return this.counterClockwiseSticker(stickerIndex);\n            default:\n                throw `Invalid axis face orientation value ${AXIS_ORIENTATION[axis][face]}`;\n        }\n    }\n    /**\n     * Performs a turn on a given face.\n     *\n     * @param face the face to turn\n     * @param axis axis to perform inner layer turns on\n     * @param reverse true if you want to turn the face counter clockwise\n     * @param from inner layer to start turning from\n     * @param to last inner layer to stop turning\n     * @param to last inner layer to stop turning\n     */\n    turnFace(face, axis, reverse, from, to) {\n        if (Math.abs(to - from) >= this.size - 1) {\n            console.error(`Invalid number of layers to turn, skipping turn.; face=${face}, layers=${Math.abs(to - from) + 1}`);\n            return;\n        }\n        // Rotate face\n        this.doTurn(face, reverse);\n        // Turn inner layers\n        range(from, to).forEach((layer) => {\n            this.doTurn(`${axis}-${layer}`, AXIS_FACE_ORIENTATION[face] ? !reverse : reverse);\n        });\n    }\n    /**\n     * Performs a U turn\n     * @param reverse true if you want to turn the face counter clockwise (U')\n     * @param layers how many inner layers of the face to turn defaults to 1. Cannot be the cube size or greater\n     */\n    U(reverse = false, layers = 1) {\n        this.turnFace(SIMULATOR_FACE.U, CUBE_AXIS.Y, reverse, this.size - 1, this.size - layers);\n    }\n    /**\n     * Performs an R turn\n     * @param reverse true if you want to turn the face counter clockwise (R')\n     * @param layers how many inner layers of the face to turn defaults to 1. Cannot be the cube size or greater\n     */\n    R(reverse = false, layers = 1) {\n        this.turnFace(SIMULATOR_FACE.R, CUBE_AXIS.X, reverse, this.size - 1, this.size - layers);\n    }\n    /**\n     * Performs an F turn\n     * @param reverse true if you want to turn the face counter clockwise (F')\n     * @param layers how many inner layers of the face to turn defaults to 1. Cannot be the cube size or greater\n     */\n    F(reverse = false, layers = 1) {\n        this.turnFace(SIMULATOR_FACE.F, CUBE_AXIS.Z, reverse, 0, layers - 1);\n    }\n    /**\n     * Performs a D turn\n     * @param reverse true if you want to turn the face counter clockwise (D')\n     * @param layers how many inner layers of the face to turn defaults to 1. Cannot be the cube size or greater\n     */\n    D(reverse = false, layers = 1) {\n        this.turnFace(SIMULATOR_FACE.D, CUBE_AXIS.Y, reverse, 0, layers - 1);\n    }\n    /**\n     * Performs an L turn\n     * @param reverse true if you want to turn the face counter clockwise (L')\n     * @param layers how many inner layers of the face to turn defaults to 1. Cannot be the cube size or greater\n     */\n    L(reverse = false, layers = 1) {\n        this.turnFace(SIMULATOR_FACE.L, CUBE_AXIS.X, reverse, 0, layers - 1);\n    }\n    /**\n     * Performs a B turn\n     * @param reverse true if you want to turn the face counter clockwise (B')\n     * @param layers how many inner layers of the face to turn defaults to 1. Cannot be the cube size or greater\n     */\n    B(reverse = false, layers = 1) {\n        this.turnFace(SIMULATOR_FACE.B, CUBE_AXIS.Z, reverse, this.size - 1, this.size - layers);\n    }\n    /**\n     * Rotates the middle slice in the direction of an L turn\n     * https://ruwix.com/the-rubiks-cube/notation/advanced/\n     *\n     * Will rotate all middle layers inbetween R and L for larger cubes\n     */\n    M(reverse = false) {\n        for (let layer = 1; layer < this.size - 1; layer++) {\n            this.doTurn(`${CUBE_AXIS.X}-${layer}`, !reverse);\n        }\n    }\n    /**\n     * Rotates the standing layers in the direction of an F turn\n     * https://ruwix.com/the-rubiks-cube/notation/advanced/\n     *\n     * Will rotate all middle layers inbetween F and B for larger cubes\n     */\n    S(reverse = false) {\n        for (let layer = 1; layer < this.size - 1; layer++) {\n            this.doTurn(`${CUBE_AXIS.Z}-${layer}`, reverse);\n        }\n    }\n    /**\n     * Rotates the equitorial layers in the direction of a D turn\n     * https://ruwix.com/the-rubiks-cube/notation/advanced/\n     *\n     * Will rotate all middle layers inbetween U and D for larger cubes\n     */\n    E(reverse = false) {\n        for (let layer = 1; layer < this.size - 1; layer++) {\n            this.doTurn(`${CUBE_AXIS.Y}-${layer}`, !reverse);\n        }\n    }\n    /**\n     * rotates the entire cube on R\n     */\n    X(reverse = false) {\n        this.doTurn(\"R\", reverse);\n        this.doTurn(\"L\", !reverse);\n        for (let layer = 0; layer < this.size; layer++) {\n            this.doTurn(`${CUBE_AXIS.X}-${layer}`, reverse);\n        }\n    }\n    /**\n     * rotates the entire cube on U\n     */\n    Y(reverse = false) {\n        this.doTurn(\"U\", reverse);\n        this.doTurn(\"D\", !reverse);\n        for (let layer = 0; layer < this.size; layer++) {\n            this.doTurn(`${CUBE_AXIS.Y}-${layer}`, reverse);\n        }\n    }\n    /**\n     * rotates the entire cube on F\n     */\n    Z(reverse = false) {\n        this.doTurn(\"F\", reverse);\n        this.doTurn(\"B\", !reverse);\n        for (let layer = 0; layer < this.size; layer++) {\n            this.doTurn(`${CUBE_AXIS.Z}-${layer}`, reverse);\n        }\n    }\n    reset() {\n        this.faces.forEach((stickerIds, faceName) => {\n            stickerIds.forEach((stickerId) => {\n                this.stickers.set(stickerId, faceName);\n            });\n        });\n    }\n    alg(alg) {\n        if (!alg) {\n            return;\n        }\n        this.doTurns(parseCubeAlgorithm(alg));\n    }\n    /**\n     * reverses an algorithm then executes it\n     */\n    case(alg) {\n        if (!alg) {\n            return;\n        }\n        let turns = parseCubeAlgorithm(alg)\n            .reverse()\n            .map((turn) => {\n            switch (turn.turnType) {\n                case TurnType.Clockwise:\n                    turn.turnType = TurnType.CounterClockwise;\n                    break;\n                case TurnType.CounterClockwise:\n                    turn.turnType = TurnType.Clockwise;\n                    break;\n                case TurnType.Double:\n                    break;\n            }\n            return turn;\n        });\n        this.doTurns(turns);\n    }\n    doTurns(turns) {\n        turns.forEach((turn) => {\n            let turnFunc;\n            switch (turn.unit) {\n                case CubeAlgorithmUnit.U:\n                    turnFunc = this.U.bind(this);\n                    break;\n                case CubeAlgorithmUnit.R:\n                    turnFunc = this.R.bind(this);\n                    break;\n                case CubeAlgorithmUnit.F:\n                    turnFunc = this.F.bind(this);\n                    break;\n                case CubeAlgorithmUnit.D:\n                    turnFunc = this.D.bind(this);\n                    break;\n                case CubeAlgorithmUnit.L:\n                    turnFunc = this.L.bind(this);\n                    break;\n                case CubeAlgorithmUnit.B:\n                    turnFunc = this.B.bind(this);\n                    break;\n                case CubeAlgorithmUnit.M:\n                    turnFunc = this.M.bind(this);\n                    break;\n                case CubeAlgorithmUnit.E:\n                    turnFunc = this.E.bind(this);\n                    break;\n                case CubeAlgorithmUnit.S:\n                    turnFunc = this.S.bind(this);\n                    break;\n                case CubeAlgorithmUnit.X:\n                    turnFunc = this.X.bind(this);\n                    break;\n                case CubeAlgorithmUnit.Y:\n                    turnFunc = this.Y.bind(this);\n                    break;\n                case CubeAlgorithmUnit.Z:\n                    turnFunc = this.Z.bind(this);\n                    break;\n                default:\n                    console.warn(`Unsupported cube move`, turn);\n                    break;\n            }\n            const reverse = turn.turnType === TurnType.CounterClockwise;\n            turnFunc(reverse, turn.slices);\n            if (turn.turnType === TurnType.Double) {\n                turnFunc(reverse, turn.slices);\n            }\n        });\n    }\n}\n","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {ReadonlyQuat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {ReadonlyMat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import { mat4 } from \"gl-matrix\";\nexport class Object3D {\n    constructor() {\n        this.matrix = mat4.create();\n        this.centroid = [0, 0, 0];\n    }\n    translate(vector) {\n        mat4.translate(this.matrix, this.matrix, vector);\n    }\n    rotate(rad, axis) {\n        mat4.rotate(this.matrix, this.matrix, rad, axis);\n    }\n    scale(v) {\n        mat4.scale(this.matrix, this.matrix, v);\n    }\n    setColor(color) {\n        this.color = color;\n    }\n}\n","import { Object3D } from \"./object3d\";\nexport class Group extends Object3D {\n    constructor(objects = []) {\n        super();\n        this.setObjects(objects);\n    }\n    setObjects(objects) {\n        this.objects = objects;\n    }\n    addObject(object) {\n        this.objects.push(object);\n    }\n    setCentroid(vector) {\n        this.centroid = vector;\n    }\n}\n","import { degreesToRadians } from \"./utils\";\nexport const SQRT_3 = Math.sqrt(3);\nexport const ATAN_15_DEG = Math.atan(degreesToRadians(15));\nexport const DEG_30_RADIANS = degreesToRadians(30);\nexport const DEG_60_RADIANS = degreesToRadians(60);\n","import { SOLVED_BOTTOM_PIECES, SOLVED_TOP_PIECES } from \"./constants\";\nimport { Group } from \"./../../geometry/group\";\nimport { ATAN_15_DEG, DEG_30_RADIANS, DEG_60_RADIANS, } from \"./../../math/constants\";\nimport { PIECE_TYPE } from \"./enum\";\nexport class Square1Builder {\n    constructor(topLayer = SOLVED_TOP_PIECES, bottomLayer = SOLVED_BOTTOM_PIECES, middleRotated = false, sideLength = 0.7) {\n        this.sideLength = sideLength;\n        this.halfSide = this.sideLength / 2;\n        this.halfEdgePiece = this.halfSide * ATAN_15_DEG;\n        this.layerWidth = this.halfSide - this.halfEdgePiece;\n        this.middleWidth = this.sideLength - 2 * this.layerWidth;\n        this.halfMiddleWidth = this.middleWidth / 2;\n        this.borderLayerWidth = this.sideLength * 0.2;\n        this.outerHalfSide = (sideLength + this.borderLayerWidth) / 2;\n        this.outerHalfEdgePiece = this.outerHalfSide * ATAN_15_DEG;\n        this.pieces = this.buildSquare1(topLayer, bottomLayer, middleRotated);\n        this.group = new Group(this.pieces);\n    }\n    makeLayer(pieces) {\n        let geometry = [];\n        let angle = Math.PI;\n        pieces.forEach((piece, index) => {\n            switch (piece.type) {\n                case PIECE_TYPE.CORNER:\n                    const corner = this.square1Corner(piece.colors[0], piece.colors[1], piece.colors[2]);\n                    corner.rotate(angle, [0, 0, 1]);\n                    geometry.push(corner);\n                    angle -= DEG_60_RADIANS;\n                    break;\n                case PIECE_TYPE.EDGE:\n                    const edge = this.square1Edge(piece.colors[0], piece.colors[1]);\n                    edge.rotate(angle - DEG_60_RADIANS, [0, 0, 1]);\n                    geometry.push(edge);\n                    angle -= DEG_30_RADIANS;\n                    break;\n            }\n        });\n        return geometry;\n    }\n    /**\n     * Not implemented. Just here for {@link Visualizer}'s sake\n     */\n    setColors(colors) { }\n}\n","import { calculateCentroid } from \"../math/utils\";\nconst generateUid = (() => {\n    let current = 0;\n    return function () {\n        return current++;\n    };\n})();\n/**\n * Face that will render as a puzzle sticker\n */\nexport class Face {\n    /**\n     * @param indices indices of vertices that make up a face\n     * @param vertices vertices of the geometry to calculate centroid from\n     * @param color color of the sticker\n     */\n    constructor(indices, vertices, color) {\n        this.indices = indices;\n        this.color = color;\n        this.uid = generateUid();\n        if (vertices) {\n            this.calculateCentroid(vertices);\n        }\n    }\n    /**\n     * recalculate the centroid of the face.\n     */\n    calculateCentroid(vertices) {\n        this.centroid = calculateCentroid(\n        // Calculate centroid from vertices included in the face\n        vertices.filter((v, i) => this.indices.includes(i)));\n    }\n}\n","import { Object3D } from \"./object3d\";\nimport { calculateCentroid } from \"../math/utils\";\nexport class Geometry extends Object3D {\n    constructor(vertices, faces) {\n        super();\n        this.vertices = vertices;\n        this.faces = faces;\n        this.centroid = calculateCentroid(this.vertices);\n    }\n}\n","import { Square1Builder } from \"./interface\";\nimport { DEG_30_RADIANS } from \"./../../math/constants\";\nimport { Face } from \"./../../geometry/face\";\nimport { vec3 } from \"gl-matrix\";\nimport { Geometry } from \"./../../geometry/geometry\";\nimport { Group } from \"./../../geometry/group\";\nimport { FRONT_COLOR, RIGHT_COLOR, BACK_COLOR } from \"./constants\";\nexport class Square1Net extends Square1Builder {\n    square1Corner(top, side1, side2) {\n        const points = [\n            // Top\n            [0, 0, 0],\n            [this.halfSide, this.halfEdgePiece, 0],\n            [this.halfSide, this.halfSide, 0],\n            [this.halfEdgePiece, this.halfSide, 0],\n            // Sides\n            [this.outerHalfSide, this.outerHalfEdgePiece, 0],\n            [this.outerHalfSide, this.outerHalfSide, 0],\n            [this.outerHalfEdgePiece, this.outerHalfSide, 0],\n        ];\n        const faces = [\n            new Face([0, 1, 2, 3], points, top),\n            new Face([2, 3, 6, 5], points, side1),\n            new Face([1, 2, 5, 4], points, side2),\n        ];\n        return new Geometry(points, faces);\n    }\n    square1Edge(top, side) {\n        const points = [\n            // Top\n            vec3.rotateZ(vec3.create(), [0, 0, 0], [0, 0, 0], DEG_30_RADIANS),\n            vec3.rotateZ(vec3.create(), [this.halfEdgePiece, this.halfSide, 0], [0, 0, 0], DEG_30_RADIANS),\n            vec3.rotateZ(vec3.create(), [-this.halfEdgePiece, this.halfSide, 0], [0, 0, 0], DEG_30_RADIANS),\n            // Side\n            vec3.rotateZ(vec3.create(), [this.outerHalfEdgePiece, this.outerHalfSide, 0], [0, 0, 0], DEG_30_RADIANS),\n            vec3.rotateZ(vec3.create(), [-this.outerHalfEdgePiece, this.outerHalfSide, 0], [0, 0, 0], DEG_30_RADIANS),\n        ];\n        const faces = [\n            new Face([0, 1, 2], points, top),\n            new Face([1, 2, 4, 3], points, side),\n        ];\n        return new Geometry(points, faces);\n    }\n    square1Middle(front, right, back, rotated) {\n        const layerHeight = this.halfSide - this.halfEdgePiece;\n        const middleHeight = this.sideLength - 2 * layerHeight;\n        const halfMiddleHeight = middleHeight / 2;\n        const cornerLength = this.outerHalfSide - this.outerHalfEdgePiece;\n        const vertices = [\n            [-this.outerHalfSide, halfMiddleHeight, -0.01],\n            [-this.outerHalfEdgePiece, halfMiddleHeight, -0.01],\n            [this.outerHalfSide, halfMiddleHeight, -0.01],\n            [-this.outerHalfSide, -halfMiddleHeight, -0.01],\n            [-this.outerHalfEdgePiece, -halfMiddleHeight, -0.01],\n            [this.outerHalfSide, -halfMiddleHeight, -0.01],\n            // Points for when middle is rotated\n            [2 * this.outerHalfEdgePiece, halfMiddleHeight, -0.01],\n            [2 * this.outerHalfEdgePiece, -halfMiddleHeight, -0.01],\n            [2 * cornerLength, halfMiddleHeight, -0.01],\n            [2 * cornerLength, -halfMiddleHeight, -0.01],\n        ];\n        // Left\n        const faces = [new Face([0, 1, 4, 3], vertices, front)];\n        // Right\n        if (!rotated) {\n            faces.push(new Face([1, 2, 5, 4], vertices, front));\n        }\n        else {\n            faces.push(new Face([1, 6, 7, 4], vertices, back));\n            faces.push(new Face([6, 8, 9, 7], vertices, right));\n        }\n        return new Geometry(vertices, faces);\n    }\n    buildSquare1(top, bottom, middleRotated) {\n        const layerHeight = this.halfSide - this.halfEdgePiece;\n        const middleHeight = this.sideLength - 2 * layerHeight;\n        const halfMiddleHeight = middleHeight / 2;\n        let pieces = [];\n        const topLayer = new Group(this.makeLayer(top));\n        const bottomLayer = new Group(this.makeLayer(bottom));\n        topLayer.translate([0, this.outerHalfSide + halfMiddleHeight, 0]);\n        bottomLayer.translate([0, -(this.outerHalfSide + halfMiddleHeight), 0]);\n        bottomLayer.rotate(DEG_30_RADIANS, [0, 0, 1]);\n        pieces = [topLayer, bottomLayer];\n        const m = this.square1Middle(FRONT_COLOR, RIGHT_COLOR, BACK_COLOR, middleRotated);\n        pieces.push(m);\n        return pieces;\n    }\n}\n","import { ROTATION_VECTOR, FRONT_COLOR, LEFT_COLOR, BACK_COLOR, RIGHT_COLOR, SOLVED_TOP_PIECES, SOLVED_BOTTOM_PIECES, } from \"./constants\";\nimport { Square1Builder } from \"./interface\";\nimport { DEG_30_RADIANS } from \"./../../math/constants\";\nimport { Geometry } from \"./../../geometry/geometry\";\nimport { Face } from \"./../../geometry/face\";\nimport { vec3 } from \"gl-matrix\";\nimport { Group } from \"../../geometry/group\";\nexport class Square1 extends Square1Builder {\n    constructor(topLayer = SOLVED_TOP_PIECES, bottomLayer = SOLVED_BOTTOM_PIECES, middleRotated = false, sideLength = 1.25) {\n        super(topLayer, bottomLayer, middleRotated, sideLength);\n        this.group.rotate(-0.985398, [1, 0, 0]);\n        this.group.rotate(-0.59, [0, 0, 1]);\n    }\n    square1Corner(top, side1, side2) {\n        const points = [\n            // Top\n            [0, 0, this.halfSide],\n            [this.halfSide, this.halfEdgePiece, this.halfSide],\n            [this.halfSide, this.halfSide, this.halfSide],\n            [this.halfEdgePiece, this.halfSide, this.halfSide],\n            // Bottom\n            [0, 0, this.halfSide - this.layerWidth],\n            [this.halfSide, this.halfEdgePiece, this.halfSide - this.layerWidth],\n            [this.halfSide, this.halfSide, this.halfSide - this.layerWidth],\n            [this.halfEdgePiece, this.halfSide, this.halfSide - this.layerWidth],\n        ];\n        const faces = [\n            new Face([0, 1, 2, 3], points, top),\n            // TODO: the faces commented out here are the underside of the pieces so\n            // they show gray when the cube is scrambled. But they are overlapping sometimes\n            // with outward sticker faces. removing them for now, but it'd be nice to\n            // fix this.\n            // new Face([4, 5, 6, 7], points, { value: '#333' }),\n            // new Face([0, 1, 5, 4], points, { value: '#333' }),\n            new Face([2, 3, 7, 6], points, side1),\n            new Face([1, 2, 6, 5], points, side2),\n        ];\n        return new Geometry(points, faces);\n    }\n    square1Edge(top, side) {\n        const points = [\n            // Top\n            vec3.rotateZ(vec3.create(), [0, 0, this.halfSide], [0, 0, 0], DEG_30_RADIANS),\n            vec3.rotateZ(vec3.create(), [this.halfEdgePiece, this.halfSide, this.halfSide], [0, 0, 0], DEG_30_RADIANS),\n            vec3.rotateZ(vec3.create(), [-this.halfEdgePiece, this.halfSide, this.halfSide], [0, 0, 0], DEG_30_RADIANS),\n            // Bottom\n            vec3.rotateZ(vec3.create(), [0, 0, this.halfSide - this.layerWidth], [0, 0, 0], DEG_30_RADIANS),\n            vec3.rotateZ(vec3.create(), [this.halfEdgePiece, this.halfSide, this.halfSide - this.layerWidth], [0, 0, 0], DEG_30_RADIANS),\n            vec3.rotateZ(vec3.create(), [-this.halfEdgePiece, this.halfSide, this.halfSide - this.layerWidth], [0, 0, 0], DEG_30_RADIANS),\n        ];\n        const faces = [\n            new Face([0, 1, 2], points, top),\n            // new Face([3, 4, 5], points, { value: '#333' }),\n            new Face([1, 2, 5, 4], points, side),\n        ];\n        return new Geometry(points, faces);\n    }\n    square1Middle(front, side, back) {\n        const vertices = [\n            [-this.halfSide, -this.halfSide, this.halfMiddleWidth],\n            [-this.halfSide, this.halfSide, this.halfMiddleWidth],\n            [this.halfEdgePiece, this.halfSide, this.halfMiddleWidth],\n            [-this.halfEdgePiece, -this.halfSide, this.halfMiddleWidth],\n            [-this.halfSide, -this.halfSide, -this.halfMiddleWidth],\n            [-this.halfSide, this.halfSide, -this.halfMiddleWidth],\n            [this.halfEdgePiece, this.halfSide, -this.halfMiddleWidth],\n            [-this.halfEdgePiece, -this.halfSide, -this.halfMiddleWidth],\n        ];\n        const faces = [\n            new Face([0, 1, 2, 3], vertices, { value: \"#333\" }),\n            new Face([4, 5, 6, 7], vertices, { value: \"#333\" }),\n            new Face([0, 1, 5, 4], vertices, side),\n            new Face([1, 2, 6, 5], vertices, back),\n            new Face([2, 3, 7, 6], vertices, { value: \"#333\" }),\n            new Face([0, 3, 7, 4], vertices, front),\n        ];\n        return new Geometry(vertices, faces);\n    }\n    buildSquare1(top, bottom, middleRotated) {\n        const topLayer = new Group(this.makeLayer(top));\n        const bottomLayer = new Group(this.makeLayer(bottom));\n        // Prevent overlapping faces\n        topLayer.translate([0, 0, 0.005]);\n        bottomLayer.translate([0, 0, -0.005]);\n        bottomLayer.rotate(Math.PI, [1, 0, 0]);\n        bottomLayer.rotate(DEG_30_RADIANS, [0, 0, 1]);\n        const pieces = [topLayer, bottomLayer];\n        const m1 = this.square1Middle(FRONT_COLOR, LEFT_COLOR, BACK_COLOR);\n        const m2 = this.square1Middle(BACK_COLOR, RIGHT_COLOR, FRONT_COLOR);\n        m2.rotate(Math.PI, [0, 0, 1]);\n        if (middleRotated) {\n            m2.rotate(Math.PI, ROTATION_VECTOR);\n        }\n        pieces.push(m1);\n        pieces.push(m2);\n        return pieces;\n    }\n}\n","import { Geometry } from \"./geometry\";\nimport { vec3 } from \"gl-matrix\";\nimport { Face } from \"./face\";\nexport class Plane extends Geometry {\n    constructor(width, height, color) {\n        let vertices = [\n            vec3.clone([0, 0, 0]),\n            vec3.clone([width, 0, 0]),\n            vec3.clone([width, -height, 0]),\n            vec3.clone([0, -height, 0]),\n        ];\n        let faces = [new Face([0, 1, 2, 3], vertices, color)];\n        super(vertices, faces);\n    }\n}\n","import { Geometry } from \"./geometry\";\nimport { Face } from \"./face\";\nimport { SQRT_3 } from \"../math/constants\";\nexport class Triangle extends Geometry {\n    constructor(a, b, c, color) {\n        let verticies = [a, b, c];\n        let faces = [new Face([0, 1, 2], verticies, color)];\n        super(verticies, faces);\n    }\n}\nexport class EquilateralTriangle extends Triangle {\n    constructor(base, color) {\n        let height = base * (SQRT_3 / 2);\n        super([0, 0, 0], [base / 2, height, 0], [base, 0, 0], color);\n    }\n}\n","import { RED, YELLOW, BLUE, ORANGE, GREEN, WHITE, BLACK } from \"./colors\";\nimport { Group } from \"../geometry/group\";\nimport { Plane } from \"../geometry/plane\";\nimport { Triangle } from \"../geometry/triangle\";\nexport class SkewbNet {\n    constructor() {\n        const cubeWidth = 1;\n        const centerWidth = Math.sqrt(Math.pow(cubeWidth / 2, 2) * 2);\n        const red = new Group(this.makeStickers(RED, centerWidth, [-cubeWidth, 0, 0]));\n        const yellow = new Group(this.makeStickers(YELLOW, centerWidth, [2 * cubeWidth, 0, 0]));\n        const blue = new Group(this.makeStickers(BLUE, centerWidth, [0, -cubeWidth, 0]));\n        const orange = new Group(this.makeStickers(ORANGE, centerWidth, [cubeWidth, 0, 0]));\n        const green = new Group(this.makeStickers(GREEN, centerWidth, [0, cubeWidth, 0]));\n        const white = new Group(this.makeStickers(WHITE, centerWidth, [0, 0, 0]));\n        this.U = green;\n        this.R = orange;\n        this.F = white;\n        this.L = red;\n        this.B = yellow;\n        this.D = blue;\n        this.stickers = [red, yellow, blue, orange, green, white];\n        this.group = new Group(this.stickers);\n        this.group.translate([-cubeWidth / 4, 0, 0]);\n        this.group.scale([0.5, 0.5, 0.5]);\n    }\n    makeStickers(color, width, translate) {\n        const center = new Plane(width, width, color);\n        center.translate(translate);\n        center.rotate(Math.PI / 4, [0, 0, 1]);\n        center.translate([-width / 2, width / 2, 0]);\n        const triangles = [];\n        for (let i = 0; i < 4; i++) {\n            const triangle = new Triangle([-width / 2, width / 2, 0], [0, width, 0], [width / 2, width / 2, 0], color);\n            triangle.translate(translate);\n            triangle.rotate((-Math.PI / 2) * i, [0, 0, 1]);\n            triangle.rotate(Math.PI / 4, [0, 0, 1]);\n            triangles.push(triangle);\n        }\n        return [center, ...triangles];\n    }\n    setColors(colors) {\n        let { top, right, front, bottom, left, back } = colors;\n        this.setFaceColors(this.U, top);\n        this.setFaceColors(this.R, right);\n        this.setFaceColors(this.F, front);\n        this.setFaceColors(this.D, bottom);\n        this.setFaceColors(this.L, left);\n        this.setFaceColors(this.B, back);\n    }\n    setFaceColors(faceStickers, colors = []) {\n        faceStickers.objects[0].faces[0].color = colors[0] || BLACK;\n        faceStickers.objects[1].faces[0].color = colors[1] || BLACK;\n        faceStickers.objects[2].faces[0].color = colors[2] || BLACK;\n        faceStickers.objects[3].faces[0].color = colors[4] || BLACK; // Setting 3 -> 4 and 4 -> 3 now because 4 and 3 are stored incorrectly in this class.\n        faceStickers.objects[4].faces[0].color = colors[3] || BLACK;\n    }\n}\n","import { RED, YELLOW, BLUE, ORANGE, GREEN, WHITE, BLACK } from \"./colors\";\nimport { Group } from \"../geometry/group\";\nimport { Plane } from \"../geometry/plane\";\nimport { Triangle } from \"../geometry/triangle\";\nexport class Skewb {\n    constructor() {\n        const cubeWidth = 1.25;\n        const centerWidth = Math.sqrt(Math.pow(cubeWidth / 2, 2) * 2);\n        const halfWidth = cubeWidth / 2;\n        const red = new Group(this.makeStickers(RED, centerWidth));\n        const yellow = new Group(this.makeStickers(YELLOW, centerWidth, [1, 0, 0]));\n        const blue = new Group(this.makeStickers(BLUE, centerWidth, [0, 1, 0]));\n        const orange = new Group(this.makeStickers(ORANGE, centerWidth));\n        const green = new Group(this.makeStickers(GREEN, centerWidth, [0, 1, 0]));\n        const white = new Group(this.makeStickers(WHITE, centerWidth, [1, 0, 0]));\n        this.U = yellow;\n        this.R = red;\n        this.F = blue;\n        this.L = orange;\n        this.B = green;\n        this.D = white;\n        red.translate([0, 0, halfWidth]);\n        red.rotate(Math.PI, [1, 0, 0]);\n        red.rotate(Math.PI / 2, [0, 0, 1]);\n        orange.rotate(-Math.PI / 2, [0, 0, 1]);\n        orange.translate([0, 0, -halfWidth]);\n        blue.rotate(-Math.PI / 2, [1, 0, 0]);\n        blue.translate([-halfWidth, 0, 0]);\n        green.translate([halfWidth, 0, 0]);\n        green.rotate(Math.PI, [0, 1, 0]);\n        green.rotate(-Math.PI / 2, [1, 0, 0]);\n        yellow.rotate(Math.PI, [0, 1, 0]);\n        yellow.translate([0, halfWidth, 0]);\n        white.translate([0, -halfWidth, 0]);\n        white.rotate(Math.PI, [1, 0, 0]);\n        this.stickers = [red, yellow, blue, orange, green, white];\n        this.group = new Group(this.stickers);\n        this.group.rotate(0.593411946, [1, 0, 0]);\n        this.group.rotate(0.785398, [0, 1, 0]);\n    }\n    makeStickers(color, width, axis) {\n        const center = new Plane(width, width, color);\n        if (axis) {\n            center.rotate(Math.PI / 2, axis);\n        }\n        center.rotate(Math.PI / 4, [0, 0, 1]);\n        center.translate([-width / 2, width / 2, 0]);\n        const triangles = [];\n        for (let i = 0; i < 4; i++) {\n            const triangle = new Triangle([-width / 2, width / 2, 0], [0, width, 0], [width / 2, width / 2, 0], color);\n            if (axis) {\n                triangle.rotate(Math.PI / 2, axis);\n            }\n            triangle.rotate((Math.PI / 2) * i, [0, 0, 1]);\n            triangle.rotate(Math.PI / 4, [0, 0, 1]);\n            triangles.push(triangle);\n        }\n        return [center, ...triangles];\n    }\n    setColors(colors) {\n        let { top, right, front, bottom, left, back } = colors;\n        this.setFaceColors(this.U, top);\n        this.setFaceColors(this.R, right);\n        this.setFaceColors(this.F, front);\n        this.setFaceColors(this.D, bottom);\n        this.setFaceColors(this.L, left);\n        this.setFaceColors(this.B, back);\n    }\n    setFaceColors(faceStickers, colors = []) {\n        faceStickers.objects[0].faces[0].color = colors[0] || BLACK;\n        faceStickers.objects[1].faces[0].color = colors[1] || BLACK;\n        faceStickers.objects[2].faces[0].color = colors[2] || BLACK;\n        faceStickers.objects[3].faces[0].color = colors[4] || BLACK; // Setting 3 -> 4 and 4 -> 3 now because 4 and 3 are stored incorrectly in this class.\n        faceStickers.objects[4].faces[0].color = colors[3] || BLACK;\n    }\n}\n","import { Face } from \"./face\";\nimport { Geometry } from \"./geometry\";\nimport { SQRT_3 } from \"../math/constants\";\n/**\n * Geometry to build a triangle lattice for the\n * pyraminx puzzle\n */\nexport class TriangleLattice extends Geometry {\n    constructor(base, size, color) {\n        const halfBase = base / 2;\n        const fullHeight = base * (SQRT_3 / 2);\n        const triangleBase = base / size;\n        const triangleHeight = fullHeight / size;\n        const inradius = fullHeight / 3;\n        let vertices = [];\n        let faces = [];\n        /**\n         * Builds one layer of verticies at a time\n         * for each layer after the first it constructs\n         * faces for the triangles (0,1,4), (1,2,5) etc...\n         *\n         *       9\n         *     7   8\n         *   4   5   6\n         * 0   1   2   3\n         */\n        let index = 0;\n        for (let layer = 0; layer <= size; layer++) {\n            for (let vertex = 0, count = size - layer; vertex <= count; vertex++) {\n                const horizontalOffset = -halfBase;\n                const verticalOffset = -inradius;\n                const x = triangleBase * vertex + (layer * triangleBase) / 2 + horizontalOffset;\n                const y = triangleHeight * layer + verticalOffset;\n                vertices.push([x, y, 0]);\n                if (layer > 0) {\n                    // down triangle\n                    if (vertex > 0) {\n                        faces.push(new Face([index, index - 1, index - count - 2], null, color));\n                    }\n                    // up triangle\n                    faces.push(new Face([index, index - count - 2, index - count - 1], null, color));\n                }\n                index++;\n            }\n        }\n        faces.forEach((face) => face.calculateCentroid(vertices));\n        super(vertices, faces);\n    }\n}\n","import { GREEN, RED, BLUE, YELLOW, BLACK } from \"./colors\";\nimport { TriangleLattice } from \"./../geometry/triangleLattice\";\nimport { Group } from \"./../geometry/group\";\nimport { SQRT_3 } from \"../math/constants\";\nconst DEG_60_RADIANS = (60 * Math.PI) / 180;\nexport class PyraminxNet {\n    constructor(size, sideLength = 0.925) {\n        this.size = size;\n        const fullHeight = sideLength * (SQRT_3 / 2);\n        const inDiameter = fullHeight / 1.5;\n        const U = new TriangleLattice(sideLength, size, YELLOW);\n        const R = new TriangleLattice(sideLength, size, GREEN);\n        const L = new TriangleLattice(sideLength, size, BLUE);\n        const B = new TriangleLattice(sideLength, size, RED);\n        this.L = L;\n        this.R = R;\n        this.U = U;\n        this.B = B;\n        R.rotate(-DEG_60_RADIANS, [0, 0, 1]);\n        R.translate([0, inDiameter, 0]);\n        R.rotate(2 * DEG_60_RADIANS, [0, 0, 1]);\n        U.rotate(DEG_60_RADIANS, [0, 0, 1]);\n        U.translate([0, inDiameter, 0]);\n        U.rotate(-2 * DEG_60_RADIANS, [0, 0, 1]);\n        B.rotate(3 * DEG_60_RADIANS, [0, 0, 1]);\n        B.translate([0, inDiameter, 0]);\n        B.rotate(-2 * DEG_60_RADIANS, [0, 0, 1]);\n        this.faces = [U, R, L, B];\n        this.group = new Group(this.faces);\n    }\n    setColors(colors) {\n        let { left, right, top, back } = colors;\n        this.setFaceColors(this.L, left);\n        this.setFaceColors(this.R, right);\n        this.setFaceColors(this.U, top);\n        this.setFaceColors(this.B, back);\n    }\n    setFaceColors(lattice, colors) {\n        lattice.faces.forEach((f, i) => {\n            if (colors && colors[i]) {\n                f.color = colors[i];\n            }\n            else {\n                f.color = BLACK;\n            }\n        });\n    }\n}\n","import { GREEN, RED, BLUE, YELLOW, BLACK } from \"./colors\";\nimport { TriangleLattice } from \"./../geometry/triangleLattice\";\nimport { Group } from \"./../geometry/group\";\nconst ARC_COS_THIRD = Math.acos(1 / 3);\nconst DEG_120_RADIANS = (120 * Math.PI) / 180;\nconst SQRT_24 = Math.sqrt(24);\nexport class Pyraminx {\n    constructor(size, sideLength = 1.75) {\n        this.size = size;\n        const insphereRadius = sideLength / SQRT_24;\n        const U = new TriangleLattice(sideLength, size, YELLOW);\n        const R = new TriangleLattice(sideLength, size, GREEN);\n        const L = new TriangleLattice(sideLength, size, BLUE);\n        const B = new TriangleLattice(sideLength, size, RED);\n        this.L = L;\n        this.R = R;\n        this.U = U;\n        this.B = B;\n        U.rotate(DEG_120_RADIANS, [0, 0, 1]);\n        U.rotate(ARC_COS_THIRD, [1, 0, 0]);\n        U.translate([0, 0, insphereRadius]);\n        R.rotate(ARC_COS_THIRD, [1, 0, 0]);\n        R.translate([0, 0, insphereRadius]);\n        L.rotate(-DEG_120_RADIANS, [0, 0, 1]);\n        L.rotate(ARC_COS_THIRD, [1, 0, 0]);\n        L.translate([0, 0, insphereRadius]);\n        B.rotate(Math.PI, [0, 1, 0]);\n        B.translate([0, 0, insphereRadius]);\n        this.faces = [U, L, R, B];\n        this.group = new Group(this.faces);\n        this.group.rotate(-Math.PI / 3, [1, 0, 0]);\n        this.group.rotate(Math.PI / 2.5, [0, 0, 1]);\n    }\n    setColors(colors) {\n        let { left, right, top, back } = colors;\n        this.setFaceColors(this.L, left);\n        this.setFaceColors(this.R, right);\n        this.setFaceColors(this.U, top);\n        this.setFaceColors(this.B, back);\n    }\n    setFaceColors(lattice, colors) {\n        lattice.faces.forEach((f, i) => {\n            if (colors && colors[i]) {\n                f.color = colors[i];\n            }\n            else {\n                f.color = BLACK;\n            }\n        });\n    }\n}\n","import { Face } from \"./../geometry/face\";\nimport { Geometry } from \"../geometry/geometry\";\nimport { polarToCartesian, lineSegmentLength, pentagonOutRadius, } from \"../math/utils\";\nexport class DividedPentagon extends Geometry {\n    /**\n     *\n     * @param color\n     * @param layers number of layers\n     * @param length length of entire edge of the outer pentagon\n     */\n    constructor(color, layers = 2, length = 1.6, layerWidth = 0.4 // TODO: calculate this somehow\n    ) {\n        const outRadius = pentagonOutRadius(length);\n        const radiusDiff = layerWidthToRadiusDiff(layerWidth);\n        const centerOutRadius = outRadius - radiusDiff * (layers - 1);\n        const vertices = faceVerticies(layers, centerOutRadius, radiusDiff, layerWidth);\n        super(vertices, makeFaces(layers, color, vertices));\n    }\n}\n/**\n * Given the the distance between two parallel sides of the\n * dividen pentagon, calculate the difference in pentagon radius\n */\nfunction layerWidthToRadiusDiff(width) {\n    const aSquared = width * width;\n    const angleRadians = (71 * Math.PI) / 180;\n    // Law of cosines\n    const cSquared = 2 * aSquared - 2 * aSquared * Math.cos(angleRadians);\n    const diff = 2 * Math.sqrt(Math.abs(aSquared - cSquared));\n    return diff;\n}\n/**\n * creates mapping for indicies in one layer to another\n * so we can build the geometry for a megaminx face\n */\nfunction downMapping(layer) {\n    if (layer < 1) {\n        return [];\n    }\n    let mapping = [];\n    const layerPoints = 5 + (layer - 1) * 10;\n    let previousPoints = 5 * (layer - 1) * (layer - 1);\n    for (let i = 0; i < layerPoints; i++) {\n        mapping.push(i + previousPoints);\n        if (i % (layerPoints / 5) === 0) {\n            mapping.push(i + previousPoints);\n        }\n    }\n    mapping.push(mapping.shift());\n    mapping.push(mapping.shift());\n    return mapping;\n}\nfunction layerVertexNumbers(layer) {\n    let previousPoints = 5 * layer * layer;\n    let vertexNumbers = [];\n    for (let i = 0, layerPoints = 5 + layer * 10; i < layerPoints; i++) {\n        vertexNumbers.push(i + previousPoints);\n    }\n    return vertexNumbers;\n}\nfunction makeFaces(layers, color, vertices) {\n    let faces = [];\n    const firstLayerFace = new Face([0, 1, 2, 3, 4], vertices, color);\n    faces.push(firstLayerFace);\n    let totalPoints = 5;\n    let currentPoint = 5;\n    for (let i = 1; i < layers; i++) {\n        const layerPoints = 5 + i * 10;\n        totalPoints += layerPoints;\n        const downMap = downMapping(i);\n        const prevLayer = layerVertexNumbers(i - 1);\n        const currentLayer = layerVertexNumbers(i);\n        while (currentPoint < totalPoints) {\n            const currentLayerPoint = currentPoint - (prevLayer[prevLayer.length - 1] + 1);\n            const f1isCorner = currentLayerPoint % (layerPoints / 5) === 0;\n            if (f1isCorner) {\n                currentPoint++;\n                continue;\n            }\n            const f2isCorner = (currentLayerPoint + 1) % (layerPoints / 5) === 0;\n            let f1 = currentPoint;\n            let f2 = currentLayer[(currentLayerPoint + 1) % currentLayer.length];\n            let f3 = f2isCorner ? f2 + 1 : downMap.shift();\n            let f4 = f2isCorner\n                ? downMap.shift()\n                : prevLayer[(prevLayer.indexOf(f3) - 1 + prevLayer.length) % prevLayer.length];\n            currentPoint++;\n            faces.push(new Face([f1, f2, f3, f4], vertices, color));\n        }\n    }\n    return faces;\n}\n/**\n * Takes two points and extrapolates points along the line they make\n *\n * @param p1 point 1\n * @param p2 point 2\n * @param segments how many points to extrapolate from each direction p1 -> p2 and p2 -> p1\n */\nfunction segmentPoints(p1, p2, segments, layerWidth) {\n    if (segments === 0) {\n        return [\n            [p1[0], p1[1], 0],\n            [p2[0], p2[1], 0],\n        ];\n    }\n    const length = lineSegmentLength(p1, p2);\n    let points = [];\n    for (let i = segments; i > 0; i--) {\n        // extrapolate from p1\n        let a = [\n            p1[0] + ((p2[0] - p1[0]) / length) * layerWidth * i,\n            p1[1] + ((p2[1] - p1[1]) / length) * layerWidth * i,\n            0,\n        ];\n        points.unshift(a);\n        // extrapolate from p2\n        let b = [\n            p2[0] + ((p1[0] - p2[0]) / length) * layerWidth * i,\n            p2[1] + ((p1[1] - p2[1]) / length) * layerWidth * i,\n            0,\n        ];\n        points.push(b);\n    }\n    points.unshift([p1[0], p1[1], 0]);\n    points.push([p2[0], p2[1], 0]);\n    return points;\n}\nfunction layerVerticies(layer, radius, layerWidth) {\n    let verticies = [];\n    for (let i = 0; i < 5; i++) {\n        const theta = (i * (2 * Math.PI)) / 5 - Math.PI / 10;\n        const v = polarToCartesian(radius, theta);\n        if (verticies.length > 0) {\n            const lastPoint = verticies[verticies.length - 1];\n            const points = segmentPoints([lastPoint[0], lastPoint[1]], v, layer, layerWidth);\n            points.shift(); // Remove the first, otherwise it's duplicated\n            verticies = verticies.concat(points);\n        }\n        else {\n            verticies.push([v[0], v[1], 0]);\n        }\n    }\n    // Insert segments for last and first\n    const first = verticies[0];\n    const last = verticies[verticies.length - 1];\n    const points = segmentPoints([last[0], last[1]], [first[0], first[1]], layer, layerWidth);\n    points.pop();\n    points.shift();\n    verticies = verticies.concat(points);\n    return verticies;\n}\nfunction faceVerticies(layers, radius, radiusDiff, layerWidth) {\n    let verticies = [];\n    for (let i = 0; i < layers; i++) {\n        const r = radius + radiusDiff * i;\n        verticies = [...verticies, ...layerVerticies(i, r, layerWidth)];\n    }\n    return verticies;\n}\n","import { WHITE, RED, GREEN, PURPLE, YELLOW, BLUE, GREY, DARK_BLUE, LIGHT_YELLOW, PINK, LIGHT_GREEN, ORANGE, BLACK, } from \"./colors\";\nimport { Group } from \"./../geometry/group\";\nimport { DividedPentagon } from \"./../geometry/dividedPentagon\";\nimport { pentagonInRadius } from \"../math/utils\";\nimport { chunkArray } from \"../utils/arrays\";\nconst DEG_36_RADIANS = (36 * Math.PI) / 180;\nconst DEG_72_RADIANS = (72 * Math.PI) / 180;\n/**\n * for a megaminx with side length 1,\n * layer widths that look good.\n */\nconst OPTIMAL_LAYER_WIDTH = {\n    2: 0.3,\n    3: 0.17,\n    4: 0.121,\n};\nfunction getLayerWidth(length, layers) {\n    return OPTIMAL_LAYER_WIDTH[layers] || length / (layers * 1.9);\n}\nexport class MegaminxNet {\n    constructor(layers) {\n        this.layers = layers;\n        const sideLength = 0.75;\n        const layerWidth = getLayerWidth(length, layers);\n        // Top\n        this.U = new DividedPentagon(WHITE, layers, sideLength, layerWidth);\n        this.F = new DividedPentagon(RED, layers, sideLength, layerWidth);\n        this.L = new DividedPentagon(GREEN, layers, sideLength, layerWidth);\n        this.BL = new DividedPentagon(PURPLE, layers, sideLength, layerWidth);\n        this.BR = new DividedPentagon(YELLOW, layers, sideLength, layerWidth);\n        this.R = new DividedPentagon(BLUE, layers, sideLength, layerWidth);\n        // Bottom\n        this.d = new DividedPentagon(GREY, layers, sideLength, layerWidth);\n        this.bl = new DividedPentagon(DARK_BLUE, layers, sideLength, layerWidth);\n        this.dl = new DividedPentagon(LIGHT_YELLOW, layers, sideLength, layerWidth);\n        this.dr = new DividedPentagon(PINK, layers, sideLength, layerWidth);\n        this.br = new DividedPentagon(LIGHT_GREEN, layers, sideLength, layerWidth);\n        this.b = new DividedPentagon(ORANGE, layers, sideLength, layerWidth);\n        const ind = 2 * pentagonInRadius(sideLength);\n        this.F.translate([0, ind, 0]);\n        this.F.rotate(5 * DEG_36_RADIANS, [0, 0, 1]);\n        this.L.rotate(-DEG_72_RADIANS, [0, 0, 1]);\n        this.L.translate([0, ind, 0]);\n        this.L.rotate(3 * DEG_36_RADIANS, [0, 0, 1]);\n        this.BL.rotate(-2 * DEG_72_RADIANS, [0, 0, 1]);\n        this.BL.translate([0, ind, 0]);\n        this.BL.rotate(-DEG_36_RADIANS, [0, 0, 1]);\n        this.BR.rotate(2 * DEG_72_RADIANS, [0, 0, 1]);\n        this.BR.translate([0, ind, 0]);\n        this.BR.rotate(DEG_36_RADIANS, [0, 0, 1]);\n        this.R.rotate(DEG_72_RADIANS, [0, 0, 1]);\n        this.R.translate([0, ind, 0]);\n        this.R.rotate(-3 * DEG_36_RADIANS, [0, 0, 1]);\n        // Bottom\n        this.d.rotate(Math.PI, [0, 0, 1]);\n        this.d.rotate(-2 * DEG_36_RADIANS, [0, 0, 1]);\n        this.b.rotate(3 * DEG_36_RADIANS, [0, 0, 1]);\n        this.b.translate([0, ind, 0]);\n        this.b.rotate(5 * DEG_36_RADIANS, [0, 0, 1]);\n        this.bl.rotate(DEG_36_RADIANS, [0, 0, 1]);\n        this.bl.translate([0, ind, 0]);\n        this.bl.rotate(3 * DEG_36_RADIANS, [0, 0, 1]);\n        this.dl.rotate(-DEG_36_RADIANS, [0, 0, 1]);\n        this.dl.translate([0, ind, 0]);\n        this.dl.rotate(-DEG_36_RADIANS, [0, 0, 1]);\n        this.dr.rotate(-3 * DEG_36_RADIANS, [0, 0, 1]);\n        this.dr.translate([0, ind, 0]);\n        this.dr.rotate(DEG_36_RADIANS, [0, 0, 1]);\n        this.br.rotate(5 * DEG_36_RADIANS, [0, 0, 1]);\n        this.br.translate([0, ind, 0]);\n        this.br.rotate(-3 * DEG_36_RADIANS, [0, 0, 1]);\n        const top = new Group([this.U, this.F, this.L, this.BL, this.BR, this.R]);\n        const bottom = new Group([\n            this.d,\n            this.bl,\n            this.dr,\n            this.dl,\n            this.br,\n            this.b,\n        ]);\n        bottom.rotate(-DEG_72_RADIANS, [0, 0, 1]);\n        bottom.translate([0, 2 * ind, 0]);\n        bottom.rotate(2 * DEG_72_RADIANS, [0, 0, 1]);\n        bottom.translate([0, -ind, 0]);\n        this.group = new Group([top, bottom]);\n        this.group.scale([0.33, 0.33, 0.33]);\n        this.group.translate([-1.75 * sideLength, 0, 0]);\n    }\n    setColors(colors) {\n        let { U, R, F, d, L, b, dr, dl, br, BR, BL, bl } = colors;\n        this.setFaceColors(this.U, U);\n        this.setFaceColors(this.R, R);\n        this.setFaceColors(this.F, F);\n        this.setFaceColors(this.d, d);\n        this.setFaceColors(this.L, L);\n        this.setFaceColors(this.b, b);\n        this.setFaceColors(this.dr, dr);\n        this.setFaceColors(this.dl, dl);\n        this.setFaceColors(this.BR, BR);\n        this.setFaceColors(this.BL, BL);\n        this.setFaceColors(this.bl, bl);\n        this.setFaceColors(this.br, br);\n    }\n    oldSetColors(colors) {\n        const n = this.layers;\n        const numStickers = 5 * n * n - 5 * n + 1;\n        let [U, R, F, dr, dl, L, d, br, BR, BL, bl, b] = chunkArray(colors, numStickers);\n        this.setFaceColors(this.U, U);\n        this.setFaceColors(this.R, R);\n        this.setFaceColors(this.F, F);\n        this.setFaceColors(this.d, d);\n        this.setFaceColors(this.L, L);\n        this.setFaceColors(this.b, b);\n        this.setFaceColors(this.dr, dr);\n        this.setFaceColors(this.dl, dl);\n        this.setFaceColors(this.br, br);\n        this.setFaceColors(this.BR, BR);\n        this.setFaceColors(this.BL, BL);\n        this.setFaceColors(this.bl, bl);\n    }\n    setFaceColors(faceStickers, colors) {\n        faceStickers.faces.forEach((f, i) => {\n            if (colors && colors[i]) {\n                f.color = colors[i];\n            }\n            else {\n                f.color = BLACK;\n            }\n        });\n    }\n}\n","import { WHITE, RED, GREEN, YELLOW, BLUE, ORANGE, LIGHT_GREEN, PINK, LIGHT_YELLOW, DARK_BLUE, GREY, PURPLE, BLACK, } from \"./colors\";\nimport { Group } from \"./../geometry/group\";\nimport { DividedPentagon } from \"../geometry/dividedPentagon\";\nimport { dodecahedronInRadius } from \"../math/utils\";\nconst OPTIMAL_LAYER_WIDTH = {\n    2: 0.3,\n    3: 0.17,\n    4: 0.121,\n};\nfunction getLayerWidth(length, layers) {\n    return OPTIMAL_LAYER_WIDTH[layers] || length / (layers * 1.9);\n}\nexport class Megaminx {\n    constructor(layers = 2) {\n        this.layers = layers;\n        const length = 0.75;\n        const megaminxRadius = dodecahedronInRadius(length);\n        const layerWidth = getLayerWidth(length, layers);\n        // Front\n        this.U = new DividedPentagon(WHITE, layers, length, layerWidth);\n        this.F = new DividedPentagon(RED, layers, length, layerWidth);\n        this.R = new DividedPentagon(BLUE, layers, length, layerWidth);\n        this.dr = new DividedPentagon(PINK, layers, length, layerWidth);\n        this.dl = new DividedPentagon(LIGHT_YELLOW, layers, length, layerWidth);\n        this.L = new DividedPentagon(GREEN, layers, length, layerWidth);\n        // Back\n        this.d = new DividedPentagon(GREY, layers, length, layerWidth);\n        this.br = new DividedPentagon(LIGHT_GREEN, layers, length, layerWidth);\n        this.BR = new DividedPentagon(YELLOW, layers, length, layerWidth);\n        this.BL = new DividedPentagon(PURPLE, layers, length, layerWidth);\n        this.bl = new DividedPentagon(DARK_BLUE, layers, length, layerWidth);\n        this.b = new DividedPentagon(ORANGE, layers, length, layerWidth);\n        this.F.translate([0, 0, megaminxRadius]);\n        this.b.rotate(Math.PI, [0, 0, 1]);\n        this.b.rotate(Math.PI, [0, 1, 0]);\n        this.b.translate([0, 0, megaminxRadius]);\n        this.U.rotate(Math.PI, [0, 0, 1]);\n        this.U.rotate(((180 - 116.57) * Math.PI) / 180, [1, 0, 0]);\n        this.U.translate([0, 0, megaminxRadius]);\n        this.L.rotate((72 * Math.PI) / 180, [0, 0, 1]);\n        this.L.rotate(Math.PI, [0, 0, 1]);\n        this.L.rotate(((180 - 116.57) * Math.PI) / 180, [1, 0, 0]);\n        this.L.translate([0, 0, megaminxRadius]);\n        this.R.rotate((72 * Math.PI) / 180, [0, 0, 1]);\n        this.R.rotate(Math.PI / 5, [0, 0, 1]);\n        this.R.rotate(((180 - 116.57) * Math.PI) / 180, [1, 0, 0]);\n        this.R.translate([0, 0, megaminxRadius]);\n        this.dr.rotate((72 * Math.PI) / 180, [0, 0, 1]);\n        this.dr.rotate(-Math.PI / 5, [0, 0, 1]);\n        this.dr.rotate(((180 - 116.57) * Math.PI) / 180, [1, 0, 0]);\n        this.dr.translate([0, 0, megaminxRadius]);\n        this.dl.rotate((72 * Math.PI) / 180, [0, 0, 1]);\n        this.dl.rotate((-3 * Math.PI) / 5, [0, 0, 1]);\n        this.dl.rotate(((180 - 116.57) * Math.PI) / 180, [1, 0, 0]);\n        this.dl.translate([0, 0, megaminxRadius]);\n        this.BL.rotate(Math.PI / 5, [0, 0, 1]);\n        this.BL.rotate((-116.57 * Math.PI) / 180, [1, 0, 0]);\n        this.BL.translate([0, 0, megaminxRadius]);\n        this.BR.rotate(-Math.PI / 5, [0, 0, 1]);\n        this.BR.rotate((-116.57 * Math.PI) / 180, [1, 0, 0]);\n        this.BR.translate([0, 0, megaminxRadius]);\n        this.bl.rotate((3 * Math.PI) / 5, [0, 0, 1]);\n        this.bl.rotate((-116.57 * Math.PI) / 180, [1, 0, 0]);\n        this.bl.translate([0, 0, megaminxRadius]);\n        this.d.rotate((5 * Math.PI) / 5, [0, 0, 1]);\n        this.d.rotate((-116.57 * Math.PI) / 180, [1, 0, 0]);\n        this.d.translate([0, 0, megaminxRadius]);\n        this.br.rotate((7 * Math.PI) / 5, [0, 0, 1]);\n        this.br.rotate((-116.57 * Math.PI) / 180, [1, 0, 0]);\n        this.br.translate([0, 0, megaminxRadius]);\n        this.stickers = [\n            this.U,\n            this.F,\n            this.R,\n            this.dr,\n            this.dl,\n            this.L,\n            this.d,\n            this.br,\n            this.BR,\n            this.BL,\n            this.bl,\n            this.b,\n        ];\n        this.group = new Group(this.stickers);\n    }\n    setColors(colors) {\n        let { U, R, F, d, L, b, dr, dl, br, BR, BL, bl } = colors;\n        this.setFaceColors(this.U, U);\n        this.setFaceColors(this.R, R);\n        this.setFaceColors(this.F, F);\n        this.setFaceColors(this.d, d);\n        this.setFaceColors(this.L, L);\n        this.setFaceColors(this.b, b);\n        this.setFaceColors(this.dr, dr);\n        this.setFaceColors(this.dl, dl);\n        this.setFaceColors(this.BR, BR);\n        this.setFaceColors(this.BL, BL);\n        this.setFaceColors(this.bl, bl);\n        this.setFaceColors(this.br, br);\n    }\n    setFaceColors(faceStickers, colors) {\n        faceStickers.faces.forEach((f, i) => {\n            if (colors && colors[i]) {\n                f.color = colors[i];\n            }\n            else {\n                f.color = BLACK;\n            }\n        });\n    }\n}\n","import { Face } from \"./face\";\nimport { Geometry } from \"./geometry\";\n/**\n * Makes a (size*size) grid of colored planes for the\n * rubiks cube stickers. Indexed from the top\n * left to bottom right. See Below\n *\n * ```\n *    0 1 2\n *    3 4 5\n *    6 7 8\n * ```\n *\n * @param length length of the grid\n * @param size number of elements to segment grid into\n * @param color\n */\nexport function makeGrid(length, size, color) {\n    const halfLength = length / 2;\n    const elementWidth = length / size;\n    const halfElementWidth = elementWidth / 2;\n    let stickers = [];\n    for (let i = 0; i < size; i++) {\n        let vOffset = -(-halfLength + halfElementWidth + elementWidth * i);\n        stickers = stickers.concat(makeRow(length, size, color, vOffset));\n    }\n    return stickers;\n}\n/**\n * Makes a row of planes for the rubiks cube stickers.\n * indexed from left to right\n *\n *     0 1 2\n *\n * @param length length of the row horizontally\n * @param size number of elements to segment row into\n * @param color color\n * @param vOffset vertical offset. places vertices of row vertically offset by this amount from x axis\n */\nexport function makeRow(length, size, color, vOffset = 0) {\n    const halfLength = length / 2;\n    const elementWidth = length / size;\n    const halfElementWidth = elementWidth / 2;\n    let stickers = [];\n    for (let i = 0; i < size; i++) {\n        let hOffset = -halfLength + halfElementWidth + elementWidth * i;\n        let vertices = [\n            [-halfElementWidth + hOffset, halfElementWidth + vOffset, 0],\n            [halfElementWidth + hOffset, halfElementWidth + vOffset, 0],\n            [halfElementWidth + hOffset, -halfElementWidth + vOffset, 0],\n            [-halfElementWidth + hOffset, -halfElementWidth + vOffset, 0],\n        ];\n        let faces = [new Face([0, 1, 2, 3], vertices, color)];\n        stickers.push(new Geometry(vertices, faces));\n    }\n    return stickers;\n}\n","import { vec3 } from \"gl-matrix\";\nimport { YELLOW, RED, BLUE, GREEN, ORANGE, BLACK, } from \"./../colors\";\nimport { Group } from \"./../../geometry/group\";\nimport { makeGrid, makeRow } from \"./../../geometry/grid\";\nexport class RubiksCubeTopLayer {\n    constructor(size, rotationAngle = Math.PI / 4) {\n        this.size = size;\n        this.stickerWidth = 1 / 2;\n        this.halfStickerWidth = this.stickerWidth / 2;\n        this.cubeWidth = this.stickerWidth * size;\n        this.halfCubeWidth = this.cubeWidth / 2;\n        this.U = new Group(makeGrid(this.cubeWidth, this.size, YELLOW));\n        this.R = new Group(makeRow(this.cubeWidth, this.size, RED));\n        this.F = new Group(makeRow(this.cubeWidth, this.size, BLUE));\n        this.B = new Group(makeRow(this.cubeWidth, this.size, GREEN));\n        this.L = new Group(makeRow(this.cubeWidth, this.size, ORANGE));\n        const borderOffset = this.halfCubeWidth + this.halfStickerWidth;\n        this.B.translate([0, borderOffset, 0]);\n        this.B.rotate(Math.PI, [0, 0, 1]);\n        this.F.translate([0, -borderOffset, 0]);\n        this.R.translate([borderOffset, 0, 0]);\n        this.R.rotate(Math.PI / 2, [0, 0, 1]);\n        this.L.translate([-borderOffset, 0, 0]);\n        this.L.rotate(-Math.PI / 2, [0, 0, 1]);\n        this.rotateBorder(this.F.objects, rotationAngle);\n        this.rotateBorder(this.R.objects, rotationAngle);\n        this.rotateBorder(this.B.objects, rotationAngle);\n        this.rotateBorder(this.L.objects, rotationAngle);\n        this.stickers = [this.U, this.R, this.F, this.B, this.L];\n        this.group = new Group(this.stickers);\n    }\n    setFaceColors(faceStickers, colors) {\n        faceStickers.objects.forEach((g, i) => {\n            if (colors && colors[i]) {\n                g.faces[0].color = colors[i];\n            }\n            else {\n                g.faces[0].color = BLACK;\n            }\n        });\n    }\n    setColors(colors) {\n        let { U, R, F, L, B } = colors;\n        this.setFaceColors(this.U, U);\n        this.setFaceColors(this.R, R);\n        this.setFaceColors(this.F, F);\n        this.setFaceColors(this.L, L);\n        this.setFaceColors(this.B, B);\n    }\n    /**\n     * given a row of stickers centered at 0,0,0\n     * rotates each vertex of each sticker around\n     * the top of the sticker.\n     */\n    rotateBorder(stickers, radians) {\n        stickers.forEach((sticker) => {\n            sticker.vertices = sticker.vertices.map((vertex) => {\n                return vec3.rotateX(vertex, vertex, [0, this.halfStickerWidth, 0], radians);\n            });\n        });\n    }\n}\n","import { YELLOW, RED, BLUE, WHITE, ORANGE, GREEN, BLACK, } from \"./../colors\";\nimport { Group } from \"./../../geometry/group\";\nimport { makeGrid } from \"../../geometry/grid\";\nexport class RubiksCubeNet {\n    constructor(size) {\n        const cubeWidth = 1;\n        this.size = size;\n        const U = makeGrid(cubeWidth, size, YELLOW);\n        const R = makeGrid(cubeWidth, size, RED);\n        const F = makeGrid(cubeWidth, size, BLUE);\n        const D = makeGrid(cubeWidth, size, WHITE);\n        const L = makeGrid(cubeWidth, size, ORANGE);\n        const B = makeGrid(cubeWidth, size, GREEN);\n        this.U = new Group(U);\n        this.U.translate([0, cubeWidth, 0]);\n        this.R = new Group(R);\n        this.R.translate([cubeWidth, 0, 0]);\n        this.F = new Group(F);\n        this.D = new Group(D);\n        this.D.translate([0, -cubeWidth, 0]);\n        this.L = new Group(L);\n        this.L.translate([-cubeWidth, 0, 0]);\n        this.B = new Group(B);\n        this.B.translate([2 * cubeWidth, 0, 0]);\n        this.stickers = [this.U, this.R, this.F, this.D, this.L, this.B];\n        this.group = new Group(this.stickers);\n        this.group.translate([-cubeWidth / 4, 0, 0]);\n        this.group.scale([0.5, 0.5, 0.5]);\n    }\n    setFaceColors(faceStickers, colors) {\n        faceStickers.objects.forEach((g, i) => {\n            if (colors && colors[i]) {\n                g.faces[0].color = colors[i];\n            }\n            else {\n                g.faces[0].color = BLACK;\n            }\n        });\n    }\n    setColors(colors) {\n        let { U, R, F, D, L, B } = colors;\n        this.setFaceColors(this.U, U);\n        this.setFaceColors(this.R, R);\n        this.setFaceColors(this.F, F);\n        this.setFaceColors(this.D, D);\n        this.setFaceColors(this.L, L);\n        this.setFaceColors(this.B, B);\n    }\n}\n","import { YELLOW, RED, BLUE, WHITE, ORANGE, GREEN, BLACK, } from \"./../colors\";\nimport { Group } from \"../../geometry/group\";\nimport { makeGrid } from \"../../geometry/grid\";\nexport class RubiksCube {\n    constructor(size) {\n        this.size = size;\n        const cubeWidth = 1.5;\n        const halfWidth = cubeWidth / 2;\n        this.U = new Group(makeGrid(cubeWidth, size, YELLOW));\n        this.R = new Group(makeGrid(cubeWidth, size, RED));\n        this.F = new Group(makeGrid(cubeWidth, size, BLUE));\n        this.D = new Group(makeGrid(cubeWidth, size, WHITE));\n        this.L = new Group(makeGrid(cubeWidth, size, ORANGE));\n        this.B = new Group(makeGrid(cubeWidth, size, GREEN));\n        this.U.rotate(-Math.PI / 2, [0, 1, 0]);\n        this.U.rotate(-Math.PI / 2, [1, 0, 0]);\n        this.U.translate([0, 0, halfWidth]);\n        this.R.translate([0, 0, halfWidth]);\n        this.F.rotate(-Math.PI / 2, [0, 1, 0]);\n        this.F.translate([0, 0, halfWidth]);\n        this.D.rotate(-Math.PI / 2, [0, 1, 0]);\n        this.D.rotate(Math.PI / 2, [1, 0, 0]);\n        this.D.translate([0, 0, halfWidth]);\n        this.L.rotate(-Math.PI, [0, 1, 0]);\n        this.L.translate([0, 0, halfWidth]);\n        this.B.rotate(Math.PI / 2, [0, 1, 0]);\n        this.B.translate([0, 0, halfWidth]);\n        this.stickers = [this.U, this.R, this.F, this.D, this.L, this.B];\n        this.group = new Group(this.stickers);\n        this.group.translate([0, 0, -1]);\n        this.group.rotate(0.593411946, [1, 0, 0]);\n        this.group.rotate(0.785398, [0, 1, 0]);\n    }\n    setFaceColors(faceStickers, colors) {\n        faceStickers.objects.forEach((g, i) => {\n            if (colors && colors[i]) {\n                g.faces[0].color = colors[i];\n            }\n            else {\n                g.faces[0].color = BLACK;\n            }\n        });\n    }\n    setColors(colors) {\n        let { U, R, F, D, L, B } = colors;\n        this.setFaceColors(this.U, U);\n        this.setFaceColors(this.R, R);\n        this.setFaceColors(this.F, F);\n        this.setFaceColors(this.D, D);\n        this.setFaceColors(this.L, L);\n        this.setFaceColors(this.B, B);\n    }\n}\n","export function createSVGElement(width, height, minx, miny, svgWidth, svgHeight) {\n    const svgElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    svgElement.setAttributeNS(null, \"width\", width.toString());\n    svgElement.setAttributeNS(null, \"height\", height.toString());\n    svgElement.setAttributeNS(null, \"viewBox\", `${minx} ${miny} ${svgWidth} ${svgHeight}`);\n    svgElement.setAttributeNS(null, \"id\", \"sr-visualizer\");\n    return svgElement;\n}\nexport function createPolygonElement(points, color, strokeWidth) {\n    const polygon = document.createElementNS(\"http://www.w3.org/2000/svg\", \"polygon\");\n    updatePolygonElement(polygon, points, color, strokeWidth);\n    return polygon;\n}\nexport function updatePolygonElement(polygon, points, color, strokeWidth) {\n    const pointsAttribute = makePointsAttributeValue(points);\n    const colorValue = color ? color.value : \"black\";\n    const strokeValue = (color && color.stroke) || \"#000000\";\n    polygon.setAttributeNS(null, \"points\", pointsAttribute);\n    polygon.setAttributeNS(null, \"fill\", colorValue);\n    if (strokeWidth) {\n        polygon.setAttributeNS(null, \"stroke\", strokeValue);\n        polygon.setAttributeNS(null, \"stroke-width\", strokeWidth);\n    }\n    polygon.setAttributeNS(null, \"stroke-linejoin\", \"round\");\n}\nexport function clearSVG(svg) {\n    while (svg.hasChildNodes()) {\n        svg.removeChild(svg.lastChild);\n    }\n}\nfunction makePointsAttributeValue(points) {\n    return points.reduce((pointString, point) => {\n        return `${pointString ? pointString + \" \" : \"\"}${point[0]}, ${point[1]}`;\n    }, \"\");\n}\n","import { vec3 } from \"gl-matrix\";\nimport { Geometry } from \"../geometry/geometry\";\nimport { Group } from \"../geometry/group\";\nimport { createSVGElement, createPolygonElement, updatePolygonElement, } from \"../svg/svg\";\n/**\n * A renderer that renders a scene viewed by a camera to an svg element.\n */\nexport class CustomSVGRenderer {\n    /**\n     * Creates an SVG renderer. This will create it's own html `<svg>` element. it's\n     * the user's job to add this element to the page.\n     *\n     * @example\n     * ```\n     * const renderer = new CustomSVGRenderer(width, height, minx, miny, svgWidth, svgHeight)\n     * document.getElementById('my-element').appendChild(renderer.domElement);\n     * ```\n     *\n     * @param width svg element width in pixels\n     * @param height svg element height in pixels\n     * @param minx min x for the svg element viewbox\n     * @param miny min x for the svg element viewbox\n     * @param svgWidth svg viewbox width\n     * @param svgHeight svg viewbox height\n     */\n    constructor(width, height, minx, miny, svgWidth, svgHeight) {\n        this.strokeWidth = \"0.035\";\n        this.polygons = [];\n        this.uidToPolygon = {};\n        this.domElement = document.createElement(\"div\");\n        this.domElement.className = \"svg-renderer\";\n        this.svgElement = createSVGElement(width, height, minx, miny, svgWidth, svgHeight);\n        this.domElement.appendChild(this.svgElement);\n    }\n    render(scene, camera) {\n        this.polygons = [];\n        // this.sortObjects(scene.objects, camera, []);\n        scene.objects.forEach((object) => {\n            this.renderObject3D(object, camera, []);\n        });\n        this.renderPolygons();\n    }\n    renderPolygons() {\n        this.polygons.sort((a, b) => {\n            return a.centroid[2] - b.centroid[2];\n        });\n        this.polygons.forEach((p) => this.svgElement.appendChild(p.polygon));\n    }\n    addPolygon(points, face, object, transformations) {\n        if (!this.uidToPolygon[face.uid]) {\n            // Create new polygon for a face that hasn't been rendered\n            this.uidToPolygon[face.uid] = createPolygonElement(points, face.color || object.color, this.strokeWidth);\n        }\n        else {\n            // Just update existing polygon element\n            const polygon = this.uidToPolygon[face.uid];\n            updatePolygonElement(polygon, points, face.color || object.color, this.strokeWidth);\n        }\n        this.polygons.push({\n            polygon: this.uidToPolygon[face.uid],\n            centroid: this.applyTransformations(face.centroid, [\n                object.matrix,\n                ...transformations,\n            ]),\n        });\n    }\n    renderObject3D(object, camera, transformations) {\n        if (object instanceof Geometry) {\n            this.renderGeometry(object, camera, transformations);\n        }\n        else if (object instanceof Group) {\n            let group = object;\n            this.sortObjects(group.objects, camera, [\n                group.matrix,\n                ...transformations,\n            ]);\n            group.objects.forEach((object) => {\n                this.renderObject3D(object, camera, [group.matrix, ...transformations]);\n            });\n        }\n    }\n    renderGeometry(object, camera, transformations) {\n        // this.sortFaces(object.faces, object, transformations);\n        object.faces.forEach((face) => {\n            let points = [];\n            face.indices\n                .map((index) => object.vertices[index])\n                .forEach((vertex) => {\n                let objectToScreen = [\n                    object.matrix,\n                    ...transformations,\n                    camera.matrix,\n                ];\n                let v = this.applyTransformations(vertex, objectToScreen);\n                // Need to flip y to look correct on svg viewbox\n                let screenPoint = vec3.multiply(v, v, [1, -1, 1]);\n                points.push(screenPoint);\n            });\n            this.addPolygon(points, face, object, transformations);\n        });\n    }\n    sortFaces(faces, object, transformations) {\n        faces.sort((a, b) => {\n            let aToWorld = [object.matrix, ...transformations];\n            let bToWorld = [object.matrix, ...transformations];\n            let aCentroid = this.applyTransformations(a.centroid, aToWorld);\n            let bCentroid = this.applyTransformations(b.centroid, bToWorld);\n            // TODO actually use camera, currently only sorting by Z\n            return aCentroid[2] - bCentroid[2];\n        });\n    }\n    sortObjects(objects, camera, transformations) {\n        objects.sort((a, b) => {\n            let aToWorld = [a.matrix, ...transformations];\n            let bToWorld = [b.matrix, ...transformations];\n            let aCentroid = this.applyTransformations(a.centroid, aToWorld);\n            let bCentroid = this.applyTransformations(b.centroid, bToWorld);\n            // TODO actually use camera, currently only sorting by Z\n            return aCentroid[2] - bCentroid[2];\n        });\n    }\n    applyTransformations(vertex, transforms) {\n        return transforms.reduce((v, t) => {\n            return vec3.transformMat4(v, v, t);\n        }, vec3.clone(vertex));\n    }\n}\n","import { mat4 } from \"gl-matrix\";\nexport class Camera {\n    constructor() {\n        this.matrix = mat4.create();\n        mat4.perspective(this.matrix, Math.PI / 2, 1, 0.1, 1000);\n        mat4.translate(this.matrix, this.matrix, [0, 0, -5]);\n        mat4.scale(this.matrix, this.matrix, [4, 4, 1]);\n    }\n}\n","export class Scene {\n    constructor() {\n        this.objects = [];\n    }\n    add(geometry) {\n        this.objects.push(geometry);\n    }\n    clear() {\n        this.objects = [];\n    }\n}\n","export var VisualizerType;\n(function (VisualizerType) {\n    VisualizerType[\"CUBE\"] = \"cube\";\n    VisualizerType[\"CUBE_NET\"] = \"cube-net\";\n    VisualizerType[\"CUBE_TOP\"] = \"cube-top\";\n    VisualizerType[\"MEGAMINX\"] = \"megaminx\";\n    VisualizerType[\"MEGAMINX_NET\"] = \"megaminx-net\";\n    VisualizerType[\"PYRAMINX\"] = \"pyraminx\";\n    VisualizerType[\"PYRAMINX_NET\"] = \"pyraminx-net\";\n    VisualizerType[\"SKEWB\"] = \"skewb\";\n    VisualizerType[\"SKEWB_NET\"] = \"skewb-net\";\n    VisualizerType[\"SQUARE1\"] = \"square1\";\n    VisualizerType[\"SQUARE1_NET\"] = \"square1-net\";\n})(VisualizerType || (VisualizerType = {}));\n","import { RubiksCubeTopLayer } from \"./../puzzles/rubiksCube/rubiksCubeTop\";\nimport { Square1Net } from \"./../puzzles/square1/square1Net\";\nimport { Square1Simualtor } from \"./../simulator/square1/square1Simulator\";\nimport { Square1 } from \"./../puzzles/square1/square1\";\nimport { SkewbNet } from \"./../puzzles/skewbNet\";\nimport { SkewbSimulator } from \"./../simulator/skewb/skewbSimulator\";\nimport { Skewb } from \"./../puzzles/skewb\";\nimport { PyraminxSimulator } from \"./../simulator/pyraminx/pyraminxSimulator\";\nimport { PyraminxNet } from \"./../puzzles/pyraminxNet\";\nimport { MegaminxNet } from \"./../puzzles/megaminxNet\";\nimport { Megaminx } from \"./../puzzles/megaminx\";\nimport { MegaminxSimulator } from \"./../simulator/megaminx/megaminxSimulator\";\nimport { RubiksCubeNet } from \"./../puzzles/rubiksCube/rubiksCubeNet\";\nimport { RubiksCube } from \"../puzzles/rubiksCube/rubiksCube\";\nimport { RubiksCubeSimulator } from \"../simulator/rubiksCube/rubiksCubeSimulator\";\nimport { Pyraminx } from \"../puzzles/pyraminx\";\nexport function createCube(options = {}) {\n    const geometry = new RubiksCube(options.size);\n    const simulator = new RubiksCubeSimulator(options.size);\n    return [geometry, simulator];\n}\nexport function createCubeNet(options = {}) {\n    const geometry = new RubiksCubeNet(options.size);\n    const simulator = new RubiksCubeSimulator(options.size);\n    return [geometry, simulator];\n}\nexport function createCubeTop(options = {}) {\n    const geometry = new RubiksCubeTopLayer(options.size);\n    const simulator = new RubiksCubeSimulator(options.size);\n    return [geometry, simulator];\n}\nexport function createMegaminx(options = {}) {\n    const geometry = new Megaminx(options.size);\n    const simulator = new MegaminxSimulator();\n    return [geometry, simulator];\n}\nexport function createMegaminxNet(options = {}) {\n    const geometry = new MegaminxNet(options.size);\n    const simulator = new MegaminxSimulator();\n    return [geometry, simulator];\n}\nexport function createPyraminx(options = {}) {\n    const geometry = new Pyraminx(options.size);\n    const simulator = new PyraminxSimulator();\n    return [geometry, simulator];\n}\nexport function createPyraminxNet(options = {}) {\n    const geometry = new PyraminxNet(options.size);\n    const simulator = new PyraminxSimulator();\n    return [geometry, simulator];\n}\nexport function createSkewb(options = {}) {\n    const geometry = new Skewb();\n    const simulator = new SkewbSimulator();\n    return [geometry, simulator];\n}\nexport function createSkewbNet(options = {}) {\n    const geometry = new SkewbNet();\n    const simulator = new SkewbSimulator();\n    return [geometry, simulator];\n}\nexport function createSquare1(options = {}) {\n    const simulator = initSquare1Simulator(options);\n    const geometry = new Square1(simulator.topLayer, simulator.bottomLayer, simulator.middleRotated);\n    return [geometry, simulator];\n}\nexport function createSquare1Net(options = {}) {\n    const simulator = initSquare1Simulator(options);\n    const geometry = new Square1Net(simulator.topLayer, simulator.bottomLayer, simulator.middleRotated);\n    return [geometry, simulator];\n}\nfunction initSquare1Simulator(options) {\n    const simulator = new Square1Simualtor();\n    if (options.case) {\n        simulator.case(options.case);\n    }\n    else if (options.alg) {\n        simulator.alg(options.alg);\n    }\n    return simulator;\n}\n","import { RED, BLUE, WHITE, ORANGE, GREEN, PINK, LIGHT_YELLOW, LIGHT_GREEN, PURPLE, DARK_BLUE, GREY, MASK_COLOR, } from \"./../puzzles/colors\";\nimport { VisualizerType } from \"./enum\";\nimport { Scene } from \"../rendering/scene\";\nimport { Camera } from \"./../rendering/camera\";\nimport { createCube, createCubeNet, createCubeTop, createMegaminx, createMegaminxNet, createPyraminx, createPyraminxNet, createSkewb, createSkewbNet, createSquare1, createSquare1Net, } from \"./puzzleCreator\";\nimport { YELLOW } from \"../puzzles/colors\";\nconst defaultCubeOptions = {\n    size: 3,\n    scheme: {\n        U: YELLOW,\n        R: RED,\n        F: BLUE,\n        D: WHITE,\n        L: ORANGE,\n        B: GREEN,\n    },\n};\nconst defaultMegaminxOptions = {\n    size: 2,\n    scheme: {\n        U: WHITE,\n        F: RED,\n        R: BLUE,\n        dr: PINK,\n        dl: LIGHT_YELLOW,\n        L: GREEN,\n        d: GREY,\n        br: LIGHT_GREEN,\n        BR: YELLOW,\n        BL: PURPLE,\n        bl: DARK_BLUE,\n        b: ORANGE,\n    },\n};\nconst defaultPyraminxOptions = {\n    size: 3,\n    scheme: {\n        left: BLUE,\n        right: GREEN,\n        top: YELLOW,\n        back: RED,\n    },\n};\nconst defaultSkewbOptions = {\n    scheme: {\n        top: YELLOW,\n        front: BLUE,\n        right: RED,\n        back: GREEN,\n        left: ORANGE,\n        bottom: WHITE,\n    },\n};\nconst defaultSquare1Options = {};\nfunction getDefaultOptions(type) {\n    switch (type) {\n        case VisualizerType.CUBE:\n        case VisualizerType.CUBE_NET:\n        case VisualizerType.CUBE_TOP:\n            return defaultCubeOptions;\n        case VisualizerType.MEGAMINX:\n        case VisualizerType.MEGAMINX_NET:\n            return defaultMegaminxOptions;\n        case VisualizerType.PYRAMINX:\n        case VisualizerType.PYRAMINX_NET:\n            return defaultPyraminxOptions;\n        case VisualizerType.SKEWB:\n        case VisualizerType.SKEWB_NET:\n            return defaultSkewbOptions;\n        case VisualizerType.SQUARE1:\n        case VisualizerType.SQUARE1_NET:\n            return defaultSquare1Options;\n        default:\n            throw new Error(`Could not get default options for puzzle ${type}`);\n    }\n}\n/**\n * Applies a color scheme to simulator values\n *\n * @param faceValues face values from the simulator\n * @param scheme color scheme to\n */\nfunction applyColorScheme(faceValues, scheme) {\n    return Object.keys(faceValues).reduce((colors, face) => {\n        colors[face] = faceValues[face].map((value) => scheme[value] || MASK_COLOR);\n        return colors;\n    }, {});\n}\n/**\n * Creates puzzle geometry and and simulator for a given puzzle type.\n * Will initialize the geometry and simulator based on puzzle options\n * passed in\n *\n * @param type Type of the puzzle {@link VisualizerType} (cube, skewb, etc...)\n * @param options  Puzzle options {@link PuzzleOptions}\n */\nfunction puzzleFactory(type, options) {\n    switch (type) {\n        case VisualizerType.CUBE:\n            return createCube(options);\n        case VisualizerType.CUBE_NET:\n            return createCubeNet(options);\n        case VisualizerType.CUBE_TOP:\n            return createCubeTop(options);\n        case VisualizerType.MEGAMINX:\n            return createMegaminx(options);\n        case VisualizerType.MEGAMINX_NET:\n            return createMegaminxNet(options);\n        case VisualizerType.PYRAMINX:\n            return createPyraminx(options);\n        case VisualizerType.PYRAMINX_NET:\n            return createPyraminxNet(options);\n        case VisualizerType.SKEWB:\n            return createSkewb(options);\n        case VisualizerType.SKEWB_NET:\n            return createSkewbNet(options);\n        case VisualizerType.SQUARE1:\n            return createSquare1(options);\n        case VisualizerType.SQUARE1_NET:\n            return createSquare1Net(options);\n    }\n}\nfunction isSquare1(type) {\n    return type === VisualizerType.SQUARE1 || type === VisualizerType.SQUARE1_NET;\n}\n/**\n * Encapsulates logic for setting up a puzzle environment for rendering\n * images. Sets up puzzle geometry, applies any algorithm or masking\n * if necessary, and renders the puzzle\n */\nexport class Visualizer {\n    constructor(renderer, type, options = {}) {\n        this.type = type;\n        this.camera = new Camera();\n        this.scene = new Scene();\n        this.renderer = renderer;\n        options = Object.assign(Object.assign({}, getDefaultOptions(type)), options);\n        [this.puzzleGeometry, this.simulator] = puzzleFactory(type, options);\n        this.scene.add(this.puzzleGeometry.group);\n        if (options.stickerColors && !isSquare1(type)) {\n            this.applyManualColors(options);\n        }\n        else {\n            this.applySimulatorColors(options);\n        }\n        this.render();\n    }\n    applyManualColors(options) {\n        this.puzzleGeometry.setColors(options.stickerColors);\n    }\n    applySimulatorColors(options) {\n        if (options.mask)\n            this.applyMask(options);\n        if (options.alg || options.case)\n            this.applyAlgorithm(options);\n        const faceValues = this.simulator.getValues();\n        const faceColors = applyColorScheme(faceValues, options.scheme);\n        this.puzzleGeometry.setColors(faceColors);\n    }\n    applyAlgorithm(options) {\n        if (isSquare1(this.type)) {\n            // puzzle factory applies algorithm to square 1 when greating the puzzle geometry\n            return;\n        }\n        if (options.case) {\n            this.simulator.case(options.case);\n        }\n        else if (options.alg) {\n            this.simulator.alg(options.alg);\n        }\n    }\n    applyMask(options) {\n        Object.keys(options.mask).forEach((maskedFace) => {\n            options.mask[maskedFace].forEach((index) => this.simulator.setValue(maskedFace, index, \"mask\"));\n        });\n    }\n    render() {\n        this.renderer.render(this.scene, this.camera);\n    }\n}\n","import { CustomSVGRenderer } from \"./../rendering/customSvgRenderer\";\nimport { Visualizer } from \"./visualizer\";\nconst defaultOptions = {\n    width: 500,\n    height: 500,\n    minx: -0.9,\n    miny: -0.9,\n    svgWidth: 1.8,\n    svgHeight: 1.8,\n    strokeWidth: 0.02,\n};\n/**\n * Visualize puzzles with svg in a DOM\n */\nexport function SVG(element, type, options = {}) {\n    options = Object.assign(Object.assign({}, defaultOptions), options);\n    if (typeof element === \"string\") {\n        element = document.querySelector(element);\n        if (element === null) {\n            throw new Error(`Could not find visuzlier element by query selector: ${element}`);\n        }\n    }\n    const renderer = new CustomSVGRenderer(options.width, options.height, options.minx, options.miny, options.svgWidth, options.svgHeight);\n    renderer.strokeWidth = \"\" + options.strokeWidth;\n    element.appendChild(renderer.domElement);\n    return new Visualizer(renderer, type, options.puzzle);\n}\n","export const Masks = {\n    CUBE_3: {\n        LAST_LAYER: {\n            F: [3, 4, 5, 6, 7, 8],\n            B: [3, 4, 5, 6, 7, 8],\n            R: [3, 4, 5, 6, 7, 8],\n            L: [3, 4, 5, 6, 7, 8],\n            D: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        },\n        F2L: {\n            F: [0, 1, 2],\n            B: [0, 1, 2],\n            R: [0, 1, 2],\n            L: [0, 1, 2],\n            U: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        },\n        FIRST_LAYER: {\n            F: [0, 1, 2, 3, 4, 5],\n            B: [0, 1, 2, 3, 4, 5],\n            R: [0, 1, 2, 3, 4, 5],\n            L: [0, 1, 2, 3, 4, 5],\n            U: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        },\n        OLL: {\n            R: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n            F: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n            D: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n            L: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n            B: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        },\n        CORNERS_LAST_LAYER: {\n            U: [1, 3, 5, 7],\n            F: [1, 3, 4, 5, 6, 7, 8],\n            B: [1, 3, 4, 5, 6, 7, 8],\n            R: [1, 3, 4, 5, 6, 7, 8],\n            L: [1, 3, 4, 5, 6, 7, 8],\n            D: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        },\n        EDGES_LAST_LAYER: {\n            U: [0, 2, 6, 8],\n            F: [0, 2, 3, 4, 5, 6, 7, 8],\n            B: [0, 2, 3, 4, 5, 6, 7, 8],\n            R: [0, 2, 3, 4, 5, 6, 7, 8],\n            L: [0, 2, 3, 4, 5, 6, 7, 8],\n            D: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        },\n    },\n};\n","import { TurnType } from './algorithms/algorithm';\nimport { parseCubeAlgorithm } from './algorithms/cube';\nimport { Square1Simualtor } from './simulator/square1/square1Simulator';\nimport { SkewbSimulator } from './simulator/skewb/skewbSimulator';\nimport { PyraminxSimulator } from './simulator/pyraminx/pyraminxSimulator';\nimport { MegaminxSimulator } from './simulator/megaminx/megaminxSimulator';\nimport { RubiksCubeSimulator } from './simulator/rubiksCube/rubiksCubeSimulator';\nimport { Square1Net } from './puzzles/square1/square1Net';\nimport { Square1 } from './puzzles/square1/square1';\nimport { SkewbNet } from './puzzles/skewbNet';\nimport { Skewb } from './puzzles/skewb';\nimport { PyraminxNet } from './puzzles/pyraminxNet';\nimport { Pyraminx } from './puzzles/pyraminx';\nimport { MegaminxNet } from './puzzles/megaminxNet';\nimport { Megaminx } from './puzzles/megaminx';\nimport { RubiksCubeTopLayer } from './puzzles/rubiksCube/rubiksCubeTop';\nimport { RubiksCubeNet } from './puzzles/rubiksCube/rubiksCubeNet';\nimport { RubiksCube } from './puzzles/rubiksCube/rubiksCube';\nimport { CustomSVGRenderer } from './rendering/customSvgRenderer';\nimport { Camera } from './rendering/camera';\nimport { Scene } from \"./rendering/scene\";\nimport { parseMegaminxAlgorithm } from './algorithms/megaminx';\nimport { parsePyraminxAlgorithm } from './algorithms/pyraminx';\nimport { parseSkewbAlgorithm } from './algorithms/skewb';\nimport { parseSquare1Algorithm } from './algorithms/square1';\nexport * from \"./visualizer\";\nexport * from \"./rendering/renderer\";\nexport const Rendering = {\n    Scene,\n    Camera,\n    CustomSVGRenderer\n};\nexport const PuzzleGeometry = {\n    RubiksCube,\n    RubiksCubeNet,\n    RubiksCubeTopLayer,\n    Megaminx,\n    MegaminxNet,\n    Pyraminx,\n    PyraminxNet,\n    Skewb,\n    SkewbNet,\n    Square1,\n    Square1Net\n};\nexport const Simulator = {\n    RubiksCubeSimulator,\n    MegaminxSimulator,\n    PyraminxSimulator,\n    SkewbSimulator,\n    Square1Simualtor\n};\nexport const Algorithm = {\n    TurnType,\n    parseCubeAlgorithm: parseCubeAlgorithm,\n    parseMegaminxAlgorithm: parseMegaminxAlgorithm,\n    parsePyraminxAlgorithm: parsePyraminxAlgorithm,\n    parseSkewbAlgorithm: parseSkewbAlgorithm,\n    parseSquare1Algorithm: parseSquare1Algorithm\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(195);\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"sourceRoot":""}