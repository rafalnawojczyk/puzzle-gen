{"version":3,"file":"puzzleGen.min.js","mappings":"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","sources":["webpack://puzzleGen/webpack/universalModuleDefinition","webpack://puzzleGen/webpack/bootstrap","webpack://puzzleGen/webpack/runtime/define property getters","webpack://puzzleGen/webpack/runtime/hasOwnProperty shorthand","webpack://puzzleGen/webpack/runtime/make namespace object","webpack://puzzleGen/./src/algorithms/algorithm.ts","webpack://puzzleGen/./src/algorithms/cube.ts","webpack://puzzleGen/./src/simulator/simulator.ts","webpack://puzzleGen/./src/puzzles/colors.ts","webpack://puzzleGen/./src/puzzles/square1/enum.ts","webpack://puzzleGen/./src/math/vector.ts","webpack://puzzleGen/./src/puzzles/square1/constants.ts","webpack://puzzleGen/./src/algorithms/square1.ts","webpack://puzzleGen/./src/simulator/square1/square1Simulator.ts","webpack://puzzleGen/./src/algorithms/skewb.ts","webpack://puzzleGen/./src/utils/arrays.ts","webpack://puzzleGen/./src/simulator/skewb/skewbSimulator.ts","webpack://puzzleGen/./src/algorithms/pyraminx.ts","webpack://puzzleGen/./src/simulator/pyraminx/pyraminxSimulator.ts","webpack://puzzleGen/./src/simulator/megaminx/constants.ts","webpack://puzzleGen/./src/algorithms/megaminx.ts","webpack://puzzleGen/./src/simulator/megaminx/megaminxSimulator.ts","webpack://puzzleGen/./src/simulator/rubiksCube/constants.ts","webpack://puzzleGen/./src/math/utils.ts","webpack://puzzleGen/./src/simulator/rubiksCube/rubiksCubeSimulator.ts","webpack://puzzleGen/./src/geometry/uid.ts","webpack://puzzleGen/./src/math/matrix.ts","webpack://puzzleGen/./src/geometry/object3d.ts","webpack://puzzleGen/./src/geometry/group.ts","webpack://puzzleGen/./src/math/constants.ts","webpack://puzzleGen/./src/puzzles/square1/interface.ts","webpack://puzzleGen/./src/geometry/face.ts","webpack://puzzleGen/./src/geometry/geometry.ts","webpack://puzzleGen/./src/puzzles/square1/square1Net.ts","webpack://puzzleGen/./src/puzzles/square1/square1.ts","webpack://puzzleGen/./src/geometry/plane.ts","webpack://puzzleGen/./src/geometry/triangle.ts","webpack://puzzleGen/./src/puzzles/skewbNet.ts","webpack://puzzleGen/./src/puzzles/skewb.ts","webpack://puzzleGen/./src/geometry/triangleLattice.ts","webpack://puzzleGen/./src/puzzles/pyraminxNet.ts","webpack://puzzleGen/./src/puzzles/pyraminx.ts","webpack://puzzleGen/./src/geometry/dividedPentagon.ts","webpack://puzzleGen/./src/puzzles/megaminxNet.ts","webpack://puzzleGen/./src/puzzles/megaminx.ts","webpack://puzzleGen/./src/geometry/grid.ts","webpack://puzzleGen/./src/puzzles/rubiksCube/rubiksCubeTop.ts","webpack://puzzleGen/./src/puzzles/rubiksCube/rubiksCubeNet.ts","webpack://puzzleGen/./src/puzzles/rubiksCube/rubiksCube.ts","webpack://puzzleGen/./src/geometry/arrow.ts","webpack://puzzleGen/./src/rendering/utils.ts","webpack://puzzleGen/./src/rendering/polygonRenderer.ts","webpack://puzzleGen/./src/svg/svg.ts","webpack://puzzleGen/./src/rendering/htmlSvgRenderer.ts","webpack://puzzleGen/./src/rendering/htmlCanvasRenderer.ts","webpack://puzzleGen/./src/rendering/camera.ts","webpack://puzzleGen/./src/rendering/scene.ts","webpack://puzzleGen/./src/visualizer/enum.ts","webpack://puzzleGen/./src/visualizer/options.ts","webpack://puzzleGen/./src/visualizer/interface.ts","webpack://puzzleGen/./src/puzzles/megaminxTop.ts","webpack://puzzleGen/./src/visualizer/puzzleCreator.ts","webpack://puzzleGen/./src/math/quaternion.ts","webpack://puzzleGen/./src/visualizer/visualizer.ts","webpack://puzzleGen/./src/visualizer/svg.ts","webpack://puzzleGen/./src/visualizer/png.ts","webpack://puzzleGen/./src/visualizer/canvas.ts","webpack://puzzleGen/./src/visualizer/mask.ts","webpack://puzzleGen/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"puzzleGen\"] = factory();\n\telse\n\t\troot[\"puzzleGen\"] = factory();\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export var TurnType;\n(function (TurnType) {\n    TurnType[TurnType[\"Clockwise\"] = 0] = \"Clockwise\";\n    TurnType[TurnType[\"CounterClockwise\"] = 1] = \"CounterClockwise\";\n    TurnType[TurnType[\"Double\"] = 2] = \"Double\";\n})(TurnType || (TurnType = {}));\n","import { TurnType } from \"./algorithm\";\nvar TurnAbbreviation;\n(function (TurnAbbreviation) {\n    TurnAbbreviation[\"Clockwise\"] = \"\";\n    TurnAbbreviation[\"CounterClockwise\"] = \"'\";\n    TurnAbbreviation[\"Double\"] = \"2\";\n})(TurnAbbreviation || (TurnAbbreviation = {}));\nexport var CubeAlgorithmUnit;\n(function (CubeAlgorithmUnit) {\n    CubeAlgorithmUnit[\"F\"] = \"F\";\n    CubeAlgorithmUnit[\"U\"] = \"U\";\n    CubeAlgorithmUnit[\"R\"] = \"R\";\n    CubeAlgorithmUnit[\"L\"] = \"L\";\n    CubeAlgorithmUnit[\"D\"] = \"D\";\n    CubeAlgorithmUnit[\"B\"] = \"B\";\n    CubeAlgorithmUnit[\"M\"] = \"M\";\n    CubeAlgorithmUnit[\"E\"] = \"E\";\n    CubeAlgorithmUnit[\"S\"] = \"S\";\n    CubeAlgorithmUnit[\"X\"] = \"x\";\n    CubeAlgorithmUnit[\"Y\"] = \"y\";\n    CubeAlgorithmUnit[\"Z\"] = \"z\";\n})(CubeAlgorithmUnit || (CubeAlgorithmUnit = {}));\nexport const possibleMoves = [\n    CubeAlgorithmUnit.F,\n    CubeAlgorithmUnit.U,\n    CubeAlgorithmUnit.R,\n    CubeAlgorithmUnit.L,\n    CubeAlgorithmUnit.D,\n    CubeAlgorithmUnit.B,\n    CubeAlgorithmUnit.M,\n    CubeAlgorithmUnit.E,\n    CubeAlgorithmUnit.S,\n    CubeAlgorithmUnit.X,\n    CubeAlgorithmUnit.Y,\n    CubeAlgorithmUnit.Z,\n];\nconst cubeRotations = [\n    CubeAlgorithmUnit.X,\n    CubeAlgorithmUnit.Y,\n    CubeAlgorithmUnit.Z,\n];\nconst cubeTurnRegex = /([0-9]+)?([UuFfRrDdLlBbMESxyz])(w)?([2\\'])?/g;\n/**\n * Takes in an algorithm string and parses the turns from it\n * algorithm string format should be moves separated by a single space\n * (ex. \"U R2 L' x\")\n *\n * https://www.worldcubeassociation.org/regulations/#article-12-notation\n */\nexport function parseCubeAlgorithm(algorithm) {\n    if (!algorithm) {\n        return [];\n    }\n    let turns = [];\n    let match;\n    while ((match = cubeTurnRegex.exec(algorithm))) {\n        let rawSlices = match[1];\n        let rawFace = match[2];\n        let outerBlockIndicator = match[3];\n        let rawType = match[4] || TurnAbbreviation.Clockwise; // Default to clockwise\n        let isLowerCaseMove = rawFace === rawFace.toLowerCase() &&\n            cubeRotations.indexOf(rawFace) === -1;\n        if (isLowerCaseMove) {\n            rawFace = rawFace.toUpperCase();\n        }\n        let turn = {\n            unit: getMove(rawFace),\n            turnType: getTurnType(rawType),\n            slices: isLowerCaseMove ? 2 : getSlices(rawSlices, outerBlockIndicator),\n        };\n        turns.push(turn);\n    }\n    return turns;\n}\nfunction getSlices(rawSlices, outerBlockIndicator) {\n    if (outerBlockIndicator && !rawSlices) {\n        return 2;\n    }\n    else if (!outerBlockIndicator && rawSlices) {\n        throw new Error(`Invalid move: Cannot specify num slices if outer block move indicator 'w' is not present`);\n    }\n    else if (!outerBlockIndicator && !rawSlices) {\n        return 1;\n    }\n    else {\n        const intValue = parseInt(rawSlices);\n        if (intValue > 1) {\n            return intValue;\n        }\n        throw new Error(`Invalid outer block move (${intValue}) must be greater than 1`);\n    }\n}\nfunction getMove(rawFace) {\n    if (possibleMoves.indexOf(rawFace) < 0) {\n        throw new Error(`Invalid move (${rawFace}): Possible turn faces are [U R F L D B M E S x y z]`);\n    }\n    else\n        return rawFace;\n}\nfunction getTurnType(rawType) {\n    switch (rawType) {\n        case TurnAbbreviation.Clockwise:\n            return TurnType.Clockwise;\n        case TurnAbbreviation.CounterClockwise:\n            return TurnType.CounterClockwise;\n        case TurnAbbreviation.Double:\n            return TurnType.Double;\n        default:\n            throw new Error(`Invalid move modifier (${rawType})`);\n    }\n}\n","/**\n * Class for simulating turns on symmetric twisty puzzles. This is acheived by\n * defining a set of faces with stickers, and a set of turns.\n *\n * @see {@link SkewbSimulator}\n *\n * @example\n * ```typescript\n * // extend class to create a coin simulator\n * export class CoinSimulator extends Simulator {\n *   constructor() {\n *     super()\n *\n *     // Add a head face with one \"heads\" sticker\n *     // Label this face \"top\"\n *      const { stickerIds: top } = this.addFace(['heads'], 'top');\n *\n *     // Add a tail face with one \"tails\" sticker\n *     // Label this face \"bottom\"\n *      const { stickerIds: bottom } = this.addface(['tails'], 'bottom');\n *\n *     // Define a turn by providing the\n *     // sticker id for the top and bottom stickers.\n *     // Label this \"turnOver\"\n *     this.addTurn([top[0], bottom[0]], \"turnOver\");\n *   }\n *\n *   // Flip the coin over\n *   turnOver() {\n *     // Execute the \"turnOver\" turn we created\n *     this.doTurn(\"turnOver\")\n *   }\n *\n * }\n * ```\n */\nexport class Simulator {\n    constructor() {\n        this.stickers = new Map();\n        this.faces = new Map();\n        this.turns = new Map();\n    }\n    /**\n     * Adds a face of stickers to the puzzle.\n     *\n     * @param stickers - array of sticker values\n     * @param label - label to reference the face by\n     * @returns object with the faceId and list of sticker ids.\n     *  faceId will be label if that is present. Otherwise it\n     *  will be generated.\n     * @example\n     * ```\n     * const stickers = ['red', 'red', 'red', 'red'];\n     *\n     * // Add the F face\n     * addFace(stickers, 'F')\n     * ```\n     */\n    addFace(stickers, label) {\n        if (label && this.faces.has(label)) {\n            throw `Face ${label} already exists`;\n        }\n        else if (!label) {\n            label = (this.faces.size + 1).toString();\n        }\n        // Add Stickers\n        const stickerIds = stickers.reduce((stickerIds, nextSticker) => {\n            const stickerId = (this.stickers.size + 1).toString();\n            this.stickers.set(stickerId, nextSticker);\n            stickerIds.push(stickerId);\n            return stickerIds;\n        }, []);\n        // Add Face\n        this.faces.set(label, stickerIds);\n        return {\n            faceId: label,\n            stickerIds,\n        };\n    }\n    /**\n     * Creates a turn definition that tells the simulator\n     * what sticker values to change when turning.\n     *\n     * A change is an array with two sticker ids (ex. ['sticker1', 'sticker2'])\n     * this means that when turning 'sticker1' will go to 'sticker2'.\n     * Or when doing a reverse turn, `sticker2' will go to 'sticker1'\n     *\n     * @param changes - list of turn definitions.\n     * @param label - label to reference the turn by\n     * @returns label of the turn that was created\n     */\n    addTurn(changes, label) {\n        if (label && this.turns.has(label)) {\n            throw `Turn ${label} already exists`;\n        }\n        else if (!label) {\n            label = (this.turns.size + 1).toString();\n        }\n        this.turns.set(label, changes);\n        return label;\n    }\n    /**\n     * Executes a turn on the puzzle\n     *\n     * @param label - label of the turn to execute\n     * @param prime - true to do the turn in reverse\n     */\n    doTurn(label, reverse = false) {\n        const changes = this.turns.get(label);\n        if (!changes) {\n            throw `Unknown turn ${label}`;\n        }\n        let movingSticker = reverse ? 1 : 0;\n        let replacedSticker = reverse ? 0 : 1;\n        let cached = {};\n        changes.forEach((change) => {\n            // Cache value we're replacing\n            cached[change[replacedSticker]] = this.stickers.get(change[replacedSticker]);\n            // Update sticker with new value\n            this.stickers.set(change[replacedSticker], cached[change[movingSticker]] ||\n                this.stickers.get(change[movingSticker]));\n        });\n    }\n    /**\n     * checks that every sticker on every face\n     * is the same value\n     */\n    isSolved() {\n        const faces = this.faces.entries();\n        let entry = faces.next();\n        do {\n            const stickerIds = entry.value[1];\n            let value = this.stickers.get(stickerIds[0]);\n            for (let id of stickerIds) {\n                if (value != this.stickers.get(id))\n                    return false;\n            }\n            entry = faces.next();\n        } while (!entry.done);\n        return true;\n    }\n    getValues() {\n        let values = {};\n        this.faces.forEach((stickerIds, key) => {\n            values[key] = stickerIds.map((id) => this.stickers.get(id));\n        });\n        return values;\n    }\n    /**\n     * override value of sticker on a face\n     *\n     * @param face - label\n     * @param index - index of sticker to set value of\n     * @param value - value to set the sticker to\n     */\n    setValue(face, index, value) {\n        if (!this.faces.has(face)) {\n            console.warn(`attempting to set sticker value on invalid face: ${face}`);\n            return;\n        }\n        let faceStickers = this.faces.get(face);\n        let stickerId = faceStickers[index];\n        if (!faceStickers) {\n            console.warn(`attempting to set sticker value for invalid sticker: ${face} ${index}`);\n            return;\n        }\n        this.stickers.set(stickerId, value);\n    }\n    /**\n     * parse and execute a sequence of moves\n     *\n     * @example\n     * ```typescript\n     * // assuming U, R, and F are turn labels\n     * simulator.alg(\"U R F\")\n     * ```\n     *\n     * @param alg - algorithm\n     */\n    alg(alg) {\n        // Default implementation\n        if (!alg) {\n            return;\n        }\n        alg.split(\" \").forEach((turn) => this.doTurn(turn));\n    }\n    /**\n     * reverses an algorithm then executes it\n     */\n    case(alg) {\n        // No default implementation\n    }\n    /**\n     * resets stickers back to solved position. Uses face name\n     * as sticker value by default\n     */\n    reset() {\n        this.faces.forEach((stickerIds, faceName) => {\n            stickerIds.forEach((stickerId) => {\n                this.stickers.set(stickerId, faceName);\n            });\n        });\n    }\n}\n","// Standard Cube Colors\nexport const YELLOW = { value: \"#FFFF00\" };\nexport const RED = { value: \"#FF0000\" };\nexport const BLUE = { value: \"#0000FF\" };\nexport const WHITE = { value: \"#FFFFFF\" };\nexport const ORANGE = { value: \"#FFA500\" };\nexport const GREEN = { value: \"#00FF00\" };\n// Extra colors for megaminx\nexport const PURPLE = { value: \"#800080\" };\nexport const GREY = { value: \"#808080\" };\nexport const DARK_BLUE = { value: \"#00008B\" };\nexport const LIGHT_YELLOW = { value: \"#ffffb3\" };\nexport const LIGHT_GREEN = { value: \"#32CD32\" };\nexport const PINK = { value: \"#FF69B4\" };\nexport const BLACK = { value: \"#000000\" };\nexport const MASK_COLOR = { value: \"#404040\" };\n// Stickerless\nexport const YELLOW_STICKERLESS = {\n    value: \"#FFFF00\",\n    stroke: \"#DDDD00\",\n};\nexport const RED_STICKERLESS = { value: \"#FF0000\", stroke: \"#DD0000\" };\nexport const BLUE_STICKERLESS = { value: \"#0000FF\", stroke: \"#0000DD\" };\nexport const WHITE_STICKERLESS = { value: \"#FFFFFF\", stroke: \"#DDD\" };\nexport const ORANGE_STICKERLESS = {\n    value: \"#FFA500\",\n    stroke: \"#DD8500\",\n};\nexport const GREEN_STICKERLESS = {\n    value: \"#00FF00\",\n    stroke: \"#00DD00\",\n};\nexport const PURPLE_STICKERLESS = {\n    value: \"#800080\",\n    stroke: \"#5c005c\",\n};\nexport const GREY_STICKERLESS = { value: \"#808080\", stroke: \"#6b6b6b\" };\nexport const DARK_BLUE_STICKERLESS = {\n    value: \"#00008B\",\n    stroke: \"#000075\",\n};\nexport const LIGHT_YELLOW_STICKERLESS = {\n    value: \"#ffffb3\",\n    stroke: \"#e6e6a3\",\n};\nexport const LIGHT_GREEN_STICKERLESS = {\n    value: \"#32CD32\",\n    stroke: \"#2db32d\",\n};\nexport const PINK_STICKERLESS = { value: \"#FF69B4\", stroke: \"#de5b9c\" };\n","export var PIECE_TYPE;\n(function (PIECE_TYPE) {\n    PIECE_TYPE[PIECE_TYPE[\"CORNER\"] = 0] = \"CORNER\";\n    PIECE_TYPE[PIECE_TYPE[\"EDGE\"] = 1] = \"EDGE\";\n    PIECE_TYPE[PIECE_TYPE[\"MIDDLE\"] = 2] = \"MIDDLE\";\n})(PIECE_TYPE || (PIECE_TYPE = {}));\n","export class Vector3 {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromValues(x, y, z) {\n        return new Vector3(x, y, z);\n    }\n    transformMat4(m) {\n        let w = m.values[3] * this.x +\n            m.values[7] * this.y +\n            m.values[11] * this.z +\n            m.values[15];\n        w = w || 1.0;\n        const x = (m.values[0] * this.x +\n            m.values[4] * this.y +\n            m.values[8] * this.z +\n            m.values[12]) /\n            w;\n        const y = (m.values[1] * this.x +\n            m.values[5] * this.y +\n            m.values[9] * this.z +\n            m.values[13]) /\n            w;\n        const z = (m.values[2] * this.x +\n            m.values[6] * this.y +\n            m.values[10] * this.z +\n            m.values[14]) /\n            w;\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    multiply(x, y, z) {\n        this.x = this.x * x;\n        this.y = this.y * y;\n        this.z = this.z * z;\n    }\n    rotateX(origin, radians) {\n        // translate point to origin\n        let x = this.x - origin.x;\n        let y = this.y - origin.y;\n        let z = this.z - origin.z;\n        // rotate\n        this.x = x;\n        this.y = y * Math.cos(radians) - z * Math.sin(radians);\n        this.z = y * Math.sin(radians) + z * Math.cos(radians);\n        // translate back\n        this.x += origin.x;\n        this.y += origin.y;\n        this.z += origin.z;\n        return this;\n    }\n    rotateZ(origin, radians) {\n        // translate point to origin\n        let x = this.x - origin.x;\n        let y = this.y - origin.y;\n        let z = this.z - origin.z;\n        // rotate\n        this.x = x * Math.cos(radians) - y * Math.sin(radians);\n        this.y = x * Math.sin(radians) + y * Math.cos(radians);\n        this.z = z;\n        // translate back\n        this.x += origin.x;\n        this.y += origin.y;\n        this.z += origin.z;\n        return this;\n    }\n    clone() {\n        return Vector3.fromValues(this.x, this.y, this.z);\n    }\n}\nexport class Vector2 {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    static fromValues(x, y) {\n        return new Vector2(x, y);\n    }\n}\n","import { WHITE, RED, BLUE, GREEN, ORANGE, YELLOW } from \"./../colors\";\nimport { PIECE_TYPE } from \"./enum\";\nimport { Vector3 } from \"../../math/vector\";\nexport const ROTATION_VECTOR = Vector3.fromValues(0.92875, -0.24803, 0);\nexport const TOP_COLOR = YELLOW;\nexport const BOTTOM_COLOR = WHITE;\nexport const FRONT_COLOR = RED;\nexport const LEFT_COLOR = BLUE;\nexport const RIGHT_COLOR = GREEN;\nexport const BACK_COLOR = ORANGE;\nexport const DEFAULT_SQ1_SCHEME = {\n    top: TOP_COLOR,\n    front: FRONT_COLOR,\n    bottom: BOTTOM_COLOR,\n    left: LEFT_COLOR,\n    right: RIGHT_COLOR,\n    back: BACK_COLOR,\n};\nexport const SOLVED_TOP_PIECES = [\n    { type: PIECE_TYPE.CORNER, colors: [TOP_COLOR, FRONT_COLOR, LEFT_COLOR] },\n    { type: PIECE_TYPE.EDGE, colors: [TOP_COLOR, LEFT_COLOR] },\n    { type: PIECE_TYPE.CORNER, colors: [TOP_COLOR, LEFT_COLOR, BACK_COLOR] },\n    { type: PIECE_TYPE.EDGE, colors: [TOP_COLOR, BACK_COLOR] },\n    { type: PIECE_TYPE.CORNER, colors: [TOP_COLOR, BACK_COLOR, RIGHT_COLOR] },\n    { type: PIECE_TYPE.EDGE, colors: [TOP_COLOR, RIGHT_COLOR] },\n    { type: PIECE_TYPE.CORNER, colors: [TOP_COLOR, RIGHT_COLOR, FRONT_COLOR] },\n    { type: PIECE_TYPE.EDGE, colors: [TOP_COLOR, FRONT_COLOR] },\n];\nexport const SOLVED_BOTTOM_PIECES = [\n    { type: PIECE_TYPE.EDGE, colors: [BOTTOM_COLOR, BACK_COLOR] },\n    { type: PIECE_TYPE.CORNER, colors: [BOTTOM_COLOR, BACK_COLOR, LEFT_COLOR] },\n    { type: PIECE_TYPE.EDGE, colors: [BOTTOM_COLOR, LEFT_COLOR] },\n    { type: PIECE_TYPE.CORNER, colors: [BOTTOM_COLOR, LEFT_COLOR, FRONT_COLOR] },\n    { type: PIECE_TYPE.EDGE, colors: [BOTTOM_COLOR, FRONT_COLOR] },\n    { type: PIECE_TYPE.CORNER, colors: [BOTTOM_COLOR, FRONT_COLOR, RIGHT_COLOR] },\n    { type: PIECE_TYPE.EDGE, colors: [BOTTOM_COLOR, RIGHT_COLOR] },\n    { type: PIECE_TYPE.CORNER, colors: [BOTTOM_COLOR, RIGHT_COLOR, BACK_COLOR] },\n];\n","const square1TurnRegex = /((\\()?(-?\\d)\\s*,\\s*(-?\\d)(\\))?)|(\\/)/g;\nexport function parseSquare1Algorithm(algorithm) {\n    let turns = [];\n    let match;\n    while ((match = square1TurnRegex.exec(algorithm))) {\n        if (match[0] === \"/\") {\n            turns.push({ slice: true });\n        }\n        else {\n            turns.push({\n                top: parseInt(match[3]),\n                bottom: parseInt(match[4]),\n            });\n        }\n    }\n    return turns;\n}\n","import { Simulator } from \"./../simulator\";\nimport { BACK_COLOR, BOTTOM_COLOR, DEFAULT_SQ1_SCHEME, FRONT_COLOR, LEFT_COLOR, RIGHT_COLOR, TOP_COLOR, } from \"./../../puzzles/square1/constants\";\nimport { PIECE_TYPE } from \"../../puzzles/square1/enum\";\nimport { parseSquare1Algorithm } from \"../../algorithms/square1\";\nconst pieceValue = {\n    [PIECE_TYPE.CORNER]: 2,\n    [PIECE_TYPE.EDGE]: 1,\n};\nexport class Square1Simualtor extends Simulator {\n    constructor(scheme = DEFAULT_SQ1_SCHEME) {\n        super();\n        this.scheme = scheme;\n        this.topLayer = solvedTop(this.scheme);\n        this.bottomLayer = solvedBottom(this.scheme);\n        this.middleRotated = false;\n    }\n    alg(alg) {\n        parseSquare1Algorithm(alg).forEach((move) => {\n            if (\"slice\" in move) {\n                this.slice();\n            }\n            else {\n                this.rotateTop(move.top);\n                this.rotateBottom(move.bottom);\n            }\n        });\n    }\n    case(alg) {\n        parseSquare1Algorithm(alg)\n            .reverse()\n            .forEach((move) => {\n            if (\"slice\" in move) {\n                this.slice();\n            }\n            else {\n                this.rotateTop(move.top * -1);\n                this.rotateBottom(move.bottom * -1);\n            }\n        });\n    }\n    slice() {\n        let topNum = 0;\n        let bottomNum = 0;\n        let value = 0;\n        for (let i = this.topLayer.length; i > 0 && value < 6; i--) {\n            value += pieceValue[this.topLayer[i - 1].type];\n            topNum++;\n        }\n        if (value != 6) {\n            throw \"Cannot perform slice move. Top layer misaligned\";\n        }\n        value = 0;\n        for (let i = this.bottomLayer.length; i > 0 && value < 6; i--) {\n            value += pieceValue[this.bottomLayer[i - 1].type];\n            bottomNum++;\n        }\n        if (value != 6) {\n            throw \"Cannot perform slice move. Bottom layer misaligned\";\n        }\n        const topSlice = this.topLayer.splice(this.topLayer.length - topNum, this.topLayer.length);\n        const bottomSlice = this.bottomLayer.splice(this.bottomLayer.length - bottomNum, this.bottomLayer.length);\n        this.topLayer = this.topLayer.concat(bottomSlice);\n        this.bottomLayer = this.bottomLayer.concat(topSlice);\n        this.middleRotated = !this.middleRotated;\n    }\n    rotateTop(turns) {\n        const originalTurns = turns;\n        while (turns != 0) {\n            if (turns < 0) {\n                const piece = this.topLayer.shift();\n                const value = pieceValue[piece.type];\n                if (Math.abs(turns) < value) {\n                    throw `Invalid Square1 Move. Cannot turn top layer ${originalTurns} steps`;\n                }\n                this.topLayer.push(piece);\n                turns += value;\n            }\n            else {\n                const piece = this.topLayer.pop();\n                const value = pieceValue[piece.type];\n                if (Math.abs(turns) < value) {\n                    throw `Invalid Square1 Move. Cannot turn top layer ${originalTurns} steps`;\n                }\n                this.topLayer.unshift(piece);\n                turns -= value;\n            }\n        }\n    }\n    rotateBottom(turns) {\n        const originalTurns = turns;\n        while (turns != 0) {\n            if (turns < 0) {\n                const piece = this.bottomLayer.shift();\n                const value = pieceValue[piece.type];\n                if (Math.abs(turns) < value) {\n                    throw `Invalid Square1 Move. Cannot turn top layer ${originalTurns} steps`;\n                }\n                this.bottomLayer.push(piece);\n                turns += value;\n            }\n            else {\n                const piece = this.bottomLayer.pop();\n                const value = pieceValue[piece.type];\n                if (Math.abs(turns) < value) {\n                    throw `Invalid Square1 Move. Cannot turn top layer ${originalTurns} steps`;\n                }\n                this.bottomLayer.unshift(piece);\n                turns -= value;\n            }\n        }\n    }\n}\nfunction solvedTop(scheme) {\n    return [\n        {\n            type: PIECE_TYPE.CORNER,\n            colors: [\n                scheme.top || TOP_COLOR,\n                scheme.front || FRONT_COLOR,\n                scheme.left || LEFT_COLOR,\n            ],\n        },\n        {\n            type: PIECE_TYPE.EDGE,\n            colors: [scheme.top || TOP_COLOR, scheme.left || LEFT_COLOR],\n        },\n        {\n            type: PIECE_TYPE.CORNER,\n            colors: [\n                scheme.top || TOP_COLOR,\n                scheme.left || LEFT_COLOR,\n                scheme.back || BACK_COLOR,\n            ],\n        },\n        {\n            type: PIECE_TYPE.EDGE,\n            colors: [scheme.top || TOP_COLOR, scheme.back || BACK_COLOR],\n        },\n        {\n            type: PIECE_TYPE.CORNER,\n            colors: [\n                scheme.top || TOP_COLOR,\n                scheme.back || BACK_COLOR,\n                scheme.right || RIGHT_COLOR,\n            ],\n        },\n        {\n            type: PIECE_TYPE.EDGE,\n            colors: [scheme.top || TOP_COLOR, scheme.right || RIGHT_COLOR],\n        },\n        {\n            type: PIECE_TYPE.CORNER,\n            colors: [\n                scheme.top || TOP_COLOR,\n                scheme.right || RIGHT_COLOR,\n                scheme.front || FRONT_COLOR,\n            ],\n        },\n        {\n            type: PIECE_TYPE.EDGE,\n            colors: [scheme.top || TOP_COLOR, scheme.front || FRONT_COLOR],\n        },\n    ];\n}\nfunction solvedBottom(scheme) {\n    return [\n        {\n            type: PIECE_TYPE.EDGE,\n            colors: [scheme.bottom || BOTTOM_COLOR, scheme.back || BACK_COLOR],\n        },\n        {\n            type: PIECE_TYPE.CORNER,\n            colors: [\n                scheme.bottom || BOTTOM_COLOR,\n                scheme.back || BACK_COLOR,\n                scheme.left || LEFT_COLOR,\n            ],\n        },\n        {\n            type: PIECE_TYPE.EDGE,\n            colors: [scheme.bottom || BOTTOM_COLOR, scheme.left || LEFT_COLOR],\n        },\n        {\n            type: PIECE_TYPE.CORNER,\n            colors: [\n                scheme.bottom || BOTTOM_COLOR,\n                scheme.left || LEFT_COLOR,\n                scheme.front || FRONT_COLOR,\n            ],\n        },\n        {\n            type: PIECE_TYPE.EDGE,\n            colors: [scheme.bottom || BOTTOM_COLOR, scheme.front || FRONT_COLOR],\n        },\n        {\n            type: PIECE_TYPE.CORNER,\n            colors: [\n                scheme.bottom || BOTTOM_COLOR,\n                scheme.front || FRONT_COLOR,\n                scheme.right || RIGHT_COLOR,\n            ],\n        },\n        {\n            type: PIECE_TYPE.EDGE,\n            colors: [scheme.bottom || BOTTOM_COLOR, scheme.right || RIGHT_COLOR],\n        },\n        {\n            type: PIECE_TYPE.CORNER,\n            colors: [\n                scheme.bottom || BOTTOM_COLOR,\n                scheme.right || RIGHT_COLOR,\n                scheme.back || BACK_COLOR,\n            ],\n        },\n    ];\n}\n","import { TurnType } from \"./algorithm\";\nconst skewbTurnRegex = /([LRUB])(\\'?)/g;\nconst DirectionToTurnType = {\n    \"\": TurnType.Clockwise,\n    \"'\": TurnType.CounterClockwise,\n};\nexport function parseSkewbAlgorithm(algorithm) {\n    let turns = [];\n    let match;\n    while ((match = skewbTurnRegex.exec(algorithm))) {\n        const rawUnit = match[1];\n        const rawDirection = match[2];\n        turns.push({\n            unit: rawUnit,\n            turnType: DirectionToTurnType[rawDirection],\n            slices: 1,\n        });\n    }\n    return turns;\n}\n","/**\n * Splits an array into chunks\n *\n * @param array original array\n * @param chunkSize\n *\n * @example\n * ```\n * chunkArray([1,2,3,4,5,6], 2)\n * // returns [[1,2], [3,4], [5,6]]\n * ```\n */\nexport function chunkArray(array, chunkSize) {\n    const newSize = Math.ceil(array.length / chunkSize);\n    return new Array(newSize)\n        .fill(null)\n        .map((_, index) => array.slice(index * chunkSize, (index + 1) * chunkSize));\n}\n/**\n * Generates an array of set size filled with a specific value\n *\n * @param length length of the array\n * @param value value to fill the array with\n */\nexport function fillArray(length, value) {\n    return new Array(length).fill(value);\n}\n","import { TurnType } from \"../../algorithms/algorithm\";\nimport { parseSkewbAlgorithm } from \"../../algorithms/skewb\";\nimport { fillArray } from \"../../utils/arrays\";\nimport { Simulator } from \"./../simulator\";\n/**\n * Simulates a standard skewb\n *\n * Imagine the faces like this\n * ```\n *      U\n *    L F R B\n *      D\n * ```\n *\n * each face has 5 sickers (1 center, 4 corners), stored as\n * an array. Each index of the array maps to stickers like\n * so, 0 being the center, 1-4 being the corners from top left\n * to bottom right\n * ```\n *      1   2\n *        0\n *      3   4\n * ```\n *\n * So all together the simulator stores information like\n * this\n * ```\n *          U1    U2\n *             U0\n *          U3    U4\n * L1    L2 F1    F2 R1    R2 B1    B2\n *    L0       F0       R0       B0\n * L3    L4 F3    F4 F3    F4 B3    B4\n *          D1    D2\n *             D0\n *          D3    D4\n * ```\n */\nexport class SkewbSimulator extends Simulator {\n    constructor() {\n        super();\n        const { stickerIds: top } = this.addFace(fillArray(5, \"top\"), \"top\");\n        const { stickerIds: front } = this.addFace(fillArray(5, \"front\"), \"front\");\n        const { stickerIds: right } = this.addFace(fillArray(5, \"right\"), \"right\");\n        const { stickerIds: bottom } = this.addFace(fillArray(5, \"bottom\"), \"bottom\");\n        const { stickerIds: back } = this.addFace(fillArray(5, \"back\"), \"back\");\n        const { stickerIds: left } = this.addFace(fillArray(5, \"left\"), \"left\");\n        // Skewb Notation https://www.worldcubeassociation.org/regulations/#12h\n        this.addTurn([\n            [right[0], back[0]],\n            [right[2], back[4]],\n            [right[3], back[1]],\n            [right[4], back[3]],\n            [back[0], bottom[0]],\n            [back[4], bottom[2]],\n            [back[1], bottom[3]],\n            [back[3], bottom[4]],\n            [bottom[0], right[0]],\n            [bottom[2], right[2]],\n            [bottom[3], right[3]],\n            [bottom[4], right[4]],\n            [front[4], top[2]],\n            [top[2], left[3]],\n            [left[3], front[4]],\n        ], \"R\");\n        this.addTurn([\n            [center(top), center(left)],\n            [topLeft(top), topLeft(left)],\n            [topRight(top), topRight(left)],\n            [bottomLeft(top), bottomLeft(left)],\n            [center(left), center(back)],\n            [topLeft(left), topRight(back)],\n            [topRight(left), bottomRight(back)],\n            [bottomLeft(left), topLeft(back)],\n            [center(back), center(top)],\n            [topRight(back), topLeft(top)],\n            [bottomRight(back), topRight(top)],\n            [topLeft(back), bottomLeft(top)],\n            [topRight(right), topLeft(front)],\n            [topLeft(front), bottomLeft(bottom)],\n            [bottomLeft(bottom), topRight(right)],\n        ], \"U\");\n        this.addTurn([\n            [center(left), center(front)],\n            [bottomLeft(left), topLeft(front)],\n            [topRight(left), bottomRight(front)],\n            [bottomRight(left), bottomLeft(front)],\n            [center(front), center(bottom)],\n            [topLeft(front), topRight(bottom)],\n            [bottomRight(front), bottomLeft(bottom)],\n            [bottomLeft(front), topLeft(bottom)],\n            [center(bottom), center(left)],\n            [topRight(bottom), bottomLeft(left)],\n            [bottomLeft(bottom), topRight(left)],\n            [topLeft(bottom), bottomRight(left)],\n            [bottomRight(back), bottomLeft(top)],\n            [bottomLeft(top), bottomLeft(right)],\n            [bottomLeft(right), bottomRight(back)],\n        ], \"L\");\n        this.addTurn([\n            [center(back), center(left)],\n            [topRight(back), bottomRight(left)],\n            [bottomLeft(back), topLeft(left)],\n            [bottomRight(back), bottomLeft(left)],\n            [center(left), center(bottom)],\n            [bottomRight(left), bottomRight(bottom)],\n            [topLeft(left), topLeft(bottom)],\n            [bottomLeft(left), bottomLeft(bottom)],\n            [center(bottom), center(back)],\n            [bottomRight(bottom), topRight(back)],\n            [topLeft(bottom), bottomLeft(back)],\n            [bottomLeft(bottom), bottomRight(back)],\n            [topLeft(top), bottomLeft(front)],\n            [bottomLeft(front), bottomRight(right)],\n            [bottomRight(right), topLeft(top)],\n        ], \"B\");\n    }\n    R(reverse) {\n        this.doTurn(\"R\", reverse);\n    }\n    U(reverse) {\n        this.doTurn(\"U\", reverse);\n    }\n    L(reverse) {\n        this.doTurn(\"L\", reverse);\n    }\n    B(reverse) {\n        this.doTurn(\"B\", reverse);\n    }\n    alg(alg) {\n        if (!alg) {\n            return;\n        }\n        this.doTurns(parseSkewbAlgorithm(alg));\n    }\n    case(alg) {\n        if (!alg) {\n            return;\n        }\n        let turns = parseSkewbAlgorithm(alg)\n            .reverse()\n            .map((turn) => (Object.assign(Object.assign({}, turn), { turnType: turn.turnType === TurnType.Clockwise\n                ? TurnType.CounterClockwise\n                : TurnType.Clockwise })));\n        this.doTurns(turns);\n    }\n    doTurns(turns) {\n        turns.forEach((turn) => {\n            let reverse = turn.turnType === TurnType.CounterClockwise;\n            switch (turn.unit) {\n                case \"R\":\n                    this.R(reverse);\n                    break;\n                case \"U\":\n                    this.U(reverse);\n                    break;\n                case \"L\":\n                    this.L(reverse);\n                    break;\n                case \"B\":\n                    this.B(reverse);\n                    break;\n            }\n        });\n    }\n}\nconst center = (face) => face[0];\nconst topLeft = (face) => face[1];\nconst topRight = (face) => face[2];\nconst bottomLeft = (face) => face[3];\nconst bottomRight = (face) => face[4];\n","import { TurnType } from \"./algorithm\";\nconst pyraminxTurnRegex = /([LlRrUuBb])(\\'?)/g;\nconst DirectionToTurnType = {\n    \"\": TurnType.Clockwise,\n    \"'\": TurnType.CounterClockwise,\n};\nexport function parsePyraminxAlgorithm(algorithm) {\n    let turns = [];\n    let match;\n    while ((match = pyraminxTurnRegex.exec(algorithm))) {\n        const rawUnit = match[1];\n        const rawDirection = match[2];\n        turns.push({\n            unit: rawUnit,\n            turnType: DirectionToTurnType[rawDirection],\n            slices: 1,\n        });\n    }\n    return turns;\n}\n","import { TurnType } from \"../../algorithms/algorithm\";\nimport { parsePyraminxAlgorithm } from \"../../algorithms/pyraminx\";\nimport { fillArray } from \"../../utils/arrays\";\nimport { Simulator } from \"./../simulator\";\nexport class PyraminxSimulator extends Simulator {\n    constructor() {\n        super();\n        const { stickerIds: U } = this.addFace(fillArray(9, \"top\"), \"top\");\n        const { stickerIds: L } = this.addFace(fillArray(9, \"left\"), \"left\");\n        const { stickerIds: R } = this.addFace(fillArray(9, \"right\"), \"right\");\n        const { stickerIds: B } = this.addFace(fillArray(9, \"back\"), \"back\");\n        // Tip turns\n        this.addTurn([\n            [U[8], R[8]],\n            [R[8], L[8]],\n            [L[8], U[8]],\n        ], \"u\");\n        this.addTurn([\n            [L[0], B[8]],\n            [B[8], U[4]],\n            [U[4], L[0]],\n        ], \"l\");\n        this.addTurn([\n            [L[4], R[0]],\n            [R[0], B[4]],\n            [B[4], L[4]],\n        ], \"r\");\n        this.addTurn([\n            [R[4], U[0]],\n            [U[0], B[0]],\n            [B[0], R[4]],\n        ], \"b\");\n        // Full turns\n        this.addTurn([\n            [U[5], R[5]],\n            [U[6], R[6]],\n            [U[7], R[7]],\n            [U[8], R[8]],\n            [R[5], L[5]],\n            [R[6], L[6]],\n            [R[7], L[7]],\n            [R[8], L[8]],\n            [L[5], U[5]],\n            [L[6], U[6]],\n            [L[7], U[7]],\n            [L[8], U[8]],\n        ], \"U\");\n        this.addTurn([\n            [L[0], B[8]],\n            [L[1], B[6]],\n            [L[2], B[5]],\n            [L[5], B[7]],\n            [B[8], U[4]],\n            [B[6], U[3]],\n            [B[5], U[7]],\n            [B[7], U[2]],\n            [U[4], L[0]],\n            [U[3], L[1]],\n            [U[7], L[2]],\n            [U[2], L[5]],\n        ], \"L\");\n        this.addTurn([\n            [L[2], R[5]],\n            [L[3], R[1]],\n            [L[4], R[0]],\n            [L[7], R[2]],\n            [R[5], B[2]],\n            [R[1], B[3]],\n            [R[0], B[4]],\n            [R[2], B[7]],\n            [B[2], L[2]],\n            [B[3], L[3]],\n            [B[4], L[4]],\n            [B[7], L[7]],\n        ], \"R\");\n        this.addTurn([\n            [R[2], U[5]],\n            [R[3], U[1]],\n            [R[4], U[0]],\n            [R[7], U[2]],\n            [U[5], B[5]],\n            [U[1], B[1]],\n            [U[0], B[0]],\n            [U[2], B[2]],\n            [B[5], R[2]],\n            [B[1], R[3]],\n            [B[0], R[4]],\n            [B[2], R[7]],\n        ], \"B\");\n    }\n    U(reverse) {\n        this.doTurn(\"U\", reverse);\n    }\n    R(reverse) {\n        this.doTurn(\"R\", reverse);\n    }\n    L(reverse) {\n        this.doTurn(\"L\", reverse);\n    }\n    B(reverse) {\n        this.doTurn(\"B\", reverse);\n    }\n    u(reverse) {\n        this.doTurn(\"u\", reverse);\n    }\n    r(reverse) {\n        this.doTurn(\"r\", reverse);\n    }\n    l(reverse) {\n        this.doTurn(\"l\", reverse);\n    }\n    b(reverse) {\n        this.doTurn(\"b\", reverse);\n    }\n    alg(alg) {\n        if (!alg) {\n            return;\n        }\n        this.doTurns(parsePyraminxAlgorithm(alg));\n    }\n    case(alg) {\n        if (!alg) {\n            return;\n        }\n        let turns = parsePyraminxAlgorithm(alg)\n            .reverse()\n            .map((turn) => (Object.assign(Object.assign({}, turn), { turnType: turn.turnType === TurnType.Clockwise\n                ? TurnType.CounterClockwise\n                : TurnType.Clockwise })));\n        this.doTurns(turns);\n    }\n    doTurns(turns) {\n        turns.forEach((turn) => {\n            let reverse = turn.turnType === TurnType.CounterClockwise;\n            switch (turn.unit) {\n                case \"R\":\n                    this.R(reverse);\n                    break;\n                case \"r\":\n                    this.r(reverse);\n                    break;\n                case \"U\":\n                    this.U(reverse);\n                    break;\n                case \"u\":\n                    this.u(reverse);\n                    break;\n                case \"L\":\n                    this.L(reverse);\n                    break;\n                case \"l\":\n                    this.l(reverse);\n                    break;\n                case \"B\":\n                    this.B(reverse);\n                    break;\n                case \"b\":\n                    this.b(reverse);\n                    break;\n            }\n        });\n    }\n}\n","export const MEGAMINX_FACES = [\n    // Front\n    \"U\",\n    \"R\",\n    \"F\",\n    \"dr\",\n    \"dl\",\n    \"L\",\n    // Back\n    \"d\",\n    \"br\",\n    \"BR\",\n    \"BL\",\n    \"bl\",\n    \"b\",\n];\n","import { TurnType } from \"./algorithm\";\nconst megaminxTurnNotation = /([RD])([\\+\\+|\\-\\-]+)|([UFRL]|BR|BL)([2-3]?)(\\'?)/g;\nvar PochmannDirections;\n(function (PochmannDirections) {\n    PochmannDirections[\"Clockwise\"] = \"++\";\n    PochmannDirections[\"CounterClockwise\"] = \"--\";\n    PochmannDirections[\"FaceClockwise\"] = \"\";\n    PochmannDirections[\"FaceCounter\"] = \"'\";\n})(PochmannDirections || (PochmannDirections = {}));\nconst DirectionToTurnType = {\n    [PochmannDirections.Clockwise]: TurnType.Clockwise,\n    [PochmannDirections.CounterClockwise]: TurnType.CounterClockwise,\n    [PochmannDirections.FaceClockwise]: TurnType.Clockwise,\n    [PochmannDirections.FaceCounter]: TurnType.CounterClockwise,\n};\n/**\n * Takes in a megaminx algorithm in stefan pochmann notation as a string\n * and parses the turns from it\n *\n * Also supports face turns U,F,R,L,BR,BL as i've seen in some algorithms online\n *\n * algorithm string format should be moves separated by a single space\n *\n * @example\n * ```typescript\n * parseMegaminxAlgorithm(\"D++ R-- D-- U\")\n * parseMegaminxAlgorithm(\"R' U2' R2 U R2' U R2 U2' R'\")\n * ```\n *\n * @see https://www.worldcubeassociation.org/regulations/#article-12-notation\n */\nexport function parseMegaminxAlgorithm(algorithm) {\n    if (!algorithm) {\n        return [];\n    }\n    let turns = [];\n    let match;\n    while ((match = megaminxTurnNotation.exec(algorithm))) {\n        const rawUnit = match[1] ? `${match[1]}xx` : match[3];\n        const rawDirection = match[2] || match[5];\n        const rawNumber = match[4];\n        turns.push({\n            unit: rawUnit,\n            turnType: DirectionToTurnType[rawDirection],\n            slices: 1,\n            n: rawNumber ? parseInt(rawNumber) : 1,\n        });\n    }\n    return turns;\n}\n","import { TurnType } from \"./../../algorithms/algorithm\";\nimport { MEGAMINX_FACES } from \"./constants\";\nimport { Simulator } from \"./../simulator\";\nimport { fillArray } from \"../../utils/arrays\";\nimport { parseMegaminxAlgorithm } from \"../../algorithms/megaminx\";\n/**\n * Simulator to define megaminx type puzzles\n *\n * Currently only standard megaminx size supported.\n */\nexport class MegaminxSimulator extends Simulator {\n    constructor() {\n        super();\n        MEGAMINX_FACES.forEach((faceName) => {\n            this.addFace(fillArray(11, faceName), faceName);\n        });\n        const U = this.faces.get(\"U\"); // White\n        const R = this.faces.get(\"R\"); // Blue\n        const F = this.faces.get(\"F\"); // Red\n        const dr = this.faces.get(\"dr\"); // Pink\n        const dl = this.faces.get(\"dl\"); // Light Yellow\n        const L = this.faces.get(\"L\"); // Green\n        const d = this.faces.get(\"d\"); // Gray\n        const br = this.faces.get(\"br\"); // Light Green\n        const BR = this.faces.get(\"BR\"); // Yellow\n        const BL = this.faces.get(\"BL\"); // Purple\n        const bl = this.faces.get(\"bl\"); // Dark Blue\n        const b = this.faces.get(\"b\"); // Orange\n        // R\n        this.addTurn([\n            [F[2], U[6]],\n            [F[1], U[5]],\n            [F[10], U[4]],\n            [U[6], BR[10]],\n            [U[5], BR[9]],\n            [U[4], BR[8]],\n            [BR[10], br[8]],\n            [BR[9], br[7]],\n            [BR[8], br[6]],\n            [br[8], dr[2]],\n            [br[7], dr[1]],\n            [br[6], dr[10]],\n            [dr[2], F[2]],\n            [dr[1], F[1]],\n            [dr[10], F[10]],\n            ...makeFaceTurnDefinitions(R),\n        ], \"R\");\n        // F\n        this.addTurn([\n            [U[2], R[2]],\n            [U[3], R[3]],\n            [U[4], R[4]],\n            [R[2], dr[2]],\n            [R[3], dr[3]],\n            [R[4], dr[4]],\n            [dr[2], dl[2]],\n            [dr[3], dl[3]],\n            [dr[4], dl[4]],\n            [dl[2], L[2]],\n            [dl[3], L[3]],\n            [dl[4], L[4]],\n            [L[2], U[2]],\n            [L[3], U[3]],\n            [L[4], U[4]],\n            ...makeFaceTurnDefinitions(F),\n        ], \"F\");\n        // U\n        this.addTurn([\n            [F[2], L[4]],\n            [F[3], L[5]],\n            [F[4], L[6]],\n            [L[4], BL[8]],\n            [L[5], BL[9]],\n            [L[6], BL[10]],\n            [BL[8], BR[6]],\n            [BL[9], BR[7]],\n            [BL[10], BR[8]],\n            [BR[6], R[10]],\n            [BR[7], R[1]],\n            [BR[8], R[2]],\n            [R[10], F[2]],\n            [R[1], F[3]],\n            [R[2], F[4]],\n            ...makeFaceTurnDefinitions(U),\n        ], \"U\");\n        // L\n        this.addTurn([\n            [F[4], dl[4]],\n            [F[5], dl[5]],\n            [F[6], dl[6]],\n            [dl[4], bl[8]],\n            [dl[5], bl[9]],\n            [dl[6], bl[10]],\n            [bl[8], BL[6]],\n            [bl[9], BL[7]],\n            [bl[10], BL[8]],\n            [BL[6], U[10]],\n            [BL[7], U[1]],\n            [BL[8], U[2]],\n            [U[10], F[4]],\n            [U[1], F[5]],\n            [U[2], F[6]],\n            ...makeFaceTurnDefinitions(L),\n        ], \"L\");\n        // BR\n        this.addTurn([\n            [U[6], BL[10]],\n            [U[7], BL[1]],\n            [U[8], BL[2]],\n            [BL[10], b[8]],\n            [BL[1], b[9]],\n            [BL[2], b[10]],\n            [b[8], br[4]],\n            [b[9], br[5]],\n            [b[10], br[6]],\n            [br[4], R[8]],\n            [br[5], R[9]],\n            [br[6], R[10]],\n            [R[8], U[6]],\n            [R[9], U[7]],\n            [R[10], U[8]],\n            ...makeFaceTurnDefinitions(BR),\n        ], \"BR\");\n        // BL\n        this.addTurn([\n            [U[8], L[6]],\n            [U[9], L[7]],\n            [U[10], L[8]],\n            [L[6], bl[10]],\n            [L[7], bl[1]],\n            [L[8], bl[2]],\n            [bl[10], b[6]],\n            [bl[1], b[7]],\n            [bl[2], b[8]],\n            [b[6], BR[4]],\n            [b[7], BR[5]],\n            [b[8], BR[6]],\n            [BR[4], U[8]],\n            [BR[5], U[9]],\n            [BR[6], U[10]],\n            ...makeFaceTurnDefinitions(BL),\n        ], \"BL\");\n        // dr\n        this.addTurn([\n            [F[8], R[4]],\n            [F[9], R[5]],\n            [F[10], R[6]],\n            [R[4], br[8]],\n            [R[5], br[9]],\n            [R[6], br[10]],\n            [br[8], d[6]],\n            [br[9], d[7]],\n            [br[10], d[8]],\n            [d[6], dl[10]],\n            [d[7], dl[1]],\n            [d[8], dl[2]],\n            [dl[10], F[8]],\n            [dl[1], F[9]],\n            [dl[2], F[10]],\n            ...makeFaceTurnDefinitions(dr),\n        ], \"dr\");\n        // dl\n        this.addTurn([\n            [F[6], dr[4]],\n            [F[7], dr[5]],\n            [F[8], dr[6]],\n            [dr[4], d[8]],\n            [dr[5], d[9]],\n            [dr[6], d[10]],\n            [d[8], bl[6]],\n            [d[9], bl[7]],\n            [d[10], bl[8]],\n            [bl[6], L[10]],\n            [bl[7], L[1]],\n            [bl[8], L[2]],\n            [L[10], F[6]],\n            [L[1], F[7]],\n            [L[2], F[8]],\n            ...makeFaceTurnDefinitions(dl),\n        ], \"dl\");\n        // d\n        this.addTurn([\n            [br[10], b[2]],\n            [br[1], b[3]],\n            [br[2], b[4]],\n            [b[2], bl[4]],\n            [b[3], bl[5]],\n            [b[4], bl[6]],\n            [bl[4], dl[8]],\n            [bl[5], dl[9]],\n            [bl[6], dl[10]],\n            [dl[8], dr[6]],\n            [dl[9], dr[7]],\n            [dl[10], dr[8]],\n            [dr[6], br[10]],\n            [dr[7], br[1]],\n            [dr[8], br[2]],\n            ...makeFaceTurnDefinitions(d),\n        ], \"d\");\n        // br\n        this.addTurn([\n            [b[10], d[4]],\n            [b[1], d[5]],\n            [b[2], d[6]],\n            [d[4], dr[8]],\n            [d[5], dr[9]],\n            [d[6], dr[10]],\n            [dr[8], R[6]],\n            [dr[9], R[7]],\n            [dr[10], R[8]],\n            [R[6], BR[10]],\n            [R[7], BR[1]],\n            [R[8], BR[2]],\n            [BR[10], b[10]],\n            [BR[1], b[1]],\n            [BR[2], b[2]],\n            ...makeFaceTurnDefinitions(br),\n        ], \"br\");\n        // bl\n        this.addTurn([\n            [BL[4], L[8]],\n            [BL[5], L[9]],\n            [BL[6], L[10]],\n            [L[8], dl[6]],\n            [L[9], dl[7]],\n            [L[10], dl[8]],\n            [dl[6], d[10]],\n            [dl[7], d[1]],\n            [dl[8], d[2]],\n            [d[10], b[4]],\n            [d[1], b[5]],\n            [d[2], b[6]],\n            [b[4], BL[4]],\n            [b[5], BL[5]],\n            [b[6], BL[6]],\n            ...makeFaceTurnDefinitions(bl),\n        ], \"bl\");\n        // b\n        this.addTurn([\n            [br[2], BR[2]],\n            [br[3], BR[3]],\n            [br[4], BR[4]],\n            [BR[2], BL[2]],\n            [BR[3], BL[3]],\n            [BR[4], BL[4]],\n            [BL[2], bl[2]],\n            [BL[3], bl[3]],\n            [BL[4], bl[4]],\n            [bl[2], d[2]],\n            [bl[3], d[3]],\n            [bl[4], d[4]],\n            [d[2], br[2]],\n            [d[3], br[3]],\n            [d[4], br[4]],\n            ...makeFaceTurnDefinitions(b),\n        ], \"b\");\n        // \"Pochmann notation\"\n        // D++ / D--\n        this.addTurn([\n            // Top Layer\n            [F[0], R[0]],\n            [F[1], R[9]],\n            [F[5], R[3]],\n            [F[6], R[4]],\n            [F[7], R[5]],\n            [F[8], R[6]],\n            [F[9], R[7]],\n            [F[10], R[8]],\n            [R[0], BR[0]],\n            [R[3], BR[9]],\n            [R[4], BR[10]],\n            [R[5], BR[1]],\n            [R[6], BR[2]],\n            [R[7], BR[3]],\n            [R[8], BR[4]],\n            [R[9], BR[5]],\n            [BR[0], BL[0]],\n            [BR[9], BL[1]],\n            [BR[10], BL[2]],\n            [BR[1], BL[3]],\n            [BR[2], BL[4]],\n            [BR[3], BL[5]],\n            [BR[4], BL[6]],\n            [BR[5], BL[7]],\n            [BL[0], L[0]],\n            [BL[1], L[7]],\n            [BL[2], L[8]],\n            [BL[3], L[9]],\n            [BL[4], L[10]],\n            [BL[5], L[1]],\n            [BL[6], L[2]],\n            [BL[7], L[3]],\n            [L[0], F[0]],\n            [L[7], F[5]],\n            [L[8], F[6]],\n            [L[9], F[7]],\n            [L[10], F[8]],\n            [L[1], F[9]],\n            [L[2], F[10]],\n            [L[3], F[1]],\n            // Bottom Layer\n            [dr[0], br[0]],\n            [dr[1], br[5]],\n            [dr[2], br[6]],\n            [dr[3], br[7]],\n            [dr[4], br[8]],\n            [dr[5], br[9]],\n            [dr[6], br[10]],\n            [dr[7], br[1]],\n            [dr[8], br[2]],\n            [dr[9], br[3]],\n            [dr[10], br[4]],\n            [br[0], b[0]],\n            [br[1], b[3]],\n            [br[2], b[4]],\n            [br[3], b[5]],\n            [br[4], b[6]],\n            [br[5], b[7]],\n            [br[6], b[8]],\n            [br[7], b[9]],\n            [br[8], b[10]],\n            [br[9], b[1]],\n            [br[10], b[2]],\n            [b[0], bl[0]],\n            [b[1], bl[3]],\n            [b[2], bl[4]],\n            [b[3], bl[5]],\n            [b[4], bl[6]],\n            [b[5], bl[7]],\n            [b[6], bl[8]],\n            [b[7], bl[9]],\n            [b[8], bl[10]],\n            [b[9], bl[1]],\n            [b[10], bl[2]],\n            [bl[0], dl[0]],\n            [bl[1], dl[5]],\n            [bl[2], dl[6]],\n            [bl[3], dl[7]],\n            [bl[4], dl[8]],\n            [bl[5], dl[9]],\n            [bl[6], dl[10]],\n            [bl[7], dl[1]],\n            [bl[8], dl[2]],\n            [bl[9], dl[3]],\n            [bl[10], dl[4]],\n            [dl[0], dr[0]],\n            [dl[1], dr[9]],\n            [dl[2], dr[10]],\n            [dl[3], dr[1]],\n            [dl[4], dr[2]],\n            [dl[5], dr[3]],\n            [dl[6], dr[4]],\n            [dl[7], dr[5]],\n            [dl[8], dr[6]],\n            [dl[9], dr[7]],\n            [dl[10], dr[8]],\n            ...makeFaceTurnDefinitions(d),\n        ], \"D++\");\n        // R++ / R--\n        this.addTurn([\n            // Top Layer\n            [F[0], U[0]],\n            [F[7], U[3]],\n            [F[8], U[4]],\n            [F[9], U[5]],\n            [F[10], U[6]],\n            [F[1], U[7]],\n            [F[2], U[8]],\n            [F[3], U[9]],\n            [U[0], BL[0]],\n            [U[3], BL[9]],\n            [U[4], BL[10]],\n            [U[5], BL[1]],\n            [U[6], BL[2]],\n            [U[7], BL[3]],\n            [U[8], BL[4]],\n            [U[9], BL[5]],\n            [BL[0], bl[0]],\n            [BL[9], bl[1]],\n            [BL[10], bl[2]],\n            [BL[1], bl[3]],\n            [BL[2], bl[4]],\n            [BL[3], bl[5]],\n            [BL[4], bl[6]],\n            [BL[5], bl[7]],\n            [bl[0], dl[0]],\n            [bl[1], dl[7]],\n            [bl[2], dl[8]],\n            [bl[3], dl[9]],\n            [bl[4], dl[10]],\n            [bl[5], dl[1]],\n            [bl[6], dl[2]],\n            [bl[7], dl[3]],\n            [dl[0], F[0]],\n            [dl[7], F[7]],\n            [dl[8], F[8]],\n            [dl[9], F[9]],\n            [dl[10], F[10]],\n            [dl[1], F[1]],\n            [dl[2], F[2]],\n            [dl[3], F[3]],\n            // Bottom Layer\n            [dr[0], R[0]],\n            [dr[1], R[9]],\n            [dr[2], R[10]],\n            [dr[3], R[1]],\n            [dr[4], R[2]],\n            [dr[5], R[3]],\n            [dr[6], R[4]],\n            [dr[7], R[5]],\n            [dr[8], R[6]],\n            [dr[9], R[7]],\n            [dr[10], R[8]],\n            [R[0], BR[0]],\n            [R[1], BR[5]],\n            [R[2], BR[6]],\n            [R[3], BR[7]],\n            [R[4], BR[8]],\n            [R[5], BR[9]],\n            [R[6], BR[10]],\n            [R[7], BR[1]],\n            [R[8], BR[2]],\n            [R[9], BR[3]],\n            [R[10], BR[4]],\n            [BR[0], b[0]],\n            [BR[1], b[1]],\n            [BR[2], b[2]],\n            [BR[3], b[3]],\n            [BR[4], b[4]],\n            [BR[5], b[5]],\n            [BR[6], b[6]],\n            [BR[7], b[7]],\n            [BR[8], b[8]],\n            [BR[9], b[9]],\n            [BR[10], b[10]],\n            [b[0], d[0]],\n            [b[1], d[5]],\n            [b[2], d[6]],\n            [b[3], d[7]],\n            [b[4], d[8]],\n            [b[5], d[9]],\n            [b[6], d[10]],\n            [b[7], d[1]],\n            [b[8], d[2]],\n            [b[9], d[3]],\n            [b[10], d[4]],\n            [d[0], dr[0]],\n            [d[1], dr[5]],\n            [d[2], dr[6]],\n            [d[3], dr[7]],\n            [d[4], dr[8]],\n            [d[5], dr[9]],\n            [d[6], dr[10]],\n            [d[7], dr[1]],\n            [d[8], dr[2]],\n            [d[9], dr[3]],\n            [d[10], dr[4]],\n            ...makeFaceTurnDefinitions(br),\n        ], \"R++\");\n    }\n    U(reverse) {\n        this.doTurn(\"U\", reverse);\n    }\n    R(reverse) {\n        this.doTurn(\"R\", reverse);\n    }\n    F(reverse) {\n        this.doTurn(\"F\", reverse);\n    }\n    dr(reverse) {\n        this.doTurn(\"dr\", reverse);\n    }\n    dl(reverse) {\n        this.doTurn(\"dl\", reverse);\n    }\n    L(reverse) {\n        this.doTurn(\"L\", reverse);\n    }\n    d(reverse) {\n        this.doTurn(\"d\", reverse);\n    }\n    br(reverse) {\n        this.doTurn(\"br\", reverse);\n    }\n    BR(reverse) {\n        this.doTurn(\"BR\", reverse);\n    }\n    BL(reverse) {\n        this.doTurn(\"BL\", reverse);\n    }\n    bl(reverse) {\n        this.doTurn(\"bl\", reverse);\n    }\n    b(reverse) {\n        this.doTurn(\"b\", reverse);\n    }\n    /**\n     * D++ for Pochmann notation. D-- if reverse = false\n     */\n    Dxx(reverse) {\n        this.doTurn(\"D++\", reverse);\n    }\n    /**\n     * R++ for Pochmann notation. R-- if reverse = false\n     */\n    Rxx(reverse) {\n        this.doTurn(\"R++\", reverse);\n    }\n    /**\n     * Parses and executes a megaminx algorithm using WCA standard notation\n     *\n     * @see https://www.stefan-pochmann.info/spocc/other_stuff/tools/scramble_megaminx/)\n     * @see https://www.worldcubeassociation.org/regulations/#12d\n     *\n     * @param alg megaminx algorithm to parse\n     * @example\n     * ```\n     * R-- D++ R++ U'\n     * ```\n     */\n    alg(alg) {\n        if (!alg) {\n            return;\n        }\n        // pochmann notation\n        this.doTurns(parseMegaminxAlgorithm(alg));\n    }\n    case(alg) {\n        if (!alg) {\n            return;\n        }\n        let turns = parseMegaminxAlgorithm(alg)\n            .reverse()\n            .map((turn) => (Object.assign(Object.assign({}, turn), { turnType: turn.turnType === TurnType.Clockwise\n                ? TurnType.CounterClockwise\n                : TurnType.Clockwise })));\n        this.doTurns(turns);\n    }\n    doTurns(turns) {\n        turns.forEach((turn) => {\n            let reverse = turn.turnType === TurnType.CounterClockwise;\n            let turnFunc;\n            switch (turn.unit) {\n                case \"Rxx\":\n                    turnFunc = this.Rxx.bind(this);\n                    break;\n                case \"Dxx\":\n                    turnFunc = this.Dxx.bind(this);\n                    break;\n                case \"U\":\n                    turnFunc = this.U.bind(this);\n                    break;\n                case \"R\":\n                    turnFunc = this.R.bind(this);\n                    break;\n                case \"F\":\n                    turnFunc = this.F.bind(this);\n                    break;\n                case \"L\":\n                    turnFunc = this.L.bind(this);\n                    break;\n                case \"BL\":\n                    turnFunc = this.BL.bind(this);\n                    break;\n                case \"BR\":\n                    turnFunc = this.BR.bind(this);\n                    break;\n            }\n            for (let i = turn.n; i > 0; i--) {\n                turnFunc(reverse);\n            }\n        });\n    }\n}\n/**\n * Generates turn definitions for rotating a megaminx face clockwise\n * @param face array of sticker ids\n */\nfunction makeFaceTurnDefinitions(face) {\n    return [\n        // Edges\n        [face[1], face[9]],\n        [face[9], face[7]],\n        [face[7], face[5]],\n        [face[5], face[3]],\n        [face[3], face[1]],\n        // Corners\n        [face[2], face[10]],\n        [face[10], face[8]],\n        [face[8], face[6]],\n        [face[6], face[4]],\n        [face[4], face[2]],\n    ];\n}\n","export var SIMULATOR_FACE;\n(function (SIMULATOR_FACE) {\n    SIMULATOR_FACE[\"U\"] = \"U\";\n    SIMULATOR_FACE[\"R\"] = \"R\";\n    SIMULATOR_FACE[\"F\"] = \"F\";\n    SIMULATOR_FACE[\"D\"] = \"D\";\n    SIMULATOR_FACE[\"L\"] = \"L\";\n    SIMULATOR_FACE[\"B\"] = \"B\";\n})(SIMULATOR_FACE || (SIMULATOR_FACE = {}));\nexport const CUBE_FACES = [\n    SIMULATOR_FACE.U,\n    SIMULATOR_FACE.R,\n    SIMULATOR_FACE.F,\n    SIMULATOR_FACE.D,\n    SIMULATOR_FACE.L,\n    SIMULATOR_FACE.B,\n];\nexport var CUBE_AXIS;\n(function (CUBE_AXIS) {\n    CUBE_AXIS[\"X\"] = \"X\";\n    CUBE_AXIS[\"Y\"] = \"Y\";\n    CUBE_AXIS[\"Z\"] = \"Z\";\n})(CUBE_AXIS || (CUBE_AXIS = {}));\n// Faces that wrap around a given axis\nexport const CUBE_AXIS_FACES = {\n    X: [SIMULATOR_FACE.U, SIMULATOR_FACE.B, SIMULATOR_FACE.D, SIMULATOR_FACE.F],\n    Y: [SIMULATOR_FACE.L, SIMULATOR_FACE.B, SIMULATOR_FACE.R, SIMULATOR_FACE.F],\n    Z: [SIMULATOR_FACE.L, SIMULATOR_FACE.U, SIMULATOR_FACE.R, SIMULATOR_FACE.D],\n};\n// Face's orientation related to other faces on a given axis\n// the number represents the number of turns necessary\n// to orient the face in the same direction\nexport const AXIS_ORIENTATION = {\n    X: {\n        [SIMULATOR_FACE.U]: 0,\n        [SIMULATOR_FACE.B]: 2,\n        [SIMULATOR_FACE.F]: 0,\n        [SIMULATOR_FACE.D]: 0,\n    },\n    Y: {\n        [SIMULATOR_FACE.B]: -1,\n        [SIMULATOR_FACE.F]: -1,\n        [SIMULATOR_FACE.L]: -1,\n        [SIMULATOR_FACE.R]: -1,\n    },\n    Z: {\n        [SIMULATOR_FACE.U]: -1,\n        [SIMULATOR_FACE.D]: 1,\n        [SIMULATOR_FACE.L]: 2,\n        [SIMULATOR_FACE.R]: 0,\n    },\n};\n// True if faces are in reverse orientation\n// from the axis it's on (X, Y, Z).\n// For example D turns on the Y axis, but the\n// y axis layer turns clockwise based on the U\n// face, so D needs to be reversed\nexport const AXIS_FACE_ORIENTATION = {\n    [SIMULATOR_FACE.U]: false,\n    [SIMULATOR_FACE.R]: false,\n    [SIMULATOR_FACE.F]: false,\n    [SIMULATOR_FACE.D]: true,\n    [SIMULATOR_FACE.L]: true,\n    [SIMULATOR_FACE.B]: true,\n};\n","import { Vector2, Vector3 } from \"./vector\";\nexport function degreesToRadians(degrees) {\n    return (Math.PI * degrees) / 180;\n}\nexport function polarToCartesian(radius, theta) {\n    const x = radius * Math.cos(theta);\n    const y = radius * Math.sin(theta);\n    return Vector2.fromValues(x, y);\n}\nexport function lineSegmentLength(p1, p2) {\n    return Math.sqrt(Math.pow(p2.y - p1.y, 2) + Math.pow(p2.x - p1.x, 2));\n}\n/**\n * Calculates the radius of a circle inscribing a regular\n * pentagon given the side length\n */\nexport function pentagonInRadius(length) {\n    return length / (2 * Math.tan(Math.PI / 5));\n}\n/**\n * Calculates the radius of a circle circumscribing a\n * regular pentagon given the side length\n */\nexport function pentagonOutRadius(length) {\n    return length / (2 * Math.sin(Math.PI / 5));\n}\n/**\n * Calculates the radius of the sphere that inscribes a\n * regular dodecahedron given the side length\n */\nexport function dodecahedronInRadius(length) {\n    return (length / 2) * Math.sqrt(5 / 2 + (11 / 10) * Math.sqrt(5));\n}\nexport function calculateCentroid(vertices) {\n    let cx = 0, cy = 0, cz = 0;\n    vertices.forEach((vertex) => {\n        cx += vertex.x;\n        cy += vertex.y;\n        cz += vertex.z;\n    });\n    cx /= vertices.length;\n    cy /= vertices.length;\n    cz /= vertices.length;\n    return Vector3.fromValues(cx, cy, cz);\n}\n/**\n * generates an array with values in a given range by step\n *\n * ex. range(1, 5) -> [1, 2, 3, 4, 5]\n * ex. range(5, 2) -> [5, 4, 3, 2]\n *\n * @param from start of range\n * @param to end of range\n */\nexport function range(from, to) {\n    if (from === to) {\n        return [from];\n    }\n    const increment = from < to ? 1 : -1;\n    let values = [];\n    for (let current = from; current != to; current += increment) {\n        values.push(current);\n    }\n    values.push(to);\n    return values;\n}\n","import { CubeAlgorithmUnit } from \"./../../algorithms/cube\";\nimport { fillArray } from \"../../utils/arrays\";\nimport { CUBE_FACES, CUBE_AXIS, CUBE_AXIS_FACES, AXIS_ORIENTATION, SIMULATOR_FACE, AXIS_FACE_ORIENTATION, } from \"./constants\";\nimport { Simulator } from \"../simulator\";\nimport { range } from \"../../math/utils\";\nimport { parseCubeAlgorithm } from \"../../algorithms/cube\";\nimport { TurnType } from \"../../algorithms/algorithm\";\nexport class RubiksCubeSimulator extends Simulator {\n    constructor(size) {\n        super();\n        this.size = size;\n        this.gridSize = size * size;\n        CUBE_FACES.forEach((faceName) => {\n            // Create stickers for face\n            this.addFace(fillArray(this.gridSize, faceName), faceName);\n            const faceChanges = this.makeFaceTurnDefinitions(faceName);\n            // Create rotation for stickers on face only\n            this.addTurn(faceChanges, faceName);\n        });\n        // Create rotations for stickers on each layer\n        // around each turnable axis\n        [CUBE_AXIS.X, CUBE_AXIS.Y, CUBE_AXIS.Z].forEach((axis) => {\n            for (let column = 0; column < this.size; column++) {\n                let layerChanges = [];\n                CUBE_AXIS_FACES[axis].forEach((faceName, i) => {\n                    const nextFaceName = CUBE_AXIS_FACES[axis][(i + 1) % CUBE_AXIS_FACES[axis].length];\n                    const nextFace = this.faces.get(nextFaceName);\n                    const currentFace = this.faces.get(faceName);\n                    for (let row = 0; row < this.size; row++) {\n                        const stickerIndex = this.size * row + column;\n                        const sticker1 = currentFace[this.axisAlignedSticker(axis, faceName, stickerIndex)];\n                        const sticker2 = nextFace[this.axisAlignedSticker(axis, nextFaceName, stickerIndex)];\n                        layerChanges.push([sticker1, sticker2]);\n                    }\n                });\n                this.addTurn(layerChanges, `${axis}-${column}`);\n            }\n        });\n    }\n    /**\n     * Makes turn definitions for a face of the cube\n     *\n     * @param faceName the label of the face to make turn definitions\n     * @example returning turn definitions for stickers on a 2x2\n     * ```\n     * addFace(['y', 'y', 'y', 'y'], 'U');\n     * // returns { faceId: 'U', stickerIds: ['1','2','3','4'] }\n     *\n     * makeTurnDefinitions('U');\n     * // returns [\n     * //   ['1','2'],\n     * //   ['2','4'],\n     * //   ['3','1'],\n     * //   ['4','3']\n     * // ]\n     * ```\n     */\n    makeFaceTurnDefinitions(faceName) {\n        const stickerIds = this.faces.get(faceName);\n        return stickerIds.map((stickerId, i) => [\n            stickerId,\n            stickerIds[this.clockwiseSticker(i)],\n        ]);\n    }\n    /**\n     * Given sticker i return the index it will go to\n     * after rotating clockwise\n     *\n     * ex. stickers are stored in an array but represent a grid\n     * so, for a 3x3 sticker index 0 will rotate to 2, 1 to 5, etc...\n     *\n     * ```\n     *  0 | 1 | 2\n     *  ----------\n     *  3 | 4 | 5\n     *  ----------\n     *  6 | 7 | 8\n     * ```\n     */\n    clockwiseSticker(stickerIndex) {\n        return (((stickerIndex + 1) * this.size) % (this.gridSize + 1)) - 1;\n    }\n    /**\n     * Given sticker i return the index it will go to\n     * after rotating counterclockwise\n     */\n    counterClockwiseSticker(stickerIndex) {\n        return this.oppositeSticker(this.clockwiseSticker(stickerIndex));\n    }\n    /**\n     * Given sticker i return the index it will go to\n     * after rotating 180 degrees\n     */\n    oppositeSticker(stickerIndex) {\n        return this.gridSize - (stickerIndex + 1);\n    }\n    axisAlignedSticker(axis, face, stickerIndex) {\n        switch (AXIS_ORIENTATION[axis][face]) {\n            case 0:\n                return stickerIndex;\n            case 1:\n                return this.clockwiseSticker(stickerIndex);\n            case 2:\n                return this.oppositeSticker(stickerIndex);\n            case -1:\n                return this.counterClockwiseSticker(stickerIndex);\n            default:\n                throw `Invalid axis face orientation value ${AXIS_ORIENTATION[axis][face]}`;\n        }\n    }\n    /**\n     * Performs a turn on a given face.\n     *\n     * @param face the face to turn\n     * @param axis axis to perform inner layer turns on\n     * @param reverse true if you want to turn the face counter clockwise\n     * @param from inner layer to start turning from\n     * @param to last inner layer to stop turning\n     * @param to last inner layer to stop turning\n     */\n    turnFace(face, axis, reverse, from, to) {\n        if (Math.abs(to - from) >= this.size - 1) {\n            console.error(`Invalid number of layers to turn, skipping turn.; face=${face}, layers=${Math.abs(to - from) + 1}`);\n            return;\n        }\n        // Rotate face\n        this.doTurn(face, reverse);\n        // Turn inner layers\n        range(from, to).forEach((layer) => {\n            this.doTurn(`${axis}-${layer}`, AXIS_FACE_ORIENTATION[face] ? !reverse : reverse);\n        });\n    }\n    /**\n     * Performs a U turn\n     * @param reverse true if you want to turn the face counter clockwise (U')\n     * @param layers how many inner layers of the face to turn defaults to 1. Cannot be the cube size or greater\n     */\n    U(reverse = false, layers = 1) {\n        this.turnFace(SIMULATOR_FACE.U, CUBE_AXIS.Y, reverse, this.size - 1, this.size - layers);\n    }\n    /**\n     * Performs an R turn\n     * @param reverse true if you want to turn the face counter clockwise (R')\n     * @param layers how many inner layers of the face to turn defaults to 1. Cannot be the cube size or greater\n     */\n    R(reverse = false, layers = 1) {\n        this.turnFace(SIMULATOR_FACE.R, CUBE_AXIS.X, reverse, this.size - 1, this.size - layers);\n    }\n    /**\n     * Performs an F turn\n     * @param reverse true if you want to turn the face counter clockwise (F')\n     * @param layers how many inner layers of the face to turn defaults to 1. Cannot be the cube size or greater\n     */\n    F(reverse = false, layers = 1) {\n        this.turnFace(SIMULATOR_FACE.F, CUBE_AXIS.Z, reverse, 0, layers - 1);\n    }\n    /**\n     * Performs a D turn\n     * @param reverse true if you want to turn the face counter clockwise (D')\n     * @param layers how many inner layers of the face to turn defaults to 1. Cannot be the cube size or greater\n     */\n    D(reverse = false, layers = 1) {\n        this.turnFace(SIMULATOR_FACE.D, CUBE_AXIS.Y, reverse, 0, layers - 1);\n    }\n    /**\n     * Performs an L turn\n     * @param reverse true if you want to turn the face counter clockwise (L')\n     * @param layers how many inner layers of the face to turn defaults to 1. Cannot be the cube size or greater\n     */\n    L(reverse = false, layers = 1) {\n        this.turnFace(SIMULATOR_FACE.L, CUBE_AXIS.X, reverse, 0, layers - 1);\n    }\n    /**\n     * Performs a B turn\n     * @param reverse true if you want to turn the face counter clockwise (B')\n     * @param layers how many inner layers of the face to turn defaults to 1. Cannot be the cube size or greater\n     */\n    B(reverse = false, layers = 1) {\n        this.turnFace(SIMULATOR_FACE.B, CUBE_AXIS.Z, reverse, this.size - 1, this.size - layers);\n    }\n    /**\n     * Rotates the middle slice in the direction of an L turn\n     * https://ruwix.com/the-rubiks-cube/notation/advanced/\n     *\n     * Will rotate all middle layers inbetween R and L for larger cubes\n     */\n    M(reverse = false) {\n        for (let layer = 1; layer < this.size - 1; layer++) {\n            this.doTurn(`${CUBE_AXIS.X}-${layer}`, !reverse);\n        }\n    }\n    /**\n     * Rotates the standing layers in the direction of an F turn\n     * https://ruwix.com/the-rubiks-cube/notation/advanced/\n     *\n     * Will rotate all middle layers inbetween F and B for larger cubes\n     */\n    S(reverse = false) {\n        for (let layer = 1; layer < this.size - 1; layer++) {\n            this.doTurn(`${CUBE_AXIS.Z}-${layer}`, reverse);\n        }\n    }\n    /**\n     * Rotates the equitorial layers in the direction of a D turn\n     * https://ruwix.com/the-rubiks-cube/notation/advanced/\n     *\n     * Will rotate all middle layers inbetween U and D for larger cubes\n     */\n    E(reverse = false) {\n        for (let layer = 1; layer < this.size - 1; layer++) {\n            this.doTurn(`${CUBE_AXIS.Y}-${layer}`, !reverse);\n        }\n    }\n    /**\n     * rotates the entire cube on R\n     */\n    X(reverse = false) {\n        this.doTurn(\"R\", reverse);\n        this.doTurn(\"L\", !reverse);\n        for (let layer = 0; layer < this.size; layer++) {\n            this.doTurn(`${CUBE_AXIS.X}-${layer}`, reverse);\n        }\n    }\n    /**\n     * rotates the entire cube on U\n     */\n    Y(reverse = false) {\n        this.doTurn(\"U\", reverse);\n        this.doTurn(\"D\", !reverse);\n        for (let layer = 0; layer < this.size; layer++) {\n            this.doTurn(`${CUBE_AXIS.Y}-${layer}`, reverse);\n        }\n    }\n    /**\n     * rotates the entire cube on F\n     */\n    Z(reverse = false) {\n        this.doTurn(\"F\", reverse);\n        this.doTurn(\"B\", !reverse);\n        for (let layer = 0; layer < this.size; layer++) {\n            this.doTurn(`${CUBE_AXIS.Z}-${layer}`, reverse);\n        }\n    }\n    alg(alg) {\n        if (!alg) {\n            return;\n        }\n        this.doTurns(parseCubeAlgorithm(alg));\n    }\n    /**\n     * reverses an algorithm then executes it\n     */\n    case(alg) {\n        if (!alg) {\n            return;\n        }\n        let turns = parseCubeAlgorithm(alg)\n            .reverse()\n            .map((turn) => {\n            switch (turn.turnType) {\n                case TurnType.Clockwise:\n                    turn.turnType = TurnType.CounterClockwise;\n                    break;\n                case TurnType.CounterClockwise:\n                    turn.turnType = TurnType.Clockwise;\n                    break;\n                case TurnType.Double:\n                    break;\n            }\n            return turn;\n        });\n        this.doTurns(turns);\n    }\n    doTurns(turns) {\n        turns.forEach((turn) => {\n            let turnFunc;\n            switch (turn.unit) {\n                case CubeAlgorithmUnit.U:\n                    turnFunc = this.U.bind(this);\n                    break;\n                case CubeAlgorithmUnit.R:\n                    turnFunc = this.R.bind(this);\n                    break;\n                case CubeAlgorithmUnit.F:\n                    turnFunc = this.F.bind(this);\n                    break;\n                case CubeAlgorithmUnit.D:\n                    turnFunc = this.D.bind(this);\n                    break;\n                case CubeAlgorithmUnit.L:\n                    turnFunc = this.L.bind(this);\n                    break;\n                case CubeAlgorithmUnit.B:\n                    turnFunc = this.B.bind(this);\n                    break;\n                case CubeAlgorithmUnit.M:\n                    turnFunc = this.M.bind(this);\n                    break;\n                case CubeAlgorithmUnit.E:\n                    turnFunc = this.E.bind(this);\n                    break;\n                case CubeAlgorithmUnit.S:\n                    turnFunc = this.S.bind(this);\n                    break;\n                case CubeAlgorithmUnit.X:\n                    turnFunc = this.X.bind(this);\n                    break;\n                case CubeAlgorithmUnit.Y:\n                    turnFunc = this.Y.bind(this);\n                    break;\n                case CubeAlgorithmUnit.Z:\n                    turnFunc = this.Z.bind(this);\n                    break;\n                default:\n                    console.warn(`Unsupported cube move`, turn);\n                    break;\n            }\n            const reverse = turn.turnType === TurnType.CounterClockwise;\n            turnFunc(reverse, turn.slices);\n            if (turn.turnType === TurnType.Double) {\n                turnFunc(reverse, turn.slices);\n            }\n        });\n    }\n}\n","/**\n * Simple generator that yields a new ID every time\n * its called. Used to give unique IDs to geometry.\n */\nexport const generateUid = (() => {\n    let current = 0;\n    return function () {\n        return current++;\n    };\n})();\n","/**\n * Credit to logic https://github.com/toji/gl-matrix/blob/master/src/mat4.js\n */\nconst EPSILON = 0.000001;\nexport class Matrix4 {\n    constructor(values) {\n        if (Array.isArray(values) && values.length == 16) {\n            this.values = values;\n        }\n        else {\n            this.values = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n        }\n    }\n    /**\n     * Returns a 4x4 matrix with the given values\n     */\n    static fromValues(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14, m15, m16) {\n        return new Matrix4([\n            m1,\n            m2,\n            m3,\n            m4,\n            m5,\n            m6,\n            m7,\n            m8,\n            m9,\n            m10,\n            m11,\n            m12,\n            m13,\n            m14,\n            m15,\n            m16,\n        ]);\n    }\n    static fromQuaternion(q) {\n        let { a: x, b: y, c: z, d: w } = q;\n        let x2 = x + x;\n        let y2 = y + y;\n        let z2 = z + z;\n        let xx = x * x2;\n        let yx = y * x2;\n        let yy = y * y2;\n        let zx = z * x2;\n        let zy = z * y2;\n        let zz = z * z2;\n        let wx = w * x2;\n        let wy = w * y2;\n        let wz = w * z2;\n        return Matrix4.fromValues(1 - yy - zz, yx + wz, zx - wy, 0, yx - wz, 1 - xx - zz, zy + wx, 0, zx + wy, zy - wx, 1 - xx - yy, 0, 0, 0, 0, 1);\n    }\n    static fromTranslation(x, y, z) {\n        return Matrix4.fromValues(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x, y, z, 1);\n    }\n    static fromXRotation(radians) {\n        let s = Math.sin(radians);\n        let c = Math.cos(radians);\n        return Matrix4.fromValues(1, 0, 0, 0, 0, c, s, 0, 0, -s, c, 0, 0, 0, 0, 1);\n    }\n    static fromYRotation(radians) {\n        let s = Math.sin(radians);\n        let c = Math.cos(radians);\n        return Matrix4.fromValues(c, 0, -s, 0, 0, 1, 0, 0, s, 0, c, 0, 0, 0, 0, 1);\n    }\n    /**\n     * copy values from one matrix to another\n     */\n    static copy(out, matrix) {\n        out.values[0] = matrix.values[0];\n        out.values[1] = matrix.values[1];\n        out.values[2] = matrix.values[2];\n        out.values[3] = matrix.values[3];\n        out.values[4] = matrix.values[4];\n        out.values[5] = matrix.values[5];\n        out.values[6] = matrix.values[6];\n        out.values[7] = matrix.values[7];\n        out.values[8] = matrix.values[8];\n        out.values[9] = matrix.values[9];\n        out.values[10] = matrix.values[10];\n        out.values[11] = matrix.values[11];\n        out.values[12] = matrix.values[12];\n        out.values[13] = matrix.values[13];\n        out.values[14] = matrix.values[14];\n        out.values[15] = matrix.values[15];\n    }\n    static multiply(out, a, b) {\n        let a00 = a.values[0], a01 = a.values[1], a02 = a.values[2], a03 = a.values[3];\n        let a10 = a.values[4], a11 = a.values[5], a12 = a.values[6], a13 = a.values[7];\n        let a20 = a.values[8], a21 = a.values[9], a22 = a.values[10], a23 = a.values[11];\n        let a30 = a.values[12], a31 = a.values[13], a32 = a.values[14], a33 = a.values[15];\n        // Cache only the current line of the second matrix\n        let b0 = b.values[0], b1 = b.values[1], b2 = b.values[2], b3 = b.values[3];\n        out.values[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        out.values[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        out.values[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        out.values[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n        b0 = b.values[4];\n        b1 = b.values[5];\n        b2 = b.values[6];\n        b3 = b.values[7];\n        out.values[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        out.values[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        out.values[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        out.values[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n        b0 = b.values[8];\n        b1 = b.values[9];\n        b2 = b.values[10];\n        b3 = b.values[11];\n        out.values[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        out.values[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        out.values[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        out.values[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n        b0 = b.values[12];\n        b1 = b.values[13];\n        b2 = b.values[14];\n        b3 = b.values[15];\n        out.values[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        out.values[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        out.values[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        out.values[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n        return out;\n    }\n    /**\n     * Generates a perspective projection matrix with the given bounds.\n     * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n     * which matches WebGL/OpenGL's clip volume.\n     * Passing null/undefined/no value for far will generate infinite projection matrix.\n     *\n     * @param {number} fovy Vertical field of view in radians\n     * @param {number} aspect Aspect ratio. typically viewport width/height\n     * @param {number} near Near bound of the frustum\n     * @param {number} far Far bound of the frustum, can be null or Infinity\n     */\n    static perspective(fovy, aspect, near, far) {\n        const f = 1.0 / Math.tan(fovy / 2);\n        const values = [f / aspect, 0, 0, 0, 0, f, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0];\n        if (far != null && far !== Infinity) {\n            const nf = 1 / (near - far);\n            values[10] = (far + near) * nf;\n            values[14] = 2 * far * near * nf;\n        }\n        else {\n            values[10] = -1;\n            values[14] = -2 * near;\n        }\n        return new Matrix4(values);\n    }\n    translate(x, y, z) {\n        this.values[12] =\n            this.values[0] * x +\n                this.values[4] * y +\n                this.values[8] * z +\n                this.values[12];\n        this.values[13] =\n            this.values[1] * x +\n                this.values[5] * y +\n                this.values[9] * z +\n                this.values[13];\n        this.values[14] =\n            this.values[2] * x +\n                this.values[6] * y +\n                this.values[10] * z +\n                this.values[14];\n        this.values[15] =\n            this.values[3] * x +\n                this.values[7] * y +\n                this.values[11] * z +\n                this.values[15];\n    }\n    scale(x, y, z) {\n        this.values[0] = this.values[0] * x;\n        this.values[1] = this.values[1] * x;\n        this.values[2] = this.values[2] * x;\n        this.values[3] = this.values[3] * x;\n        this.values[4] = this.values[4] * y;\n        this.values[5] = this.values[5] * y;\n        this.values[6] = this.values[6] * y;\n        this.values[7] = this.values[7] * y;\n        this.values[8] = this.values[8] * z;\n        this.values[9] = this.values[9] * z;\n        this.values[10] = this.values[10] * z;\n        this.values[11] = this.values[11] * z;\n    }\n    /**\n     * Rotates the matrix by the given angle around the axis (x, y, z)\n     */\n    rotate(radians, x, y, z) {\n        let len = Math.hypot(x, y, z);\n        if (len < EPSILON) {\n            return;\n        }\n        len = 1 / len;\n        x *= len;\n        y *= len;\n        z *= len;\n        let s = Math.sin(radians);\n        let c = Math.cos(radians);\n        let t = 1 - c;\n        let a00, a01, a02, a03;\n        let a10, a11, a12, a13;\n        let a20, a21, a22, a23;\n        let b00, b01, b02;\n        let b10, b11, b12;\n        let b20, b21, b22;\n        a00 = this.values[0];\n        a01 = this.values[1];\n        a02 = this.values[2];\n        a03 = this.values[3];\n        a10 = this.values[4];\n        a11 = this.values[5];\n        a12 = this.values[6];\n        a13 = this.values[7];\n        a20 = this.values[8];\n        a21 = this.values[9];\n        a22 = this.values[10];\n        a23 = this.values[11];\n        // Construct the elements of the rotation matrix\n        b00 = x * x * t + c;\n        b01 = y * x * t + z * s;\n        b02 = z * x * t - y * s;\n        b10 = x * y * t - z * s;\n        b11 = y * y * t + c;\n        b12 = z * y * t + x * s;\n        b20 = x * z * t + y * s;\n        b21 = y * z * t - x * s;\n        b22 = z * z * t + c;\n        // Perform rotation-specific matrix multiplication\n        this.values[0] = a00 * b00 + a10 * b01 + a20 * b02;\n        this.values[1] = a01 * b00 + a11 * b01 + a21 * b02;\n        this.values[2] = a02 * b00 + a12 * b01 + a22 * b02;\n        this.values[3] = a03 * b00 + a13 * b01 + a23 * b02;\n        this.values[4] = a00 * b10 + a10 * b11 + a20 * b12;\n        this.values[5] = a01 * b10 + a11 * b11 + a21 * b12;\n        this.values[6] = a02 * b10 + a12 * b11 + a22 * b12;\n        this.values[7] = a03 * b10 + a13 * b11 + a23 * b12;\n        this.values[8] = a00 * b20 + a10 * b21 + a20 * b22;\n        this.values[9] = a01 * b20 + a11 * b21 + a21 * b22;\n        this.values[10] = a02 * b20 + a12 * b21 + a22 * b22;\n        this.values[11] = a03 * b20 + a13 * b21 + a23 * b22;\n    }\n    multiply(b) {\n        Matrix4.multiply(this, this, b);\n    }\n}\n","import { generateUid } from \"./uid\";\nimport { Vector3 } from \"../math/vector\";\nimport { Matrix4 } from \"../math/matrix\";\nexport class Object3D {\n    constructor() {\n        this.uid = generateUid();\n        this.matrix = new Matrix4();\n        this.centroid = Vector3.fromValues(0, 0, 0);\n    }\n    translate(x, y, z) {\n        this.matrix.translate(x, y, z);\n    }\n    rotate(rad, x, y, z) {\n        this.matrix.rotate(rad, x, y, z);\n    }\n    scale(x, y, z) {\n        this.matrix.scale(x, y, z);\n    }\n    setColor(color) {\n        this.color = color;\n    }\n}\n","import { Object3D } from \"./object3d\";\nexport class Group extends Object3D {\n    constructor(objects = []) {\n        super();\n        this.setObjects(objects);\n    }\n    setObjects(objects) {\n        this.objects = objects;\n    }\n    addObject(object) {\n        this.objects.push(object);\n    }\n    setCentroid(vector) {\n        this.centroid = vector;\n    }\n}\n","import { degreesToRadians } from \"./utils\";\nexport const SQRT_3 = Math.sqrt(3);\nexport const ATAN_15_DEG = Math.atan(degreesToRadians(15));\nexport const DEG_30_RADIANS = degreesToRadians(30);\nexport const DEG_36_RADIANS = degreesToRadians(36);\nexport const DEG_60_RADIANS = degreesToRadians(60);\nexport const DEG_72_RADIANS = degreesToRadians(72);\n","import { DEFAULT_SQ1_SCHEME, SOLVED_BOTTOM_PIECES, SOLVED_TOP_PIECES, } from \"./constants\";\nimport { Group } from \"./../../geometry/group\";\nimport { ATAN_15_DEG, DEG_30_RADIANS, DEG_60_RADIANS, } from \"./../../math/constants\";\nimport { PIECE_TYPE } from \"./enum\";\nexport class Square1Builder {\n    constructor(topLayer = SOLVED_TOP_PIECES, bottomLayer = SOLVED_BOTTOM_PIECES, middleRotated = false, scheme = DEFAULT_SQ1_SCHEME, sideLength = 0.7) {\n        this.scheme = scheme;\n        this.sideLength = sideLength;\n        this.halfSide = this.sideLength / 2;\n        this.halfEdgePiece = this.halfSide * ATAN_15_DEG;\n        this.layerWidth = this.halfSide - this.halfEdgePiece;\n        this.middleWidth = this.sideLength - 2 * this.layerWidth;\n        this.halfMiddleWidth = this.middleWidth / 2;\n        this.borderLayerWidth = this.sideLength * 0.2;\n        this.outerHalfSide = (sideLength + this.borderLayerWidth) / 2;\n        this.outerHalfEdgePiece = this.outerHalfSide * ATAN_15_DEG;\n        this.pieces = this.buildSquare1(topLayer, bottomLayer, middleRotated);\n        this.group = new Group(this.pieces);\n    }\n    makeLayer(pieces) {\n        let geometry = [];\n        let angle = Math.PI;\n        pieces.forEach((piece, index) => {\n            switch (piece.type) {\n                case PIECE_TYPE.CORNER:\n                    const corner = this.square1Corner(piece.colors[0], piece.colors[1], piece.colors[2]);\n                    corner.rotate(angle, 0, 0, 1);\n                    geometry.push(corner);\n                    angle -= DEG_60_RADIANS;\n                    break;\n                case PIECE_TYPE.EDGE:\n                    const edge = this.square1Edge(piece.colors[0], piece.colors[1]);\n                    edge.rotate(angle - DEG_60_RADIANS, 0, 0, 1);\n                    geometry.push(edge);\n                    angle -= DEG_30_RADIANS;\n                    break;\n            }\n        });\n        return geometry;\n    }\n    /**\n     * Not implemented. Just here for {@link Visualizer}'s sake\n     */\n    setColors(colors) { }\n}\n","import { calculateCentroid } from \"../math/utils\";\nimport { generateUid } from \"./uid\";\n/**\n * Face that will render as a puzzle sticker\n */\nexport class Face {\n    /**\n     * @param indices indices of vertices that make up a face\n     * @param vertices vertices of the geometry to calculate centroid from\n     * @param color color of the sticker\n     */\n    constructor(indices, vertices, color) {\n        this.indices = indices;\n        this.color = color;\n        this.uid = generateUid();\n        if (vertices) {\n            this.calculateCentroid(vertices);\n        }\n    }\n    /**\n     * recalculate the centroid of the face.\n     */\n    calculateCentroid(vertices) {\n        this.centroid = calculateCentroid(\n        // Calculate centroid from vertices included in the face\n        vertices.filter((v, i) => this.indices.includes(i)));\n    }\n}\n","import { Object3D } from \"./object3d\";\nimport { calculateCentroid } from \"../math/utils\";\nexport class Geometry extends Object3D {\n    constructor(vertices, faces) {\n        super();\n        this.vertices = vertices;\n        this.faces = faces;\n        this.centroid = calculateCentroid(this.vertices);\n    }\n}\n","import { Square1Builder } from \"./interface\";\nimport { DEG_30_RADIANS } from \"./../../math/constants\";\nimport { Face } from \"./../../geometry/face\";\nimport { Geometry } from \"./../../geometry/geometry\";\nimport { Group } from \"./../../geometry/group\";\nimport { DEFAULT_SQ1_SCHEME, SOLVED_TOP_PIECES, SOLVED_BOTTOM_PIECES, } from \"./constants\";\nimport { Vector3 } from \"../../math/vector\";\nexport class Square1Net extends Square1Builder {\n    constructor(topLayer = SOLVED_TOP_PIECES, bottomLayer = SOLVED_BOTTOM_PIECES, middleRotated = false, scheme = DEFAULT_SQ1_SCHEME, sideLength = 0.7) {\n        super(topLayer, bottomLayer, middleRotated, scheme, sideLength);\n    }\n    square1Corner(top, side1, side2) {\n        const points = [\n            // Top\n            Vector3.fromValues(0, 0, 0),\n            Vector3.fromValues(this.halfSide, this.halfEdgePiece, 0),\n            Vector3.fromValues(this.halfSide, this.halfSide, 0),\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, 0),\n            // Sides\n            Vector3.fromValues(this.outerHalfSide, this.outerHalfEdgePiece, 0),\n            Vector3.fromValues(this.outerHalfSide, this.outerHalfSide, 0),\n            Vector3.fromValues(this.outerHalfEdgePiece, this.outerHalfSide, 0),\n        ];\n        const faces = [\n            new Face([0, 1, 2, 3], points, top),\n            new Face([2, 3, 6, 5], points, side1),\n            new Face([1, 2, 5, 4], points, side2),\n        ];\n        return new Geometry(points, faces);\n    }\n    square1Edge(top, side) {\n        const points = [\n            // Top\n            Vector3.fromValues(0, 0, 0).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, 0).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n            Vector3.fromValues(-this.halfEdgePiece, this.halfSide, 0).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n            // Side\n            Vector3.fromValues(this.outerHalfEdgePiece, this.outerHalfSide, 0).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n            Vector3.fromValues(-this.outerHalfEdgePiece, this.outerHalfSide, 0).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n        ];\n        const faces = [\n            new Face([0, 1, 2], points, top),\n            new Face([1, 2, 4, 3], points, side),\n        ];\n        return new Geometry(points, faces);\n    }\n    square1Middle(front, right, back, rotated) {\n        const layerHeight = this.halfSide - this.halfEdgePiece;\n        const middleHeight = this.sideLength - 2 * layerHeight;\n        const halfMiddleHeight = middleHeight / 2;\n        const cornerLength = this.outerHalfSide - this.outerHalfEdgePiece;\n        const vertices = [\n            Vector3.fromValues(-this.outerHalfSide, halfMiddleHeight, -0.01),\n            Vector3.fromValues(-this.outerHalfEdgePiece, halfMiddleHeight, -0.01),\n            Vector3.fromValues(this.outerHalfSide, halfMiddleHeight, -0.01),\n            Vector3.fromValues(-this.outerHalfSide, -halfMiddleHeight, -0.01),\n            Vector3.fromValues(-this.outerHalfEdgePiece, -halfMiddleHeight, -0.01),\n            Vector3.fromValues(this.outerHalfSide, -halfMiddleHeight, -0.01),\n            // Points for when middle is rotated\n            Vector3.fromValues(2 * this.outerHalfEdgePiece, halfMiddleHeight, -0.01),\n            Vector3.fromValues(2 * this.outerHalfEdgePiece, -halfMiddleHeight, -0.01),\n            Vector3.fromValues(2 * cornerLength, halfMiddleHeight, -0.01),\n            Vector3.fromValues(2 * cornerLength, -halfMiddleHeight, -0.01),\n        ];\n        // Left\n        const faces = [new Face([0, 1, 4, 3], vertices, front)];\n        // Right\n        if (!rotated) {\n            faces.push(new Face([1, 2, 5, 4], vertices, front));\n        }\n        else {\n            faces.push(new Face([1, 6, 7, 4], vertices, back));\n            faces.push(new Face([6, 8, 9, 7], vertices, right));\n        }\n        return new Geometry(vertices, faces);\n    }\n    buildSquare1(top, bottom, middleRotated) {\n        const layerHeight = this.halfSide - this.halfEdgePiece;\n        const middleHeight = this.sideLength - 2 * layerHeight;\n        const halfMiddleHeight = middleHeight / 2;\n        let pieces = [];\n        const topLayer = new Group(this.makeLayer(top));\n        const bottomLayer = new Group(this.makeLayer(bottom));\n        topLayer.translate(0, this.outerHalfSide + halfMiddleHeight, 0);\n        bottomLayer.translate(0, -(this.outerHalfSide + halfMiddleHeight), 0);\n        bottomLayer.rotate(DEG_30_RADIANS, 0, 0, 1);\n        pieces = [topLayer, bottomLayer];\n        const frontColor = this.scheme.front || DEFAULT_SQ1_SCHEME.front;\n        const leftColor = this.scheme.left || DEFAULT_SQ1_SCHEME.left;\n        const backColor = this.scheme.back || DEFAULT_SQ1_SCHEME.back;\n        const m = this.square1Middle(frontColor, leftColor, backColor, middleRotated);\n        this.faces = {\n            top: topLayer,\n            bottom: bottomLayer,\n        };\n        pieces.push(m);\n        return pieces;\n    }\n}\n","import { ROTATION_VECTOR, SOLVED_TOP_PIECES, SOLVED_BOTTOM_PIECES, DEFAULT_SQ1_SCHEME, } from \"./constants\";\nimport { Square1Builder } from \"./interface\";\nimport { DEG_30_RADIANS } from \"./../../math/constants\";\nimport { Geometry } from \"./../../geometry/geometry\";\nimport { Face } from \"./../../geometry/face\";\nimport { Group } from \"../../geometry/group\";\nimport { Vector3 } from \"../../math/vector\";\nconst INNER_FACE_COLOR = { value: \"#333\", stroke: \"#333\" };\nexport class Square1 extends Square1Builder {\n    constructor(topLayer = SOLVED_TOP_PIECES, bottomLayer = SOLVED_BOTTOM_PIECES, middleRotated = false, scheme = DEFAULT_SQ1_SCHEME, sideLength = 1.25) {\n        super(topLayer, bottomLayer, middleRotated, scheme, sideLength);\n    }\n    square1Corner(top, side1, side2) {\n        const points = [\n            // Top\n            Vector3.fromValues(0, 0, this.halfSide),\n            Vector3.fromValues(this.halfSide, this.halfEdgePiece, this.halfSide),\n            Vector3.fromValues(this.halfSide, this.halfSide, this.halfSide),\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, this.halfSide),\n            // Bottom\n            Vector3.fromValues(0, 0, this.halfSide - this.layerWidth),\n            Vector3.fromValues(this.halfSide, this.halfEdgePiece, this.halfSide - this.layerWidth),\n            Vector3.fromValues(this.halfSide, this.halfSide, this.halfSide - this.layerWidth),\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, this.halfSide - this.layerWidth),\n        ];\n        const faces = [\n            new Face([0, 1, 2, 3], points, top),\n            // TODO: the faces commented out here are the underside of the pieces so\n            // they show gray when the cube is scrambled. But they are overlapping sometimes\n            // with outward sticker faces. removing them for now, but it'd be nice to\n            // fix this.\n            new Face([4, 5, 6, 7], points, INNER_FACE_COLOR),\n            new Face([0, 1, 5, 4], points, INNER_FACE_COLOR),\n            new Face([2, 3, 7, 6], points, side1),\n            new Face([1, 2, 6, 5], points, side2),\n            new Face([0, 3, 7, 4], points, INNER_FACE_COLOR),\n        ];\n        const innerCentroid = Vector3.fromValues(this.halfSide / 2, this.halfSide / 2, this.halfSide / 2);\n        faces[1].centroid = innerCentroid;\n        faces[2].centroid = innerCentroid;\n        faces[5].centroid = innerCentroid;\n        return new Geometry(points, faces);\n    }\n    square1Edge(top, side) {\n        const points = [\n            // Top\n            Vector3.fromValues(0, 0, this.halfSide).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, this.halfSide).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n            Vector3.fromValues(-this.halfEdgePiece, this.halfSide, this.halfSide).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n            // Bottom\n            Vector3.fromValues(0, 0, this.halfSide - this.layerWidth).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, this.halfSide - this.layerWidth).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n            Vector3.fromValues(-this.halfEdgePiece, this.halfSide, this.halfSide - this.layerWidth).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n        ];\n        const faces = [\n            new Face([0, 1, 2], points, top),\n            new Face([3, 4, 5], points, INNER_FACE_COLOR),\n            new Face([1, 2, 5, 4], points, side),\n            new Face([0, 1, 4, 3], points, INNER_FACE_COLOR),\n            new Face([0, 2, 5, 3], points, INNER_FACE_COLOR),\n        ];\n        const innerFaceCentroid = Vector3.fromValues(0, this.halfSide / 2, this.halfSide / 2).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS);\n        // Override centroid to avoid drawing over outside stickers\n        faces[1].centroid = innerFaceCentroid;\n        faces[3].centroid = innerFaceCentroid;\n        faces[4].centroid = innerFaceCentroid;\n        return new Geometry(points, faces);\n    }\n    square1Middle(front, side, back) {\n        const vertices = [\n            Vector3.fromValues(-this.halfSide, -this.halfSide, this.halfMiddleWidth),\n            Vector3.fromValues(-this.halfSide, this.halfSide, this.halfMiddleWidth),\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, this.halfMiddleWidth),\n            Vector3.fromValues(-this.halfEdgePiece, -this.halfSide, this.halfMiddleWidth),\n            Vector3.fromValues(-this.halfSide, -this.halfSide, -this.halfMiddleWidth),\n            Vector3.fromValues(-this.halfSide, this.halfSide, -this.halfMiddleWidth),\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, -this.halfMiddleWidth),\n            Vector3.fromValues(-this.halfEdgePiece, -this.halfSide, -this.halfMiddleWidth),\n        ];\n        const faces = [\n            new Face([0, 1, 2, 3], vertices, { value: \"#333\" }),\n            new Face([4, 5, 6, 7], vertices, { value: \"#333\" }),\n            new Face([0, 1, 5, 4], vertices, side),\n            new Face([1, 2, 6, 5], vertices, back),\n            // new Face([2, 3, 7, 6], vertices, { value: \"#333\" }),\n            new Face([0, 3, 7, 4], vertices, front),\n        ];\n        const innerFaceCentroid = Vector3.fromValues(-this.halfSide / 2, 0, 0);\n        // Override centroid to avoid drawing over outside stickers\n        faces[0].centroid = innerFaceCentroid;\n        faces[1].centroid = innerFaceCentroid;\n        faces[2].centroid = Vector3.fromValues(-(this.halfSide + this.halfSide * 0.45), 0, 0);\n        return new Geometry(vertices, faces);\n    }\n    buildSquare1(top, bottom, middleRotated) {\n        const topLayer = new Group(this.makeLayer(top));\n        const bottomLayer = new Group(this.makeLayer(bottom));\n        bottomLayer.rotate(Math.PI, 1, 0, 0);\n        bottomLayer.rotate(DEG_30_RADIANS, 0, 0, 1);\n        const pieces = [topLayer, bottomLayer];\n        const frontColor = this.scheme.front || DEFAULT_SQ1_SCHEME.front;\n        const leftColor = this.scheme.left || DEFAULT_SQ1_SCHEME.left;\n        const backColor = this.scheme.back || DEFAULT_SQ1_SCHEME.back;\n        const rightColor = this.scheme.right || DEFAULT_SQ1_SCHEME.right;\n        const m1 = this.square1Middle(frontColor, leftColor, backColor);\n        const m2 = this.square1Middle(backColor, rightColor, frontColor);\n        m2.rotate(Math.PI, 0, 0, 1);\n        if (middleRotated) {\n            m2.rotate(Math.PI, ROTATION_VECTOR.x, ROTATION_VECTOR.y, ROTATION_VECTOR.z);\n        }\n        pieces.push(m1);\n        pieces.push(m2);\n        this.faces = {\n            top: topLayer,\n            bottom: bottomLayer,\n        };\n        return pieces;\n    }\n}\n","import { Geometry } from \"./geometry\";\nimport { Face } from \"./face\";\nimport { Vector3 } from \"../math/vector\";\nexport class Plane extends Geometry {\n    constructor(width, height, color) {\n        let vertices = [\n            Vector3.fromValues(0, 0, 0),\n            Vector3.fromValues(width, 0, 0),\n            Vector3.fromValues(width, -height, 0),\n            Vector3.fromValues(0, -height, 0),\n        ];\n        let faces = [new Face([0, 1, 2, 3], vertices, color)];\n        super(vertices, faces);\n    }\n}\n","import { Geometry } from \"./geometry\";\nimport { Face } from \"./face\";\nimport { SQRT_3 } from \"../math/constants\";\nimport { Vector3 } from \"../math/vector\";\nexport class Triangle extends Geometry {\n    constructor(a, b, c, color) {\n        let verticies = [a, b, c];\n        let faces = [new Face([0, 1, 2], verticies, color)];\n        super(verticies, faces);\n    }\n}\nexport class EquilateralTriangle extends Triangle {\n    constructor(base, color) {\n        let height = base * (SQRT_3 / 2);\n        super(Vector3.fromValues(0, 0, 0), Vector3.fromValues(base / 2, height, 0), Vector3.fromValues(base, 0, 0), color);\n    }\n}\n","import { RED, YELLOW, BLUE, ORANGE, GREEN, WHITE, BLACK } from \"./colors\";\nimport { Group } from \"../geometry/group\";\nimport { Plane } from \"../geometry/plane\";\nimport { Triangle } from \"../geometry/triangle\";\nimport { Vector3 } from \"../math/vector\";\nexport class SkewbNet {\n    constructor() {\n        const cubeWidth = 1;\n        const centerWidth = Math.sqrt(Math.pow(cubeWidth / 2, 2) * 2);\n        const orange = new Group(this.makeStickers(ORANGE, centerWidth, Vector3.fromValues(-cubeWidth, 0, 0)));\n        const green = new Group(this.makeStickers(GREEN, centerWidth, Vector3.fromValues(2 * cubeWidth, 0, 0)));\n        const white = new Group(this.makeStickers(WHITE, centerWidth, Vector3.fromValues(0, -cubeWidth, 0)));\n        const red = new Group(this.makeStickers(RED, centerWidth, Vector3.fromValues(cubeWidth, 0, 0)));\n        const yellow = new Group(this.makeStickers(YELLOW, centerWidth, Vector3.fromValues(0, cubeWidth, 0)));\n        const blue = new Group(this.makeStickers(BLUE, centerWidth, Vector3.fromValues(0, 0, 0)));\n        this.U = yellow;\n        this.R = red;\n        this.F = blue;\n        this.L = orange;\n        this.B = green;\n        this.D = white;\n        this.faces = {\n            top: this.U,\n            front: this.F,\n            right: this.R,\n            back: this.B,\n            left: this.L,\n            bottom: this.D,\n        };\n        this.stickers = [red, yellow, blue, orange, green, white];\n        this.group = new Group(this.stickers);\n        this.group.translate(-cubeWidth / 4, 0, 0);\n        this.group.scale(0.5, 0.5, 0.5);\n    }\n    makeStickers(color, width, translate) {\n        const center = new Plane(width, width, color);\n        center.translate(translate.x, translate.y, translate.z);\n        center.rotate(Math.PI / 4, 0, 0, 1);\n        center.translate(-width / 2, width / 2, 0);\n        const triangles = [];\n        for (let i = 0; i < 4; i++) {\n            const triangle = new Triangle(Vector3.fromValues(-width / 2, width / 2, 0), Vector3.fromValues(0, width, 0), Vector3.fromValues(width / 2, width / 2, 0), color);\n            triangle.translate(translate.x, translate.y, translate.z);\n            triangle.rotate((-Math.PI / 2) * i, 0, 0, 1);\n            triangle.rotate(Math.PI / 4, 0, 0, 1);\n            triangles.push(triangle);\n        }\n        return [center, ...triangles];\n    }\n    setColors(colors) {\n        let { top, right, front, bottom, left, back } = colors;\n        this.setFaceColors(this.U, top);\n        this.setFaceColors(this.R, right);\n        this.setFaceColors(this.F, front);\n        this.setFaceColors(this.D, bottom);\n        this.setFaceColors(this.L, left);\n        this.setFaceColors(this.B, back);\n    }\n    setFaceColors(faceStickers, colors = []) {\n        faceStickers.objects[0].faces[0].color = colors[0] || BLACK;\n        faceStickers.objects[1].faces[0].color = colors[1] || BLACK;\n        faceStickers.objects[2].faces[0].color = colors[2] || BLACK;\n        faceStickers.objects[3].faces[0].color = colors[4] || BLACK; // Setting 3 -> 4 and 4 -> 3 now because 4 and 3 are stored incorrectly in this class.\n        faceStickers.objects[4].faces[0].color = colors[3] || BLACK;\n    }\n}\n","import { RED, YELLOW, BLUE, ORANGE, GREEN, WHITE, BLACK } from \"./colors\";\nimport { Group } from \"../geometry/group\";\nimport { Plane } from \"../geometry/plane\";\nimport { Triangle } from \"../geometry/triangle\";\nimport { Vector3 } from \"../math/vector\";\nexport class Skewb {\n    constructor() {\n        const cubeWidth = 1.25;\n        const centerWidth = Math.sqrt(Math.pow(cubeWidth / 2, 2) * 2);\n        const halfWidth = cubeWidth / 2;\n        const red = new Group(this.makeStickers(RED, centerWidth));\n        const yellow = new Group(this.makeStickers(YELLOW, centerWidth, Vector3.fromValues(1, 0, 0)));\n        const blue = new Group(this.makeStickers(BLUE, centerWidth, Vector3.fromValues(0, 1, 0)));\n        const orange = new Group(this.makeStickers(ORANGE, centerWidth));\n        const green = new Group(this.makeStickers(GREEN, centerWidth, Vector3.fromValues(0, 1, 0)));\n        const white = new Group(this.makeStickers(WHITE, centerWidth, Vector3.fromValues(1, 0, 0)));\n        this.U = yellow;\n        this.R = red;\n        this.F = blue;\n        this.L = orange;\n        this.B = green;\n        this.D = white;\n        this.faces = {\n            top: this.U,\n            front: this.F,\n            right: this.R,\n            back: this.B,\n            left: this.L,\n            bottom: this.D,\n        };\n        red.translate(0, 0, halfWidth);\n        red.rotate(Math.PI, 1, 0, 0);\n        red.rotate(Math.PI / 2, 0, 0, 1);\n        orange.rotate(-Math.PI / 2, 0, 0, 1);\n        orange.translate(0, 0, -halfWidth);\n        blue.rotate(-Math.PI / 2, 1, 0, 0);\n        blue.translate(-halfWidth, 0, 0);\n        green.translate(halfWidth, 0, 0);\n        green.rotate(Math.PI, 0, 1, 0);\n        green.rotate(-Math.PI / 2, 1, 0, 0);\n        yellow.rotate(Math.PI, 0, 1, 0);\n        yellow.translate(0, halfWidth, 0);\n        white.translate(0, -halfWidth, 0);\n        white.rotate(Math.PI, 1, 0, 0);\n        this.stickers = [red, yellow, blue, orange, green, white];\n        this.group = new Group(this.stickers);\n    }\n    makeStickers(color, width, axis) {\n        const center = new Plane(width, width, color);\n        if (axis) {\n            center.rotate(Math.PI / 2, axis.x, axis.y, axis.z);\n        }\n        center.rotate(Math.PI / 4, 0, 0, 1);\n        center.translate(-width / 2, width / 2, 0);\n        const triangles = [];\n        for (let i = 0; i < 4; i++) {\n            const triangle = new Triangle(Vector3.fromValues(-width / 2, width / 2, 0), Vector3.fromValues(0, width, 0), Vector3.fromValues(width / 2, width / 2, 0), color);\n            if (axis) {\n                triangle.rotate(Math.PI / 2, axis.x, axis.y, axis.z);\n            }\n            triangle.rotate((Math.PI / 2) * i, 0, 0, 1);\n            triangle.rotate(Math.PI / 4, 0, 0, 1);\n            triangles.push(triangle);\n        }\n        return [center, ...triangles];\n    }\n    setColors(colors) {\n        let { top, right, front, bottom, left, back } = colors;\n        this.setFaceColors(this.U, top);\n        this.setFaceColors(this.R, right);\n        this.setFaceColors(this.F, front);\n        this.setFaceColors(this.D, bottom);\n        this.setFaceColors(this.L, left);\n        this.setFaceColors(this.B, back);\n    }\n    setFaceColors(faceStickers, colors = []) {\n        faceStickers.objects[0].faces[0].color = colors[0] || BLACK;\n        faceStickers.objects[1].faces[0].color = colors[1] || BLACK;\n        faceStickers.objects[2].faces[0].color = colors[2] || BLACK;\n        faceStickers.objects[3].faces[0].color = colors[4] || BLACK; // Setting 3 -> 4 and 4 -> 3 now because 4 and 3 are stored incorrectly in this class.\n        faceStickers.objects[4].faces[0].color = colors[3] || BLACK;\n    }\n}\n","import { Face } from \"./face\";\nimport { Geometry } from \"./geometry\";\nimport { SQRT_3 } from \"../math/constants\";\nimport { Vector3 } from \"../math/vector\";\n/**\n * Geometry to build a triangle lattice for the\n * pyraminx puzzle\n */\nexport class TriangleLattice extends Geometry {\n    constructor(base, size, color) {\n        const halfBase = base / 2;\n        const fullHeight = base * (SQRT_3 / 2);\n        const triangleBase = base / size;\n        const triangleHeight = fullHeight / size;\n        const inradius = fullHeight / 3;\n        let vertices = [];\n        let faces = [];\n        /**\n         * Builds one layer of verticies at a time\n         * for each layer after the first it constructs\n         * faces for the triangles (0,1,4), (1,2,5) etc...\n         *\n         *       9\n         *     7   8\n         *   4   5   6\n         * 0   1   2   3\n         */\n        let index = 0;\n        for (let layer = 0; layer <= size; layer++) {\n            for (let vertex = 0, count = size - layer; vertex <= count; vertex++) {\n                const horizontalOffset = -halfBase;\n                const verticalOffset = -inradius;\n                const x = triangleBase * vertex + (layer * triangleBase) / 2 + horizontalOffset;\n                const y = triangleHeight * layer + verticalOffset;\n                vertices.push(Vector3.fromValues(x, y, 0));\n                if (layer > 0) {\n                    // down triangle\n                    if (vertex > 0) {\n                        faces.push(new Face([index, index - 1, index - count - 2], null, color));\n                    }\n                    // up triangle\n                    faces.push(new Face([index, index - count - 2, index - count - 1], null, color));\n                }\n                index++;\n            }\n        }\n        faces.forEach((face) => face.calculateCentroid(vertices));\n        super(vertices, faces);\n    }\n}\n","import { GREEN, RED, BLUE, YELLOW, BLACK } from \"./colors\";\nimport { TriangleLattice } from \"./../geometry/triangleLattice\";\nimport { Group } from \"./../geometry/group\";\nimport { SQRT_3 } from \"../math/constants\";\nconst DEG_60_RADIANS = (60 * Math.PI) / 180;\nexport class PyraminxNet {\n    constructor(size, sideLength = 0.925) {\n        this.size = size;\n        const fullHeight = sideLength * (SQRT_3 / 2);\n        const inDiameter = fullHeight / 1.5;\n        const faceSpacing = inDiameter * 0.1;\n        const U = new TriangleLattice(sideLength, size, YELLOW);\n        const R = new TriangleLattice(sideLength, size, GREEN);\n        const L = new TriangleLattice(sideLength, size, BLUE);\n        const B = new TriangleLattice(sideLength, size, RED);\n        this.L = L;\n        this.R = R;\n        this.U = U;\n        this.B = B;\n        R.rotate(-DEG_60_RADIANS, 0, 0, 1);\n        R.translate(0, inDiameter + faceSpacing, 0);\n        R.rotate(2 * DEG_60_RADIANS, 0, 0, 1);\n        U.rotate(DEG_60_RADIANS, 0, 0, 1);\n        U.translate(0, inDiameter + faceSpacing, 0);\n        U.rotate(-2 * DEG_60_RADIANS, 0, 0, 1);\n        B.rotate(3 * DEG_60_RADIANS, 0, 0, 1);\n        B.translate(0, inDiameter + faceSpacing, 0);\n        B.rotate(-2 * DEG_60_RADIANS, 0, 0, 1);\n        this.faces = {\n            top: this.U,\n            right: this.R,\n            left: this.L,\n            back: this.B,\n        };\n        this.group = new Group([U, R, L, B]);\n    }\n    setColors(colors) {\n        let { left, right, top, back } = colors;\n        this.setFaceColors(this.L, left);\n        this.setFaceColors(this.R, right);\n        this.setFaceColors(this.U, top);\n        this.setFaceColors(this.B, back);\n    }\n    setFaceColors(lattice, colors) {\n        lattice.faces.forEach((f, i) => {\n            if (colors && colors[i]) {\n                f.color = colors[i];\n            }\n            else {\n                f.color = BLACK;\n            }\n        });\n    }\n}\n","import { GREEN, RED, BLUE, YELLOW, BLACK } from \"./colors\";\nimport { TriangleLattice } from \"./../geometry/triangleLattice\";\nimport { Group } from \"./../geometry/group\";\nconst ARC_COS_THIRD = Math.acos(1 / 3);\nconst DEG_120_RADIANS = (120 * Math.PI) / 180;\nconst SQRT_24 = Math.sqrt(24);\nexport class Pyraminx {\n    constructor(size, sideLength = 1.75) {\n        this.size = size;\n        const insphereRadius = sideLength / SQRT_24;\n        const U = new TriangleLattice(sideLength, size, YELLOW);\n        const R = new TriangleLattice(sideLength, size, GREEN);\n        const L = new TriangleLattice(sideLength, size, BLUE);\n        const B = new TriangleLattice(sideLength, size, RED);\n        this.L = L;\n        this.R = R;\n        this.U = U;\n        this.B = B;\n        U.rotate(DEG_120_RADIANS, 0, 0, 1);\n        U.rotate(ARC_COS_THIRD, 1, 0, 0);\n        U.translate(0, 0, insphereRadius);\n        R.rotate(ARC_COS_THIRD, 1, 0, 0);\n        R.translate(0, 0, insphereRadius);\n        L.rotate(-DEG_120_RADIANS, 0, 0, 1);\n        L.rotate(ARC_COS_THIRD, 1, 0, 0);\n        L.translate(0, 0, insphereRadius);\n        B.rotate(Math.PI, 0, 1, 0);\n        B.translate(0, 0, insphereRadius);\n        this.faces = {\n            top: this.U,\n            right: this.R,\n            left: this.L,\n            back: this.B,\n        };\n        this.group = new Group([U, L, R, B]);\n    }\n    setColors(colors) {\n        let { left, right, top, back } = colors;\n        this.setFaceColors(this.L, left);\n        this.setFaceColors(this.R, right);\n        this.setFaceColors(this.U, top);\n        this.setFaceColors(this.B, back);\n    }\n    setFaceColors(lattice, colors) {\n        lattice.faces.forEach((f, i) => {\n            if (colors && colors[i]) {\n                f.color = colors[i];\n            }\n            else {\n                f.color = BLACK;\n            }\n        });\n    }\n}\n","import { Face } from \"./../geometry/face\";\nimport { Geometry } from \"../geometry/geometry\";\nimport { polarToCartesian, lineSegmentLength, pentagonOutRadius, } from \"../math/utils\";\nimport { Vector2, Vector3 } from \"../math/vector\";\nexport class DividedPentagon extends Geometry {\n    /**\n     *\n     * @param color\n     * @param layers number of layers\n     * @param length length of entire edge of the outer pentagon\n     */\n    constructor(color, layers = 2, length = 1.6, layerWidth = 0.4 // TODO: calculate this somehow\n    ) {\n        const outRadius = pentagonOutRadius(length);\n        const radiusDiff = layerWidthToRadiusDiff(layerWidth);\n        const centerOutRadius = outRadius - radiusDiff * (layers - 1);\n        const vertices = faceVerticies(layers, centerOutRadius, radiusDiff, layerWidth);\n        super(vertices, makeFaces(layers, color, vertices));\n    }\n}\n/**\n * Given the the distance between two parallel sides of the\n * dividen pentagon, calculate the difference in pentagon radius\n */\nfunction layerWidthToRadiusDiff(width) {\n    const aSquared = width * width;\n    const angleRadians = (71 * Math.PI) / 180;\n    // Law of cosines\n    const cSquared = 2 * aSquared - 2 * aSquared * Math.cos(angleRadians);\n    const diff = 2 * Math.sqrt(Math.abs(aSquared - cSquared));\n    return diff;\n}\n/**\n * creates mapping for indicies in one layer to another\n * so we can build the geometry for a megaminx face\n */\nfunction downMapping(layer) {\n    if (layer < 1) {\n        return [];\n    }\n    let mapping = [];\n    const layerPoints = 5 + (layer - 1) * 10;\n    let previousPoints = 5 * (layer - 1) * (layer - 1);\n    for (let i = 0; i < layerPoints; i++) {\n        mapping.push(i + previousPoints);\n        if (i % (layerPoints / 5) === 0) {\n            mapping.push(i + previousPoints);\n        }\n    }\n    mapping.push(mapping.shift());\n    mapping.push(mapping.shift());\n    return mapping;\n}\nfunction layerVertexNumbers(layer) {\n    let previousPoints = 5 * layer * layer;\n    let vertexNumbers = [];\n    for (let i = 0, layerPoints = 5 + layer * 10; i < layerPoints; i++) {\n        vertexNumbers.push(i + previousPoints);\n    }\n    return vertexNumbers;\n}\nfunction makeFaces(layers, color, vertices) {\n    let faces = [];\n    const firstLayerFace = new Face([0, 1, 2, 3, 4], vertices, color);\n    faces.push(firstLayerFace);\n    let totalPoints = 5;\n    let currentPoint = 5;\n    for (let i = 1; i < layers; i++) {\n        const layerPoints = 5 + i * 10;\n        totalPoints += layerPoints;\n        const downMap = downMapping(i);\n        const prevLayer = layerVertexNumbers(i - 1);\n        const currentLayer = layerVertexNumbers(i);\n        while (currentPoint < totalPoints) {\n            const currentLayerPoint = currentPoint - (prevLayer[prevLayer.length - 1] + 1);\n            const f1isCorner = currentLayerPoint % (layerPoints / 5) === 0;\n            if (f1isCorner) {\n                currentPoint++;\n                continue;\n            }\n            const f2isCorner = (currentLayerPoint + 1) % (layerPoints / 5) === 0;\n            let f1 = currentPoint;\n            let f2 = currentLayer[(currentLayerPoint + 1) % currentLayer.length];\n            let f3 = f2isCorner ? f2 + 1 : downMap.shift();\n            let f4 = f2isCorner\n                ? downMap.shift()\n                : prevLayer[(prevLayer.indexOf(f3) - 1 + prevLayer.length) % prevLayer.length];\n            currentPoint++;\n            faces.push(new Face([f1, f2, f3, f4], vertices, color));\n        }\n    }\n    return faces;\n}\n/**\n * Takes two points and extrapolates points along the line they make\n *\n * @param p1 point 1\n * @param p2 point 2\n * @param segments how many points to extrapolate from each direction p1 -> p2 and p2 -> p1\n */\nfunction segmentPoints(p1, p2, segments, layerWidth) {\n    if (segments === 0) {\n        return [\n            Vector3.fromValues(p1.x, p1.y, 0),\n            Vector3.fromValues(p2.x, p2.y, 0),\n        ];\n    }\n    const length = lineSegmentLength(p1, p2);\n    let points = [];\n    for (let i = segments; i > 0; i--) {\n        // extrapolate from p1.v\n        let a = Vector3.fromValues(p1.x + ((p2.x - p1.x) / length) * layerWidth * i, p1.y + ((p2.y - p1.y) / length) * layerWidth * i, 0);\n        points.unshift(a);\n        // extrapolate from p2.v\n        let b = Vector3.fromValues(p2.x + ((p1.x - p2.x) / length) * layerWidth * i, p2.y + ((p1.y - p2.y) / length) * layerWidth * i, 0);\n        points.push(b);\n    }\n    points.unshift(Vector3.fromValues(p1.x, p1.y, 0));\n    points.push(Vector3.fromValues(p2.x, p2.y, 0));\n    return points;\n}\nfunction layerVerticies(layer, radius, layerWidth) {\n    let verticies = [];\n    for (let i = 0; i < 5; i++) {\n        const theta = (i * (2 * Math.PI)) / 5 - Math.PI / 10;\n        const v = polarToCartesian(radius, theta);\n        if (verticies.length > 0) {\n            const lastPoint = verticies[verticies.length - 1];\n            const points = segmentPoints(Vector2.fromValues(lastPoint.x, lastPoint.y), v, layer, layerWidth);\n            points.shift(); // Remove the first, otherwise it's duplicated\n            verticies = verticies.concat(points);\n        }\n        else {\n            verticies.push(Vector3.fromValues(v.x, v.y, 0));\n        }\n    }\n    // Insert segments for last and first\n    const first = verticies[0];\n    const last = verticies[verticies.length - 1];\n    const points = segmentPoints(Vector2.fromValues(last.x, last.y), Vector2.fromValues(first.x, first.y), layer, layerWidth);\n    points.pop();\n    points.shift();\n    verticies = verticies.concat(points);\n    return verticies;\n}\nfunction faceVerticies(layers, radius, radiusDiff, layerWidth) {\n    let verticies = [];\n    for (let i = 0; i < layers; i++) {\n        const r = radius + radiusDiff * i;\n        verticies = [...verticies, ...layerVerticies(i, r, layerWidth)];\n    }\n    return verticies;\n}\n","import { WHITE, RED, GREEN, PURPLE, YELLOW, BLUE, GREY, DARK_BLUE, LIGHT_YELLOW, PINK, LIGHT_GREEN, ORANGE, BLACK, } from \"./colors\";\nimport { Group } from \"./../geometry/group\";\nimport { DividedPentagon } from \"./../geometry/dividedPentagon\";\nimport { pentagonInRadius } from \"../math/utils\";\nimport { chunkArray } from \"../utils/arrays\";\nimport { Matrix4 } from \"../math/matrix\";\nconst DEG_36_RADIANS = (36 * Math.PI) / 180;\nconst DEG_72_RADIANS = (72 * Math.PI) / 180;\n/**\n * for a megaminx with side length 1,\n * layer widths that look good.\n */\nconst OPTIMAL_LAYER_WIDTH = {\n    2: 0.3,\n    3: 0.17,\n    4: 0.121,\n};\nfunction getLayerWidth(length, layers) {\n    return OPTIMAL_LAYER_WIDTH[layers] || length / (layers * 1.9);\n}\nexport class MegaminxNet {\n    constructor(layers) {\n        this.layers = layers;\n        const sideLength = 0.75;\n        const layerWidth = getLayerWidth(length, layers);\n        // Left\n        this.U = new DividedPentagon(WHITE, layers, sideLength, layerWidth);\n        this.F = new DividedPentagon(RED, layers, sideLength, layerWidth);\n        this.R = new DividedPentagon(BLUE, layers, sideLength, layerWidth);\n        this.L = new DividedPentagon(GREEN, layers, sideLength, layerWidth);\n        this.dl = new DividedPentagon(LIGHT_YELLOW, layers, sideLength, layerWidth);\n        this.dr = new DividedPentagon(PINK, layers, sideLength, layerWidth);\n        // Right\n        this.BL = new DividedPentagon(PURPLE, layers, sideLength, layerWidth);\n        this.BR = new DividedPentagon(YELLOW, layers, sideLength, layerWidth);\n        this.d = new DividedPentagon(GREY, layers, sideLength, layerWidth);\n        this.bl = new DividedPentagon(DARK_BLUE, layers, sideLength, layerWidth);\n        this.br = new DividedPentagon(LIGHT_GREEN, layers, sideLength, layerWidth);\n        this.b = new DividedPentagon(ORANGE, layers, sideLength, layerWidth);\n        const ind = 2 * pentagonInRadius(sideLength);\n        // Left\n        this.U.translate(0, ind, 0);\n        this.U.rotate(5 * DEG_36_RADIANS, 0, 0, 1);\n        this.R.rotate(-DEG_72_RADIANS, 0, 0, 1);\n        this.R.translate(0, ind, 0);\n        this.R.rotate(5 * DEG_36_RADIANS, 0, 0, 1);\n        this.L.rotate(DEG_72_RADIANS, 0, 0, 1);\n        this.L.translate(0, ind, 0);\n        this.L.rotate(-5 * DEG_36_RADIANS, 0, 0, 1);\n        this.dl.rotate(2 * DEG_72_RADIANS, 0, 0, 1);\n        this.dl.translate(0, ind, 0);\n        this.dl.rotate(-5 * DEG_36_RADIANS, 0, 0, 1);\n        this.dr.rotate(-2 * DEG_72_RADIANS, 0, 0, 1);\n        this.dr.translate(0, ind, 0);\n        this.dr.rotate(-5 * DEG_36_RADIANS, 0, 0, 1);\n        // Right\n        this.b.rotate(Math.PI, 0, 0, 1);\n        this.b.rotate(-2 * DEG_36_RADIANS, 0, 0, 1);\n        this.d.rotate(3 * DEG_36_RADIANS, 0, 0, 1);\n        this.d.translate(0, ind, 0);\n        this.d.rotate(5 * DEG_36_RADIANS, 0, 0, 1);\n        this.br.rotate(DEG_36_RADIANS, 0, 0, 1);\n        this.br.translate(0, ind, 0);\n        this.br.rotate(5 * DEG_36_RADIANS, 0, 0, 1);\n        this.BR.rotate(-DEG_36_RADIANS, 0, 0, 1);\n        this.BR.translate(0, ind, 0);\n        this.BR.rotate(-5 * DEG_36_RADIANS, 0, 0, 1);\n        this.BL.rotate(-3 * DEG_36_RADIANS, 0, 0, 1);\n        this.BL.translate(0, ind, 0);\n        this.BL.rotate(5 * DEG_36_RADIANS, 0, 0, 1);\n        this.bl.rotate(5 * DEG_36_RADIANS, 0, 0, 1);\n        this.bl.translate(0, ind, 0);\n        this.bl.rotate(-5 * DEG_36_RADIANS, 0, 0, 1);\n        let bottomTransforms = new Matrix4();\n        bottomTransforms.rotate(-DEG_72_RADIANS, 0, 0, 1);\n        bottomTransforms.translate(0, 2 * ind, 0);\n        bottomTransforms.rotate(2 * DEG_72_RADIANS, 0, 0, 1);\n        bottomTransforms.translate(0, -ind, 0);\n        [this.d, this.bl, this.BL, this.BR, this.br, this.b].forEach((face) => {\n            Matrix4.multiply(face.matrix, bottomTransforms, face.matrix);\n        });\n        this.faces = {\n            U: this.U,\n            F: this.F,\n            R: this.R,\n            dr: this.dr,\n            dl: this.dl,\n            L: this.L,\n            d: this.d,\n            br: this.br,\n            BR: this.BR,\n            BL: this.BL,\n            bl: this.bl,\n            b: this.b,\n        };\n        this.group = new Group([\n            this.U,\n            this.F,\n            this.L,\n            this.dr,\n            this.dl,\n            this.R,\n            this.d,\n            this.bl,\n            this.BL,\n            this.BR,\n            this.br,\n            this.b,\n        ]);\n        this.group.scale(0.33, 0.33, 0.33);\n        this.group.translate(-1.75 * sideLength, 0, 0);\n    }\n    setColors(colors) {\n        let { U, R, F, d, L, b, dr, dl, br, BR, BL, bl } = colors;\n        this.setFaceColors(this.U, U);\n        this.setFaceColors(this.R, R);\n        this.setFaceColors(this.F, F);\n        this.setFaceColors(this.d, d);\n        this.setFaceColors(this.L, L);\n        this.setFaceColors(this.b, b);\n        this.setFaceColors(this.dr, dr);\n        this.setFaceColors(this.dl, dl);\n        this.setFaceColors(this.BR, BR);\n        this.setFaceColors(this.BL, BL);\n        this.setFaceColors(this.bl, bl);\n        this.setFaceColors(this.br, br);\n    }\n    oldSetColors(colors) {\n        const n = this.layers;\n        const numStickers = 5 * n * n - 5 * n + 1;\n        let [U, R, F, dr, dl, L, d, br, BR, BL, bl, b] = chunkArray(colors, numStickers);\n        this.setFaceColors(this.U, U);\n        this.setFaceColors(this.R, R);\n        this.setFaceColors(this.F, F);\n        this.setFaceColors(this.d, d);\n        this.setFaceColors(this.L, L);\n        this.setFaceColors(this.b, b);\n        this.setFaceColors(this.dr, dr);\n        this.setFaceColors(this.dl, dl);\n        this.setFaceColors(this.br, br);\n        this.setFaceColors(this.BR, BR);\n        this.setFaceColors(this.BL, BL);\n        this.setFaceColors(this.bl, bl);\n    }\n    setFaceColors(faceStickers, colors) {\n        faceStickers.faces.forEach((f, i) => {\n            if (colors && colors[i]) {\n                f.color = colors[i];\n            }\n            else {\n                f.color = BLACK;\n            }\n        });\n    }\n}\n","import { WHITE, RED, GREEN, YELLOW, BLUE, ORANGE, LIGHT_GREEN, PINK, LIGHT_YELLOW, DARK_BLUE, GREY, PURPLE, BLACK, } from \"./colors\";\nimport { Group } from \"./../geometry/group\";\nimport { DividedPentagon } from \"../geometry/dividedPentagon\";\nimport { dodecahedronInRadius } from \"../math/utils\";\nconst OPTIMAL_LAYER_WIDTH = {\n    2: 0.3,\n    3: 0.17,\n    4: 0.121,\n};\nfunction getLayerWidth(length, layers) {\n    return OPTIMAL_LAYER_WIDTH[layers] || length / (layers * 1.9);\n}\nexport class Megaminx {\n    constructor(layers = 2) {\n        this.layers = layers;\n        const length = 0.75;\n        const megaminxRadius = dodecahedronInRadius(length);\n        const layerWidth = getLayerWidth(length, layers);\n        // Front\n        this.U = new DividedPentagon(WHITE, layers, length, layerWidth);\n        this.F = new DividedPentagon(RED, layers, length, layerWidth);\n        this.R = new DividedPentagon(BLUE, layers, length, layerWidth);\n        this.dr = new DividedPentagon(PINK, layers, length, layerWidth);\n        this.dl = new DividedPentagon(LIGHT_YELLOW, layers, length, layerWidth);\n        this.L = new DividedPentagon(GREEN, layers, length, layerWidth);\n        // Back\n        this.d = new DividedPentagon(GREY, layers, length, layerWidth);\n        this.br = new DividedPentagon(LIGHT_GREEN, layers, length, layerWidth);\n        this.BR = new DividedPentagon(YELLOW, layers, length, layerWidth);\n        this.BL = new DividedPentagon(PURPLE, layers, length, layerWidth);\n        this.bl = new DividedPentagon(DARK_BLUE, layers, length, layerWidth);\n        this.b = new DividedPentagon(ORANGE, layers, length, layerWidth);\n        this.F.translate(0, 0, megaminxRadius);\n        this.b.rotate(Math.PI, 0, 0, 1);\n        this.b.rotate(Math.PI, 0, 1, 0);\n        this.b.translate(0, 0, megaminxRadius);\n        this.U.rotate(Math.PI, 0, 0, 1);\n        this.U.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\n        this.U.translate(0, 0, megaminxRadius);\n        this.L.rotate((72 * Math.PI) / 180, 0, 0, 1);\n        this.L.rotate(Math.PI, 0, 0, 1);\n        this.L.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\n        this.L.translate(0, 0, megaminxRadius);\n        this.R.rotate((72 * Math.PI) / 180, 0, 0, 1);\n        this.R.rotate(Math.PI / 5, 0, 0, 1);\n        this.R.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\n        this.R.translate(0, 0, megaminxRadius);\n        this.dr.rotate((72 * Math.PI) / 180, 0, 0, 1);\n        this.dr.rotate(-Math.PI / 5, 0, 0, 1);\n        this.dr.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\n        this.dr.translate(0, 0, megaminxRadius);\n        this.dl.rotate((72 * Math.PI) / 180, 0, 0, 1);\n        this.dl.rotate((-3 * Math.PI) / 5, 0, 0, 1);\n        this.dl.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\n        this.dl.translate(0, 0, megaminxRadius);\n        this.BL.rotate(Math.PI / 5, 0, 0, 1);\n        this.BL.rotate((-116.57 * Math.PI) / 180, 1, 0, 0);\n        this.BL.translate(0, 0, megaminxRadius);\n        this.BR.rotate(-Math.PI / 5, 0, 0, 1);\n        this.BR.rotate((-116.57 * Math.PI) / 180, 1, 0, 0);\n        this.BR.translate(0, 0, megaminxRadius);\n        this.bl.rotate((3 * Math.PI) / 5, 0, 0, 1);\n        this.bl.rotate((-116.57 * Math.PI) / 180, 1, 0, 0);\n        this.bl.translate(0, 0, megaminxRadius);\n        this.d.rotate((5 * Math.PI) / 5, 0, 0, 1);\n        this.d.rotate((-116.57 * Math.PI) / 180, 1, 0, 0);\n        this.d.translate(0, 0, megaminxRadius);\n        this.br.rotate((7 * Math.PI) / 5, 0, 0, 1);\n        this.br.rotate((-116.57 * Math.PI) / 180, 1, 0, 0);\n        this.br.translate(0, 0, megaminxRadius);\n        this.stickers = [\n            this.U,\n            this.F,\n            this.R,\n            this.dr,\n            this.dl,\n            this.L,\n            this.d,\n            this.br,\n            this.BR,\n            this.BL,\n            this.bl,\n            this.b,\n        ];\n        this.faces = {\n            U: this.U,\n            F: this.F,\n            R: this.R,\n            dr: this.dr,\n            dl: this.dl,\n            L: this.L,\n            d: this.d,\n            br: this.br,\n            BR: this.BR,\n            BL: this.BL,\n            bl: this.bl,\n            b: this.b,\n        };\n        this.group = new Group(this.stickers);\n    }\n    setColors(colors) {\n        let { U, R, F, d, L, b, dr, dl, br, BR, BL, bl } = colors;\n        this.setFaceColors(this.U, U);\n        this.setFaceColors(this.R, R);\n        this.setFaceColors(this.F, F);\n        this.setFaceColors(this.d, d);\n        this.setFaceColors(this.L, L);\n        this.setFaceColors(this.b, b);\n        this.setFaceColors(this.dr, dr);\n        this.setFaceColors(this.dl, dl);\n        this.setFaceColors(this.BR, BR);\n        this.setFaceColors(this.BL, BL);\n        this.setFaceColors(this.bl, bl);\n        this.setFaceColors(this.br, br);\n    }\n    setFaceColors(faceStickers, colors) {\n        faceStickers.faces.forEach((f, i) => {\n            if (colors && colors[i]) {\n                f.color = colors[i];\n            }\n            else {\n                f.color = BLACK;\n            }\n        });\n    }\n}\n","import { Face } from \"./face\";\nimport { Geometry } from \"./geometry\";\nimport { Vector3 } from \"../math/vector\";\n/**\n * Makes a (size*size) grid of colored planes for the\n * rubiks cube stickers. Indexed from the top\n * left to bottom right. See Below\n *\n * ```\n *    0 1 2\n *    3 4 5\n *    6 7 8\n * ```\n *\n * @param length length of the grid\n * @param size number of elements to segment grid into\n * @param color\n */\nexport function makeGrid(length, size, color) {\n    const halfLength = length / 2;\n    const elementWidth = length / size;\n    const halfElementWidth = elementWidth / 2;\n    let stickers = [];\n    for (let i = 0; i < size; i++) {\n        let vOffset = -(-halfLength + halfElementWidth + elementWidth * i);\n        stickers = stickers.concat(makeRow(length, size, color, vOffset));\n    }\n    return stickers;\n}\n/**\n * Makes a row of planes for the rubiks cube stickers.\n * indexed from left to right\n *\n *     0 1 2\n *\n * @param length length of the row horizontally\n * @param size number of elements to segment row into\n * @param color color\n * @param vOffset vertical offset. places vertices of row vertically offset by this amount from x axis\n */\nexport function makeRow(length, size, color, vOffset = 0) {\n    const halfLength = length / 2;\n    const elementWidth = length / size;\n    const halfElementWidth = elementWidth / 2;\n    let stickers = [];\n    for (let i = 0; i < size; i++) {\n        let hOffset = -halfLength + halfElementWidth + elementWidth * i;\n        let vertices = [\n            Vector3.fromValues(-halfElementWidth + hOffset, halfElementWidth + vOffset, 0),\n            Vector3.fromValues(halfElementWidth + hOffset, halfElementWidth + vOffset, 0),\n            Vector3.fromValues(halfElementWidth + hOffset, -halfElementWidth + vOffset, 0),\n            Vector3.fromValues(-halfElementWidth + hOffset, -halfElementWidth + vOffset, 0),\n        ];\n        let faces = [new Face([0, 1, 2, 3], vertices, color)];\n        stickers.push(new Geometry(vertices, faces));\n    }\n    return stickers;\n}\n","import { YELLOW, RED, BLUE, GREEN, ORANGE, BLACK } from \"./../colors\";\nimport { Group } from \"./../../geometry/group\";\nimport { makeGrid, makeRow } from \"./../../geometry/grid\";\nimport { calculateCentroid } from \"../../math/utils\";\nimport { Vector3 } from \"../../math/vector\";\nexport class RubiksCubeTopLayer {\n    constructor(size, rotationAngle = Math.PI / 4) {\n        this.size = size;\n        this.cubeWidth = 1.45;\n        this.halfCubeWidth = this.cubeWidth / 2;\n        this.stickerWidth = this.cubeWidth / size;\n        this.halfStickerWidth = this.stickerWidth / 2;\n        this.cubeWidth = this.stickerWidth * size;\n        this.U = new Group(makeGrid(this.cubeWidth, this.size, YELLOW));\n        this.R = new Group(makeRow(this.cubeWidth, this.size, RED));\n        this.F = new Group(makeRow(this.cubeWidth, this.size, BLUE));\n        this.B = new Group(makeRow(this.cubeWidth, this.size, GREEN));\n        this.L = new Group(makeRow(this.cubeWidth, this.size, ORANGE));\n        const borderOffset = this.halfCubeWidth + this.halfStickerWidth;\n        this.B.translate(0, borderOffset, 0);\n        this.B.rotate(Math.PI, 0, 0, 1);\n        this.F.translate(0, -borderOffset, 0);\n        this.R.translate(borderOffset, 0, 0);\n        this.R.rotate(Math.PI / 2, 0, 0, 1);\n        this.L.translate(-borderOffset, 0, 0);\n        this.L.rotate(-Math.PI / 2, 0, 0, 1);\n        this.rotateBorder(this.F.objects, rotationAngle);\n        this.rotateBorder(this.R.objects, rotationAngle);\n        this.rotateBorder(this.B.objects, rotationAngle);\n        this.rotateBorder(this.L.objects, rotationAngle);\n        this.stickers = [this.U, this.R, this.F, this.B, this.L];\n        this.group = new Group(this.stickers);\n        this.faces = {\n            U: this.U,\n            R: this.R,\n            F: this.F,\n            L: this.L,\n            B: this.B,\n        };\n    }\n    setFaceColors(faceStickers, colors) {\n        faceStickers.objects.forEach((g, i) => {\n            if (colors && colors[i]) {\n                g.faces[0].color = colors[i];\n            }\n            else {\n                g.faces[0].color = BLACK;\n            }\n        });\n    }\n    setColors(colors) {\n        let { U, R, F, L, B } = colors;\n        this.setFaceColors(this.U, U);\n        this.setFaceColors(this.R, R);\n        this.setFaceColors(this.F, F);\n        this.setFaceColors(this.L, L);\n        this.setFaceColors(this.B, B);\n    }\n    /**\n     * given a row of stickers centered at 0,0,0\n     * rotates each vertex of each sticker around\n     * the top of the sticker.\n     */\n    rotateBorder(stickers, radians) {\n        stickers.forEach((sticker) => {\n            sticker.vertices = sticker.vertices.map((vertex) => {\n                return vertex.rotateX(Vector3.fromValues(0, this.halfStickerWidth, 0), radians);\n            });\n            sticker.centroid = calculateCentroid(sticker.vertices);\n        });\n    }\n}\n","import { YELLOW, RED, BLUE, WHITE, ORANGE, GREEN, BLACK } from \"./../colors\";\nimport { Group } from \"./../../geometry/group\";\nimport { makeGrid } from \"../../geometry/grid\";\nexport class RubiksCubeNet {\n    constructor(size) {\n        const cubeWidth = 1;\n        this.size = size;\n        const U = makeGrid(cubeWidth, size, YELLOW);\n        const R = makeGrid(cubeWidth, size, RED);\n        const F = makeGrid(cubeWidth, size, BLUE);\n        const D = makeGrid(cubeWidth, size, WHITE);\n        const L = makeGrid(cubeWidth, size, ORANGE);\n        const B = makeGrid(cubeWidth, size, GREEN);\n        this.U = new Group(U);\n        this.U.translate(0, cubeWidth, 0);\n        this.R = new Group(R);\n        this.R.translate(cubeWidth, 0, 0);\n        this.F = new Group(F);\n        this.D = new Group(D);\n        this.D.translate(0, -cubeWidth, 0);\n        this.L = new Group(L);\n        this.L.translate(-cubeWidth, 0, 0);\n        this.B = new Group(B);\n        this.B.translate(2 * cubeWidth, 0, 0);\n        this.stickers = [this.U, this.R, this.F, this.D, this.L, this.B];\n        this.faces = {\n            U: this.U,\n            R: this.R,\n            F: this.F,\n            D: this.D,\n            L: this.L,\n            B: this.B,\n        };\n        this.group = new Group(this.stickers);\n        this.group.translate(-cubeWidth / 4, 0, 0);\n        this.group.scale(0.5, 0.5, 0.5);\n    }\n    setFaceColors(faceStickers, colors) {\n        faceStickers.objects.forEach((g, i) => {\n            if (colors && colors[i]) {\n                g.faces[0].color = colors[i];\n            }\n            else {\n                g.faces[0].color = BLACK;\n            }\n        });\n    }\n    setColors(colors) {\n        let { U, R, F, D, L, B } = colors;\n        this.setFaceColors(this.U, U);\n        this.setFaceColors(this.R, R);\n        this.setFaceColors(this.F, F);\n        this.setFaceColors(this.D, D);\n        this.setFaceColors(this.L, L);\n        this.setFaceColors(this.B, B);\n    }\n}\n","import { YELLOW, RED, BLUE, WHITE, ORANGE, GREEN, BLACK } from \"./../colors\";\nimport { Group } from \"../../geometry/group\";\nimport { makeGrid } from \"../../geometry/grid\";\nexport class RubiksCube {\n    constructor(size) {\n        this.size = size;\n        const cubeWidth = 1.25;\n        const halfWidth = cubeWidth / 2;\n        this.U = new Group(makeGrid(cubeWidth, size, YELLOW));\n        this.R = new Group(makeGrid(cubeWidth, size, RED));\n        this.F = new Group(makeGrid(cubeWidth, size, BLUE));\n        this.D = new Group(makeGrid(cubeWidth, size, WHITE));\n        this.L = new Group(makeGrid(cubeWidth, size, ORANGE));\n        this.B = new Group(makeGrid(cubeWidth, size, GREEN));\n        this.U.rotate(-Math.PI / 2, 0, 1, 0);\n        this.U.rotate(-Math.PI / 2, 1, 0, 0);\n        this.U.translate(0, 0, halfWidth);\n        this.R.translate(0, 0, halfWidth);\n        this.F.rotate(-Math.PI / 2, 0, 1, 0);\n        this.F.translate(0, 0, halfWidth);\n        this.D.rotate(-Math.PI / 2, 0, 1, 0);\n        this.D.rotate(Math.PI / 2, 1, 0, 0);\n        this.D.translate(0, 0, halfWidth);\n        this.L.rotate(-Math.PI, 0, 1, 0);\n        this.L.translate(0, 0, halfWidth);\n        this.B.rotate(Math.PI / 2, 0, 1, 0);\n        this.B.translate(0, 0, halfWidth);\n        this.stickers = [this.U, this.R, this.F, this.D, this.L, this.B];\n        this.faces = {\n            U: this.U,\n            R: this.R,\n            F: this.F,\n            D: this.D,\n            L: this.L,\n            B: this.B,\n        };\n        this.group = new Group(this.stickers);\n    }\n    setFaceColors(faceStickers, colors) {\n        faceStickers.objects.forEach((g, i) => {\n            if (colors && colors[i]) {\n                g.faces[0].color = colors[i];\n            }\n            else {\n                g.faces[0].color = BLACK;\n            }\n        });\n    }\n    setColors(colors) {\n        let { U, R, F, D, L, B } = colors;\n        this.setFaceColors(this.U, U);\n        this.setFaceColors(this.R, R);\n        this.setFaceColors(this.F, F);\n        this.setFaceColors(this.D, D);\n        this.setFaceColors(this.L, L);\n        this.setFaceColors(this.B, B);\n    }\n}\n","import { calculateCentroid } from \"../math/utils\";\nimport { Object3D } from \"./object3d\";\nexport class Arrow extends Object3D {\n    constructor(p1, p2) {\n        super();\n        this.p1 = p1;\n        this.p2 = p2;\n        this.centroid = calculateCentroid([p1, p2]);\n    }\n}\n","export function applyTransformations(vertex, transforms) {\n    let v = vertex.clone();\n    transforms.forEach((m, i) => {\n        v.transformMat4(m);\n    });\n    return v;\n}\n","import { Arrow } from \"./../geometry/arrow\";\nimport { Geometry } from \"../geometry/geometry\";\nimport { Group } from \"../geometry/group\";\nimport { applyTransformations } from \"./utils\";\n/**\n * Renderer class to take scene geometry and render it to 2d\n * polygon coordinates.\n *\n * 1. Takes a scene and camera\n * 2. converts the scene 3d geometry to 2d screen geometry based on the camera\n * 3. tries to render each face in order from furthest from camera to closest\n * 4. finally, draws the lines (arrows) over top of everything\n *\n * Implementers need just implement\n *   - drawPolygon - a method that draws polygons on some 2d graphics area\n *   - drawArrow - a method that draws an arrow\n *   - onBeforeRender - do any prep work necessary before rendering a frame\n *   - onComplete - handle any final logic\n */\nexport class PolygonRenderer {\n    constructor() {\n        this.polygons = [];\n        this.arrows = [];\n    }\n    render(scene, camera) {\n        this.polygons = [];\n        scene.objects.forEach((object) => {\n            this.renderObject3D(object, camera, []);\n        });\n        this.onBeforeRender();\n        this.renderPolygons();\n        this.renderArrows();\n        this.onComplete();\n    }\n    renderPolygons() {\n        this.polygons.sort((a, b) => {\n            return a.centroid.z - b.centroid.z;\n        });\n        this.polygons.forEach((p) => this.drawPolygon(p));\n    }\n    renderArrows() {\n        this.arrows.forEach(({ p1, p2, uid }) => {\n            this.drawArrow(p1, p2, uid);\n        });\n    }\n    renderObject3D(object, camera, transformations) {\n        if (object instanceof Geometry) {\n            this.renderGeometry(object, camera, transformations);\n        }\n        else if (object instanceof Arrow) {\n            this.renderArrow(object, camera, transformations);\n        }\n        else if (object instanceof Group) {\n            let group = object;\n            // let sorted = this.sortObjects(group.objects, camera, [\n            //   group.matrix,\n            //   ...transformations,\n            // ]);\n            group.objects.forEach((object) => {\n                this.renderObject3D(object, camera, [group.matrix, ...transformations]);\n            });\n        }\n    }\n    renderGeometry(object, camera, transformations) {\n        // this.sortFaces(object.faces, object, transformations);\n        object.faces.forEach((face) => {\n            let points = [];\n            face.indices\n                .map((index) => object.vertices[index])\n                .forEach((vertex) => {\n                let objectToScreen = [\n                    object.matrix,\n                    ...transformations,\n                    camera.matrix,\n                ];\n                let screenPoint = applyTransformations(vertex, objectToScreen);\n                // Need to flip y to look correct on svg viewbox\n                screenPoint.multiply(1, -1, 1);\n                points.push(screenPoint);\n            });\n            this.addPolygon(points, face, object, transformations);\n        });\n    }\n    renderArrow(object, camera, transformations) {\n        let objectToScreen = [object.matrix, ...transformations, camera.matrix];\n        let p1Screen = applyTransformations(object.p1, objectToScreen);\n        let p2Screen = applyTransformations(object.p2, objectToScreen);\n        this.arrows.push({ p1: p1Screen, p2: p2Screen, uid: object.uid });\n    }\n    addPolygon(points, face, object, transformations) {\n        this.polygons.push({\n            points,\n            face,\n            object,\n            centroid: applyTransformations(face.centroid, [\n                object.matrix,\n                ...transformations,\n            ]),\n        });\n    }\n    sortObjects(objects, camera, transformations) {\n        let sorted = [...objects];\n        sorted.sort((a, b) => {\n            let aToWorld = [a.matrix, ...transformations];\n            let bToWorld = [b.matrix, ...transformations];\n            let aCentroid = applyTransformations(a.centroid, aToWorld);\n            let bCentroid = applyTransformations(b.centroid, bToWorld);\n            // TODO actually use camera, currently only sorting by Z\n            return aCentroid.z - bCentroid.z;\n        });\n        return sorted;\n    }\n}\n","import { BLACK } from \"../puzzles/colors\";\nexport function createSVGElement(width, height, minx, miny, svgWidth, svgHeight) {\n    const svgElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    svgElement.setAttributeNS(null, \"width\", width.toString());\n    svgElement.setAttributeNS(null, \"height\", height.toString());\n    svgElement.setAttributeNS(null, \"viewBox\", `${minx} ${miny} ${svgWidth} ${svgHeight}`);\n    svgElement.setAttributeNS(null, \"id\", \"sr-visualizer\");\n    return svgElement;\n}\nexport function createPolygonElement(points, color, strokeWidth) {\n    const polygon = document.createElementNS(\"http://www.w3.org/2000/svg\", \"polygon\");\n    updatePolygonElement(polygon, points, color, strokeWidth);\n    return polygon;\n}\nexport function createArrowLineElement(start, end, color, strokeWidth) {\n    const line = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n    let strokeColor = color ? color.value : BLACK.value;\n    line.setAttributeNS(null, \"x1\", start.x.toString());\n    line.setAttributeNS(null, \"y1\", (-start.y).toString());\n    line.setAttributeNS(null, \"x2\", end.x.toString());\n    line.setAttributeNS(null, \"y2\", (-end.y).toString());\n    line.setAttributeNS(null, \"stroke\", strokeColor);\n    line.setAttributeNS(null, \"marker-end\", \"url(#arrowhead)\");\n    if (strokeWidth) {\n        line.setAttributeNS(null, \"stroke-width\", strokeWidth);\n    }\n    return line;\n}\nexport function updatePolygonElement(polygon, points, color, strokeWidth) {\n    const pointsAttribute = makePointsAttributeValue(points);\n    const colorValue = color ? color.value : \"black\";\n    const strokeValue = (color && color.stroke) || \"#000000\";\n    polygon.setAttributeNS(null, \"points\", pointsAttribute);\n    polygon.setAttributeNS(null, \"fill\", colorValue);\n    if (strokeWidth) {\n        polygon.setAttributeNS(null, \"stroke\", strokeValue);\n        polygon.setAttributeNS(null, \"stroke-width\", strokeWidth);\n    }\n    polygon.setAttributeNS(null, \"stroke-linejoin\", \"round\");\n}\nexport function clearSVG(svg) {\n    while (svg.hasChildNodes()) {\n        svg.removeChild(svg.lastChild);\n    }\n}\nexport function createMarkers(color) {\n    const defs = document.createElementNS(\"http://www.w3.org/2000/svg\", \"defs\");\n    const arrowHeadMarker = document.createElementNS(\"http://www.w3.org/2000/svg\", \"marker\");\n    arrowHeadMarker.setAttributeNS(null, \"id\", \"arrowhead\");\n    arrowHeadMarker.setAttributeNS(null, \"markerWidth\", \"4\");\n    arrowHeadMarker.setAttributeNS(null, \"markerHeight\", \"3.5\");\n    arrowHeadMarker.setAttributeNS(null, \"refX\", \"3\");\n    arrowHeadMarker.setAttributeNS(null, \"refY\", \"1.75\");\n    arrowHeadMarker.setAttributeNS(null, \"orient\", \"auto\");\n    const arrowHeadPolygon = document.createElementNS(\"http://www.w3.org/2000/svg\", \"polygon\");\n    arrowHeadPolygon.setAttributeNS(null, \"points\", \"0 0, 4 1.75, 0 3.5\");\n    arrowHeadPolygon.setAttributeNS(null, \"fill\", color.value);\n    defs.appendChild(arrowHeadMarker);\n    arrowHeadMarker.appendChild(arrowHeadPolygon);\n    return defs;\n}\nfunction makePointsAttributeValue(points) {\n    return points.reduce((pointString, point) => {\n        return `${pointString ? pointString + \" \" : \"\"}${point.x}, ${point.y}`;\n    }, \"\");\n}\n","import { BLACK } from \"./../puzzles/colors\";\nimport { PolygonRenderer } from \"./polygonRenderer\";\nimport { createSVGElement, createPolygonElement, updatePolygonElement, createArrowLineElement, createMarkers, } from \"../svg/svg\";\n/**\n * Renderer to draw puzzles using html svg elements\n */\nexport class HtmlSvgRenderer extends PolygonRenderer {\n    /**\n     * Creates an SVG renderer. This will create it's own html `<svg>` element. it's\n     * the user's job to add this element to the page.\n     *\n     * @example\n     * ```\n     * const renderer = new HtmlSvgRenderer(width, height, minx, miny, svgWidth, svgHeight)\n     * document.getElementById('my-element').appendChild(renderer.domElement);\n     * ```\n     *\n     * @param width svg element width in pixels\n     * @param height svg element height in pixels\n     * @param minx min x for the svg element viewbox\n     * @param miny min x for the svg element viewbox\n     * @param svgWidth svg viewbox width\n     * @param svgHeight svg viewbox height\n     */\n    constructor(width, height, minx, miny, svgWidth, svgHeight, arrowColor) {\n        super();\n        this.strokeWidth = \"0.035\";\n        this.arrowStrokeWidth = \"0.03\";\n        this.polygons = [];\n        this.lines = [];\n        this.uidToPolygon = {};\n        this.uidToLine = {};\n        this.arrowColor = arrowColor || BLACK;\n        this.domElement = document.createElement(\"div\");\n        this.domElement.className = \"svg-renderer\";\n        this.svgElement = createSVGElement(width, height, minx, miny, svgWidth, svgHeight);\n        const markers = createMarkers(this.arrowColor);\n        this.svgElement.appendChild(markers);\n        this.domElement.appendChild(this.svgElement);\n    }\n    onBeforeRender() { }\n    drawPolygon({ points, face, object }) {\n        if (!this.uidToPolygon[face.uid]) {\n            // Create new polygon for a face that hasn't been rendered\n            this.uidToPolygon[face.uid] = createPolygonElement(points, face.color || object.color, this.strokeWidth);\n        }\n        else {\n            // Just update existing polygon element\n            const polygon = this.uidToPolygon[face.uid];\n            updatePolygonElement(polygon, points, face.color || object.color, this.strokeWidth);\n        }\n        this.svgElement.appendChild(this.uidToPolygon[face.uid]);\n    }\n    drawArrow(p1Screen, p2Screen, uid) {\n        let arrow;\n        if (!this.uidToLine[uid]) {\n            arrow = createArrowLineElement(p1Screen, p2Screen, this.arrowColor, this.arrowStrokeWidth);\n            this.uidToLine[uid] = arrow;\n        }\n        else {\n            arrow = this.uidToLine[uid];\n            arrow.setAttributeNS(null, \"x1\", p1Screen[0].toString());\n            arrow.setAttributeNS(null, \"y1\", (-p1Screen[1]).toString());\n            arrow.setAttributeNS(null, \"x2\", p2Screen[0].toString());\n            arrow.setAttributeNS(null, \"y2\", (-p2Screen[1]).toString());\n        }\n        this.svgElement.appendChild(this.uidToLine[uid]);\n    }\n    onComplete() { }\n}\n","import { BLACK } from \"../puzzles/colors\";\nimport { PolygonRenderer } from \"./polygonRenderer\";\nexport class HtmlCanvasRenderer extends PolygonRenderer {\n    constructor(width, height, lineWidth = 5, arrowColor = BLACK) {\n        super();\n        this.width = width;\n        this.height = height;\n        this.lineWidth = lineWidth;\n        this.arrowColor = arrowColor;\n        this.domElement = document.createElement(\"div\");\n        this.domElement.className = \"canvas-renderer\";\n        this.canvasElement = document.createElement(\"canvas\");\n        this.domElement.appendChild(this.canvasElement);\n        this.canvasElement.width = width;\n        this.canvasElement.height = height;\n        this.ctx = this.canvasElement.getContext(\"2d\");\n    }\n    /**\n     * Visualizer point values will be in range (-.9, .9)\n     * Convert these values to canvas points (0, imgSize)\n     * using linear interpolation\n     *\n     * really the camera matrix should be set up properly\n     * so we don't have to do this...\n     */\n    convertRange(n, range) {\n        return ((n - -0.9) / (0.9 - -0.9)) * range;\n    }\n    onBeforeRender() {\n        this.ctx.clearRect(0, 0, this.width, this.height);\n    }\n    drawPolygon(polygon) {\n        var _a, _b;\n        this.ctx.lineWidth = this.lineWidth;\n        this.ctx.lineJoin = \"round\";\n        this.ctx.fillStyle = ((_b = (_a = polygon === null || polygon === void 0 ? void 0 : polygon.face) === null || _a === void 0 ? void 0 : _a.color) === null || _b === void 0 ? void 0 : _b.value) || \"#000000\";\n        this.ctx.strokeStyle = \"#000000\";\n        this.ctx.moveTo(this.convertRange(polygon.points[0].x, this.width), this.convertRange(polygon.points[0].y, this.height));\n        this.ctx.beginPath();\n        for (let i = 0; i <= polygon.points.length; i++) {\n            let point = polygon.points[(i + 1) % polygon.points.length];\n            this.ctx.lineTo(this.convertRange(point.x, this.width), this.convertRange(point.y, this.height));\n        }\n        this.ctx.closePath();\n        this.ctx.fill();\n        this.ctx.stroke();\n    }\n    drawArrow(p1, p2, uid) {\n        const toX = this.convertRange(p2.x, this.width);\n        const toY = this.convertRange(-p2.y, this.height);\n        const fromX = this.convertRange(p1.x, this.width);\n        const fromY = this.convertRange(-p1.y, this.height);\n        const headlen = 20; // length of head in pixels\n        const dx = toX - fromX;\n        const dy = toY - fromY;\n        const angle = Math.atan2(dy, dx);\n        this.ctx.strokeStyle = this.arrowColor.value;\n        this.ctx.beginPath();\n        this.ctx.moveTo(fromX, fromY);\n        this.ctx.lineTo(toX, toY);\n        this.ctx.lineTo(toX - headlen * Math.cos(angle - Math.PI / 6), toY - headlen * Math.sin(angle - Math.PI / 6));\n        this.ctx.moveTo(toX, toY);\n        this.ctx.lineTo(toX - headlen * Math.cos(angle + Math.PI / 6), toY - headlen * Math.sin(angle + Math.PI / 6));\n        this.ctx.stroke();\n    }\n    setLineWidth(lineWidth) {\n        this.lineWidth = lineWidth;\n    }\n    onComplete() { }\n}\n","import { Matrix4 } from \"../math/matrix\";\nexport class Camera {\n    constructor() {\n        this.matrix = Matrix4.perspective(Math.PI / 2, 1, 0.1, 1000);\n        this.matrix.translate(0, 0, -5);\n        this.matrix.scale(4, 4, 1);\n    }\n}\n","export class Scene {\n    constructor() {\n        this.objects = [];\n    }\n    add(geometry) {\n        this.objects.push(geometry);\n    }\n    clear() {\n        this.objects = [];\n    }\n}\n","export var VisualizerType;\n(function (VisualizerType) {\n    VisualizerType[\"CUBE\"] = \"cube\";\n    VisualizerType[\"CUBE_NET\"] = \"cube-net\";\n    VisualizerType[\"CUBE_TOP\"] = \"cube-top\";\n    VisualizerType[\"MEGAMINX\"] = \"megaminx\";\n    VisualizerType[\"MEGAMINX_NET\"] = \"megaminx-net\";\n    VisualizerType[\"MEGAMINX_TOP\"] = \"megaminx-top\";\n    VisualizerType[\"PYRAMINX\"] = \"pyraminx\";\n    VisualizerType[\"PYRAMINX_NET\"] = \"pyraminx-net\";\n    VisualizerType[\"SKEWB\"] = \"skewb\";\n    VisualizerType[\"SKEWB_NET\"] = \"skewb-net\";\n    VisualizerType[\"SQUARE1\"] = \"square1\";\n    VisualizerType[\"SQUARE1_NET\"] = \"square1-net\";\n})(VisualizerType || (VisualizerType = {}));\n","import { VisualizerType } from \"./enum\";\nimport { RED, YELLOW, BLUE, WHITE, ORANGE, GREEN, PINK, LIGHT_YELLOW, GREY, LIGHT_GREEN, PURPLE, DARK_BLUE, } from \"./../puzzles/colors\";\nimport { DEFAULT_SQ1_SCHEME } from \"../puzzles/square1/constants\";\nexport const defaultCubeOptions = {\n    size: 3,\n    scheme: {\n        U: YELLOW,\n        R: RED,\n        F: BLUE,\n        D: WHITE,\n        L: ORANGE,\n        B: GREEN,\n    },\n    rotations: [\n        {\n            x: 0,\n            y: 45,\n            z: 0,\n        },\n        {\n            x: 34,\n            y: 0,\n            z: 0,\n        },\n    ],\n};\nexport const defaultMegaminxOptions = {\n    size: 2,\n    scheme: {\n        U: WHITE,\n        F: RED,\n        R: BLUE,\n        dr: PINK,\n        dl: LIGHT_YELLOW,\n        L: GREEN,\n        d: GREY,\n        br: LIGHT_GREEN,\n        BR: YELLOW,\n        BL: PURPLE,\n        bl: DARK_BLUE,\n        b: ORANGE,\n    },\n};\nexport const defaultPyraminxOptions = {\n    size: 3,\n    scheme: {\n        left: BLUE,\n        right: GREEN,\n        top: YELLOW,\n        back: RED,\n    },\n    rotations: [\n        {\n            x: 0,\n            y: 0,\n            z: 60,\n        },\n        {\n            x: -60,\n            y: 0,\n            z: 0,\n        },\n    ],\n};\nexport const defaultSkewbOptions = {\n    scheme: {\n        top: YELLOW,\n        front: BLUE,\n        right: RED,\n        back: GREEN,\n        left: ORANGE,\n        bottom: WHITE,\n    },\n    rotations: [\n        {\n            x: 0,\n            y: 45,\n            z: 0,\n        },\n        {\n            x: 34,\n            y: 0,\n            z: 0,\n        },\n    ],\n};\nexport const defaultSquare1Options = {\n    scheme: DEFAULT_SQ1_SCHEME,\n    rotations: [\n        {\n            x: 0,\n            y: 0,\n            z: -34,\n        },\n        {\n            x: -56,\n            y: 0,\n            z: 0,\n        },\n    ],\n};\nexport function getDefaultOptions(type) {\n    switch (type) {\n        case VisualizerType.CUBE:\n            return defaultCubeOptions;\n        case VisualizerType.CUBE_NET:\n            return Object.assign(Object.assign({}, defaultCubeOptions), { rotations: null });\n        case VisualizerType.CUBE_TOP:\n            return Object.assign(Object.assign({}, defaultCubeOptions), { rotations: null });\n        case VisualizerType.MEGAMINX:\n        case VisualizerType.MEGAMINX_NET:\n        case VisualizerType.MEGAMINX_TOP:\n            return defaultMegaminxOptions;\n        case VisualizerType.PYRAMINX:\n            return defaultPyraminxOptions;\n        case VisualizerType.PYRAMINX_NET:\n            return Object.assign(Object.assign({}, defaultPyraminxOptions), { rotations: null });\n        case VisualizerType.SKEWB:\n            return defaultSkewbOptions;\n        case VisualizerType.SKEWB_NET:\n            return Object.assign(Object.assign({}, defaultSkewbOptions), { rotations: null });\n        case VisualizerType.SQUARE1:\n            return defaultSquare1Options;\n        case VisualizerType.SQUARE1_NET:\n            return Object.assign(Object.assign({}, defaultSquare1Options), { rotations: null });\n        default:\n            throw new Error(`Could not get default options for puzzle ${type}`);\n    }\n}\n","import { BLACK } from \"../puzzles/colors\";\nexport function validatePuzzleOptions(options) {\n    if (options.alg && typeof options.alg !== \"string\") {\n        console.warn(`Inavlid alg ${options.alg}. alg must be a string`);\n        options.alg = \"\";\n    }\n    if (options.case && typeof options.case !== \"string\") {\n        console.warn(`Inavlid case ${options.case}. case must be a string`);\n        options.case = \"\";\n    }\n    if (options.scheme) {\n        if (typeof options.scheme !== \"object\" || Array.isArray(options.scheme)) {\n            console.warn(`Invalid scheme ${options.scheme}. scheme must be an object`);\n            options.scheme = {};\n        }\n        else {\n            Object.keys(options.scheme).forEach((face) => {\n                const faceColor = options.scheme[face];\n                if (faceColor == null ||\n                    typeof faceColor !== \"object\" ||\n                    !faceColor.value) {\n                    console.warn(`Invalid scheme color ${faceColor}. must be an type IColor`);\n                    options.scheme[face] = BLACK;\n                }\n            });\n        }\n    }\n    if (options.mask) {\n        if (typeof options.mask !== \"object\" || Array.isArray(options.mask)) {\n            console.warn(`Invalid mask ${options.mask}. scheme must be an object`);\n            options.mask = {};\n        }\n        else {\n            Object.keys(options.mask).forEach((face) => {\n                const maskValues = options.mask[face];\n                if (!Array.isArray(maskValues)) {\n                    console.warn(`Invalid mask ${maskValues}. must be an array`);\n                    options.mask[face] = [];\n                }\n                else {\n                    for (let i = 0; i < maskValues.length; i++) {\n                        if (!Number.isInteger(maskValues[i])) {\n                            console.warn(`Invalid mask value ${maskValues[i]}. must be a number`);\n                            options.mask[face] = [];\n                            break;\n                        }\n                    }\n                }\n            });\n        }\n    }\n    if (options.stickerColors) {\n        if (typeof options.stickerColors !== \"object\" ||\n            Array.isArray(options.stickerColors)) {\n            console.warn(`Invalid stickerColors ${options.stickerColors}. stickerColors must be an object`);\n            options.stickerColors = {};\n        }\n        else {\n            Object.keys(options.stickerColors).forEach((face) => {\n                const faceColors = options.stickerColors[face];\n                if (!Array.isArray(faceColors)) {\n                    console.warn(`Invalid colors ${faceColors}. must be an array`);\n                    options.stickerColors[face] = [];\n                }\n                else {\n                    for (let i = 0; i < faceColors.length; i++) {\n                        if (!validColor(faceColors[i])) {\n                            options.stickerColors[face] = [];\n                            break;\n                        }\n                    }\n                }\n            });\n        }\n    }\n    if (options.rotations) {\n        if (!Array.isArray(options.rotations)) {\n            console.warn(`invalid rotations ${options.rotations}, must be an array`);\n            options.rotations = [];\n        }\n        else {\n            for (let i = 0; i < options.rotations.length; i++) {\n                if (!validRotation(options.rotations[i])) {\n                    options.rotations = [];\n                    break;\n                }\n            }\n        }\n    }\n    if (options.scale && !Number.isFinite(options.scale)) {\n        console.warn(`invalid scale ${options.scale}, must be a finite number`);\n        options.scale = 1;\n    }\n    if (options.translation && !validTranslation(options.translation)) {\n        options.translation = { x: 0, y: 0, z: 0 };\n    }\n    if (options.arrows) {\n        if (!Array.isArray(options.arrows)) {\n            console.warn(`invalid arrows, must be an array`);\n            options.arrows = [];\n        }\n        else {\n            for (let i = 0; i < options.arrows.length; i++) {\n                if (!validArrow(options.arrows[i])) {\n                    options.arrows = [];\n                    break;\n                }\n            }\n        }\n    }\n}\nexport function validColor(c) {\n    if (typeof c !== \"object\") {\n        console.warn(`invalid color ${c}, must be type object`);\n        return false;\n    }\n    if (!c.value || typeof c.value !== \"string\") {\n        console.warn(`invalid color value ${c.value}, must be type string`);\n        return false;\n    }\n    if (c.stroke && typeof c.stroke !== \"string\") {\n        console.warn(`invalid color stroke ${c.stroke}, must be type string`);\n        return false;\n    }\n    return true;\n}\nfunction validRotation(r) {\n    if (!r || typeof r !== \"object\") {\n        console.warn(`invalid rotation ${r}, must be an object`);\n        return false;\n    }\n    if (r.x && !Number.isFinite(r.x)) {\n        console.warn(`invalid x rotation ${r.x}, must be a number`);\n        return false;\n    }\n    if (r.y && !Number.isFinite(r.y)) {\n        console.warn(`invalid y rotation ${r.y}, must be a number`);\n        return false;\n    }\n    if (r.z && !Number.isFinite(r.z)) {\n        console.warn(`invalid z rotation ${r.z}, must be a number`);\n        return false;\n    }\n    return true;\n}\nfunction validTranslation(r) {\n    if (typeof r !== \"object\" || Array.isArray(r)) {\n        console.warn(`invalid translation ${r}, must be an object`);\n        return false;\n    }\n    if (r.x && !Number.isFinite(r.x)) {\n        console.warn(`invalid x translation ${r.x}, must be a number`);\n        return false;\n    }\n    if (r.y && !Number.isFinite(r.y)) {\n        console.warn(`invalid y translation ${r.y}, must be a number`);\n        return false;\n    }\n    if (r.z && !Number.isFinite(r.z)) {\n        console.warn(`invalid z translation ${r.z}, must be a number`);\n        return false;\n    }\n    return true;\n}\nfunction validArrow(a) {\n    if (typeof a !== \"object\") {\n        console.warn(`invalid arrow ${a}, must be an object`);\n        return false;\n    }\n    if (typeof a.end !== \"object\" || typeof a.start !== \"object\") {\n        console.warn(`invalid arrow ${a}, must have start and end`);\n        return false;\n    }\n    if (typeof a.start.face !== \"string\" || !Number.isInteger(a.start.sticker)) {\n        console.warn(`invalid arrow start ${a.start}`);\n        return false;\n    }\n    if (typeof a.end.face !== \"string\" || !Number.isInteger(a.end.sticker)) {\n        console.warn(`invalid arrow end ${a.end}`);\n        return false;\n    }\n    return true;\n}\n","import { WHITE, RED, BLUE, GREEN, BLACK, YELLOW, PURPLE } from \"./colors\";\nimport { DividedPentagon } from \"./../geometry/dividedPentagon\";\nimport { degreesToRadians, dodecahedronInRadius } from \"../math/utils\";\nimport { Group } from \"../geometry/group\";\nconst OPTIMAL_LAYER_WIDTH = {\n    2: 0.3,\n    3: 0.17,\n    4: 0.121,\n};\nfunction getLayerWidth(length, layers) {\n    return OPTIMAL_LAYER_WIDTH[layers] || length / (layers * 1.9);\n}\nexport class MegaminxTop {\n    constructor() {\n        this.createFaces();\n        this.removeHiddenStickers();\n    }\n    createFaces() {\n        const layers = 2;\n        const length = 0.75;\n        const layerWidth = getLayerWidth(length, layers);\n        const megaminxRadius = dodecahedronInRadius(length);\n        this.U = new DividedPentagon(WHITE, layers, length, layerWidth);\n        this.F = new DividedPentagon(RED, layers, length, layerWidth);\n        this.R = new DividedPentagon(BLUE, layers, length, layerWidth);\n        this.L = new DividedPentagon(GREEN, layers, length, layerWidth);\n        this.BR = new DividedPentagon(YELLOW, layers, length, layerWidth);\n        this.BL = new DividedPentagon(PURPLE, layers, length, layerWidth);\n        this.F.translate(0, 0, megaminxRadius);\n        this.U.rotate(Math.PI, 0, 0, 1);\n        this.U.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\n        this.U.translate(0, 0, megaminxRadius);\n        this.L.rotate((72 * Math.PI) / 180, 0, 0, 1);\n        this.L.rotate(Math.PI, 0, 0, 1);\n        this.L.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\n        this.L.translate(0, 0, megaminxRadius);\n        this.R.rotate((72 * Math.PI) / 180, 0, 0, 1);\n        this.R.rotate(Math.PI / 5, 0, 0, 1);\n        this.R.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\n        this.R.translate(0, 0, megaminxRadius);\n        this.BL.rotate(Math.PI / 5, 0, 0, 1);\n        this.BL.rotate((-116.57 * Math.PI) / 180, 1, 0, 0);\n        this.BL.translate(0, 0, megaminxRadius);\n        this.BR.rotate(-Math.PI / 5, 0, 0, 1);\n        this.BR.rotate((-116.57 * Math.PI) / 180, 1, 0, 0);\n        this.BR.translate(0, 0, megaminxRadius);\n        this.faces = {\n            U: this.U,\n            F: this.F,\n            R: this.R,\n            dr: this.BR,\n            dl: this.BL,\n            L: this.L,\n        };\n        this.group = new Group([this.U, this.F, this.R, this.BR, this.BL, this.L]);\n        this.group.rotate(degreesToRadians(63), 1, 0, 0);\n    }\n    setColors(colors) {\n        let { U, R, F, L, BR, BL } = colors;\n        this.createFaces();\n        // If length is larger than we expect for\n        // a side of the puzzle, assume we're receiving\n        // colors for the entire face of the puzzle. and\n        // just take out the the colors for visible stickers\n        // if (R.length > 3) {\n        //   R = R.slice(2, 5);\n        //   F = F.slice(2, 5);\n        //   L = L.slice(2, 5);\n        //   BR = BR.slice(2, 5);\n        //   BL = BL.slice(2, 5);\n        // }\n        // this.U.faces[1].color = BLACK;\n        // this.R.faces[1].color = BLACK;\n        // this.F.faces[1].color = BLACK;\n        // this.L.faces[1].color = BLACK;\n        // this.BR.faces[1].color = BLACK;\n        // this.BL.faces[1].color = BLACK;\n        this.setFaceColors(this.U, U);\n        this.setFaceColors(this.R, R);\n        this.setFaceColors(this.F, F);\n        this.setFaceColors(this.L, L);\n        this.setFaceColors(this.BR, BR);\n        this.setFaceColors(this.BL, BL);\n        this.removeHiddenStickers();\n    }\n    setFaceColors(faceStickers, colors) {\n        faceStickers.faces.forEach((f, i) => {\n            if (colors && colors[i]) {\n                f.color = colors[i];\n            }\n            else {\n                f.color = BLACK;\n            }\n        });\n    }\n    /**\n     * hide stickers that aren't in the top layer\n     * so only the top of the megaminx is shown\n     */\n    removeHiddenStickers() {\n        this.F.faces = this.F.faces.slice(2, 5);\n        this.BL.faces = this.BL.faces.slice(8, 11);\n        this.L.faces = this.L.faces.slice(4, 7);\n        this.R.faces = [this.R.faces[1], this.R.faces[2], this.R.faces[10]];\n        this.BR.faces = this.BR.faces.slice(6, 9);\n    }\n}\n","import { MegaminxTop } from \"./../puzzles/megaminxTop\";\nimport { RubiksCubeTopLayer } from \"./../puzzles/rubiksCube/rubiksCubeTop\";\nimport { Square1Net } from \"./../puzzles/square1/square1Net\";\nimport { Square1Simualtor } from \"./../simulator/square1/square1Simulator\";\nimport { Square1 } from \"./../puzzles/square1/square1\";\nimport { SkewbNet } from \"./../puzzles/skewbNet\";\nimport { SkewbSimulator } from \"./../simulator/skewb/skewbSimulator\";\nimport { Skewb } from \"./../puzzles/skewb\";\nimport { PyraminxSimulator } from \"./../simulator/pyraminx/pyraminxSimulator\";\nimport { PyraminxNet } from \"./../puzzles/pyraminxNet\";\nimport { MegaminxNet } from \"./../puzzles/megaminxNet\";\nimport { Megaminx } from \"./../puzzles/megaminx\";\nimport { MegaminxSimulator } from \"./../simulator/megaminx/megaminxSimulator\";\nimport { RubiksCubeNet } from \"./../puzzles/rubiksCube/rubiksCubeNet\";\nimport { RubiksCube } from \"../puzzles/rubiksCube/rubiksCube\";\nimport { RubiksCubeSimulator } from \"../simulator/rubiksCube/rubiksCubeSimulator\";\nimport { Pyraminx } from \"../puzzles/pyraminx\";\nimport { VisualizerType } from \"./enum\";\n/**\n * Since puzzle geometry doesn't change for any instance of \"Visuzlier\"\n * we can cache the geometry generated to avoid generating it on each time\n * we render a puzzle\n */\nconst geometryCache = {\n    [VisualizerType.CUBE]: {},\n    [VisualizerType.CUBE_NET]: {},\n    [VisualizerType.CUBE_TOP]: {},\n    [VisualizerType.MEGAMINX]: {},\n    [VisualizerType.MEGAMINX_NET]: {},\n    [VisualizerType.MEGAMINX_TOP]: {},\n    [VisualizerType.PYRAMINX]: {},\n    [VisualizerType.PYRAMINX_NET]: {},\n    [VisualizerType.SKEWB]: {},\n    [VisualizerType.SKEWB_NET]: {},\n    [VisualizerType.SQUARE1]: {},\n    [VisualizerType.SQUARE1_NET]: {},\n};\n/**\n * Creates puzzle geometry for a given puzzle type.\n * Will initialize the geometry on puzzle options\n * passed in\n *\n * @param type Type of the puzzle {@link VisualizerType} (cube, skewb, etc...)\n * @param options  Puzzle options {@link PuzzleOptions}\n */\nexport function getPuzzleGeometry(type, options) {\n    switch (type) {\n        case VisualizerType.CUBE:\n            return createCube(options);\n        case VisualizerType.CUBE_NET:\n            return createCubeNet(options);\n        case VisualizerType.CUBE_TOP:\n            return createCubeTop(options);\n        case VisualizerType.MEGAMINX:\n            return createMegaminx(options);\n        case VisualizerType.MEGAMINX_NET:\n            return createMegaminxNet(options);\n        case VisualizerType.MEGAMINX_TOP:\n            return createMegaminxTop(options);\n        case VisualizerType.PYRAMINX:\n            return createPyraminx(options);\n        case VisualizerType.PYRAMINX_NET:\n            return createPyraminxNet(options);\n        case VisualizerType.SKEWB:\n            return createSkewb(options);\n        case VisualizerType.SKEWB_NET:\n            return createSkewbNet(options);\n        case VisualizerType.SQUARE1:\n            return createSquare1(options);\n        case VisualizerType.SQUARE1_NET:\n            return createSquare1Net(options);\n    }\n}\n/**\n * Returns a puzzle simulator for the type of puzzle\n *\n * @param type\n * @param options\n */\nexport function getPuzzleSimulator(type, options) {\n    switch (type) {\n        case VisualizerType.CUBE:\n        case VisualizerType.CUBE_NET:\n        case VisualizerType.CUBE_TOP:\n            return new RubiksCubeSimulator(options.size);\n        case VisualizerType.MEGAMINX:\n        case VisualizerType.MEGAMINX_NET:\n        case VisualizerType.MEGAMINX_TOP:\n            return new MegaminxSimulator();\n        case VisualizerType.PYRAMINX:\n        case VisualizerType.PYRAMINX_NET:\n            return new PyraminxSimulator();\n        case VisualizerType.SKEWB:\n        case VisualizerType.SKEWB_NET:\n            return new SkewbSimulator();\n        case VisualizerType.SQUARE1:\n        case VisualizerType.SQUARE1_NET:\n            return initSquare1Simulator(options);\n    }\n}\nexport function createCube(options = {}) {\n    if (!geometryCache[VisualizerType.CUBE][options.size]) {\n        geometryCache[VisualizerType.CUBE][options.size] = new RubiksCube(options.size);\n    }\n    return geometryCache[VisualizerType.CUBE][options.size];\n}\nexport function createCubeNet(options = {}) {\n    if (!geometryCache[VisualizerType.CUBE_NET][options.size]) {\n        geometryCache[VisualizerType.CUBE_NET][options.size] = new RubiksCubeNet(options.size);\n    }\n    return geometryCache[VisualizerType.CUBE_NET][options.size];\n}\nexport function createCubeTop(options = {}) {\n    if (!geometryCache[VisualizerType.CUBE_TOP][options.size]) {\n        geometryCache[VisualizerType.CUBE_TOP][options.size] =\n            new RubiksCubeTopLayer(options.size);\n    }\n    return geometryCache[VisualizerType.CUBE_TOP][options.size];\n}\nexport function createMegaminx(options = {}) {\n    if (!geometryCache[VisualizerType.MEGAMINX][options.size]) {\n        geometryCache[VisualizerType.MEGAMINX][options.size] = new Megaminx(options.size);\n    }\n    return geometryCache[VisualizerType.MEGAMINX][options.size];\n}\nexport function createMegaminxNet(options = {}) {\n    if (!geometryCache[VisualizerType.MEGAMINX_NET][options.size]) {\n        geometryCache[VisualizerType.MEGAMINX_NET][options.size] = new MegaminxNet(options.size);\n    }\n    return geometryCache[VisualizerType.MEGAMINX_NET][options.size];\n}\nexport function createMegaminxTop(options = {}) {\n    if (!geometryCache[VisualizerType.MEGAMINX_TOP][2]) {\n        // megaminx top size not supported, so just cache by size 2\n        geometryCache[VisualizerType.MEGAMINX_TOP][2] = new MegaminxTop();\n    }\n    return geometryCache[VisualizerType.MEGAMINX_TOP][2];\n}\nexport function createPyraminx(options = {}) {\n    if (!geometryCache[VisualizerType.PYRAMINX][options.size]) {\n        geometryCache[VisualizerType.PYRAMINX][options.size] = new Pyraminx(options.size);\n    }\n    return geometryCache[VisualizerType.PYRAMINX][options.size];\n}\nexport function createPyraminxNet(options = {}) {\n    if (!geometryCache[VisualizerType.PYRAMINX_NET][options.size]) {\n        geometryCache[VisualizerType.PYRAMINX_NET][options.size] = new PyraminxNet(options.size);\n    }\n    return geometryCache[VisualizerType.PYRAMINX_NET][options.size];\n}\nexport function createSkewb(options = {}) {\n    if (!geometryCache[VisualizerType.SKEWB][1]) {\n        // Skewb size not supported, so just cache by size 1\n        geometryCache[VisualizerType.SKEWB][1] = new Skewb();\n    }\n    return geometryCache[VisualizerType.SKEWB][1];\n}\nexport function createSkewbNet(options = {}) {\n    if (!geometryCache[VisualizerType.SKEWB_NET][1]) {\n        // Skewb size not supported, so just cache by size 1\n        geometryCache[VisualizerType.SKEWB_NET][1] = new SkewbNet();\n    }\n    return geometryCache[VisualizerType.SKEWB_NET][1];\n}\nexport function createSquare1(options = {}) {\n    const simulator = initSquare1Simulator(options);\n    const geometry = new Square1(simulator.topLayer, simulator.bottomLayer, simulator.middleRotated, options.scheme);\n    return geometry;\n}\nexport function createSquare1Net(options = {}) {\n    const simulator = initSquare1Simulator(options);\n    const geometry = new Square1Net(simulator.topLayer, simulator.bottomLayer, simulator.middleRotated, options.scheme);\n    return geometry;\n}\nfunction initSquare1Simulator(options) {\n    const simulator = new Square1Simualtor(options.scheme);\n    if (options.case) {\n        simulator.case(options.case);\n    }\n    else if (options.alg) {\n        simulator.alg(options.alg);\n    }\n    return simulator;\n}\n","/**\n * Credit to logic https://github.com/toji/gl-matrix/blob/master/src/quat.js\n */\nexport class Quaternion {\n    constructor(a, b, c, d) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n    }\n    static fromEuler(x, y, z) {\n        let halfToRad = Math.PI / 360;\n        x *= halfToRad;\n        z *= halfToRad;\n        y *= halfToRad;\n        let sx = Math.sin(x);\n        let cx = Math.cos(x);\n        let sy = Math.sin(y);\n        let cy = Math.cos(y);\n        let sz = Math.sin(z);\n        let cz = Math.cos(z);\n        let a = sx * cy * cz - cx * sy * sz;\n        let b = cx * sy * cz + sx * cy * sz;\n        let c = cx * cy * sz - sx * sy * cz;\n        let d = cx * cy * cz + sx * sy * sz;\n        return new Quaternion(a, b, c, d);\n    }\n}\n","import { Square1 } from \"./../puzzles/square1/square1\";\nimport { Geometry } from \"./../geometry/geometry\";\nimport { Arrow } from \"./../geometry/arrow\";\nimport { getDefaultOptions } from \"./options\";\nimport { MASK_COLOR } from \"./../puzzles/colors\";\nimport { VisualizerType } from \"./enum\";\nimport { validatePuzzleOptions, } from \"./interface\";\nimport { Scene } from \"../rendering/scene\";\nimport { Camera } from \"./../rendering/camera\";\nimport { applyTransformations } from \"../rendering/utils\";\nimport { Group } from \"../geometry/group\";\nimport { getPuzzleGeometry, getPuzzleSimulator } from \"./puzzleCreator\";\nimport { Matrix4 } from \"../math/matrix\";\nimport { Quaternion } from \"../math/quaternion\";\n/**\n * Applies a color scheme to simulator values\n *\n * @param faceValues face values from the simulator\n * @param scheme color scheme to\n */\nfunction applyColorScheme(faceValues, scheme) {\n    return Object.keys(faceValues).reduce((colors, face) => {\n        colors[face] = faceValues[face].map((value) => scheme[value] || MASK_COLOR);\n        return colors;\n    }, {});\n}\nfunction isSquare1(type) {\n    return type === VisualizerType.SQUARE1 || type === VisualizerType.SQUARE1_NET;\n}\nfunction isPyraminx(type) {\n    return (type === VisualizerType.PYRAMINX || type === VisualizerType.PYRAMINX_NET);\n}\nfunction isMegaminx(type) {\n    return (type === VisualizerType.MEGAMINX ||\n        type === VisualizerType.MEGAMINX_NET ||\n        type === VisualizerType.MEGAMINX_TOP);\n}\n/**\n * Return true if we can apply simulator colors. Currently\n * we don't simulate n-layered megaminx/pyraminx.\n */\nfunction canApplySimulatorColors(type, size) {\n    if (isPyraminx(type)) {\n        return size === 3;\n    }\n    if (isMegaminx(type)) {\n        return size === 2;\n    }\n    return true;\n}\nfunction createArrow(a, puzzle, group) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    // Get the face the arrow is pointing to\n    let startFace = puzzle.faces[a.start.face];\n    let endFace = puzzle.faces[a.end.face];\n    if (!startFace || !endFace) {\n        throw new Error(`Invalid arrow definition ${JSON.stringify(a)}`);\n    }\n    // Transform from sticker coordinates to group coordinates\n    let startTransformations = [\n        startFace.matrix,\n        puzzle.group.matrix,\n        group.matrix,\n    ];\n    let endTransformations = [endFace.matrix, puzzle.group.matrix, group.matrix];\n    let start;\n    let end;\n    // Get the stickers on the face\n    if (startFace instanceof Geometry && endFace instanceof Geometry) {\n        start = (_a = startFace.faces[a.start.sticker]) === null || _a === void 0 ? void 0 : _a.centroid;\n        end = (_b = endFace.faces[a.end.sticker]) === null || _b === void 0 ? void 0 : _b.centroid;\n    }\n    else {\n        if (puzzle instanceof Square1) {\n            start = (_c = startFace.objects[a.start.sticker]) === null || _c === void 0 ? void 0 : _c.faces[0].centroid;\n            end = (_d = endFace.objects[a.end.sticker]) === null || _d === void 0 ? void 0 : _d.faces[0].centroid;\n        }\n        else {\n            start = (_e = startFace.objects[a.start.sticker]) === null || _e === void 0 ? void 0 : _e.centroid;\n            end = (_f = endFace.objects[a.end.sticker]) === null || _f === void 0 ? void 0 : _f.centroid;\n        }\n        startTransformations.unshift((_g = startFace.objects[a.start.sticker]) === null || _g === void 0 ? void 0 : _g.matrix);\n        endTransformations.unshift((_h = endFace.objects[a.end.sticker]) === null || _h === void 0 ? void 0 : _h.matrix);\n    }\n    if (!start || !end) {\n        throw new Error(`Invalid arrow definition ${JSON.stringify(a)}`);\n    }\n    let p1 = applyTransformations(start, startTransformations);\n    let p2 = applyTransformations(end, endTransformations);\n    return new Arrow(p1, p2);\n}\n/**\n * Encapsulates logic for setting up a puzzle environment for rendering\n * images. Sets up puzzle geometry, applies any algorithm or masking\n * if necessary, and renders the puzzle\n */\nexport class Visualizer {\n    constructor(renderer, type, options = {}) {\n        this.type = type;\n        this.camera = new Camera();\n        this.scene = new Scene();\n        this.group = new Group();\n        this.scene.add(this.group);\n        this.renderer = renderer;\n        this.initPuzzleOptions(options);\n        this.puzzleGeometry = getPuzzleGeometry(this.type, this.options);\n        this.simulator = getPuzzleSimulator(this.type, this.options);\n        this.buildGroupMatrix();\n        this.applyColors();\n        this.addArrows();\n        this.group.addObject(this.puzzleGeometry.group);\n        this.render();\n    }\n    applyColors() {\n        const hasCustomColors = this.options.stickerColors && !isSquare1(this.type);\n        const canUseSimulator = canApplySimulatorColors(this.type, this.options.size);\n        if (hasCustomColors) {\n            this.puzzleGeometry.setColors(this.options.stickerColors);\n        }\n        else if (canUseSimulator) {\n            this.applySimulatorColors();\n        }\n        else {\n            // Apply scheme to puzzle geomety manually, for puzzles\n            // not supported by simulators (megaminx != 2 pyraminx != 3)\n            const faces = this.puzzleGeometry.faces;\n            Object.keys(faces).forEach((face) => {\n                const stickers = faces[face];\n                const faceColor = this.options.scheme[face];\n                if (stickers instanceof Geometry) {\n                    stickers.faces.forEach((f) => (f.color = faceColor));\n                }\n                else if (stickers instanceof Group) {\n                    stickers.objects.forEach((o) => (o.color = faceColor));\n                }\n            });\n        }\n    }\n    applySimulatorColors() {\n        if (this.options.mask)\n            this.applyMask(this.options);\n        if (this.options.alg || this.options.case)\n            this.applyAlgorithm();\n        const faceValues = this.simulator.getValues();\n        const faceColors = applyColorScheme(faceValues, this.options.scheme);\n        this.puzzleGeometry.setColors(faceColors);\n    }\n    applyAlgorithm() {\n        if (isSquare1(this.type)) {\n            // puzzle factory applies algorithm to square 1 when greating the puzzle geometry\n            return;\n        }\n        if (this.options.case) {\n            this.simulator.case(this.options.case);\n        }\n        else if (this.options.alg) {\n            this.simulator.alg(this.options.alg);\n        }\n    }\n    applyMask(options) {\n        Object.keys(options.mask).forEach((maskedFace) => {\n            options.mask[maskedFace].forEach((index) => this.simulator.setValue(maskedFace, index, \"mask\"));\n        });\n    }\n    /**\n     * build the group matrix for the puzzle. This sets up the\n     * rotation, scale, and translation for the resulting rendered\n     * image.\n     */\n    buildGroupMatrix() {\n        this.group.matrix = new Matrix4();\n        // Rotate the group matrix\n        if (this.options.rotations) {\n            this.options.rotations.forEach((rotation) => {\n                const { x = 0, y = 0, z = 0 } = rotation;\n                let rotationMatrix = Matrix4.fromQuaternion(Quaternion.fromEuler(x, y, z));\n                Matrix4.multiply(this.group.matrix, rotationMatrix, this.group.matrix);\n            });\n        }\n        // Scale the group matrix\n        if (this.options.scale) {\n            let scale = this.options.scale;\n            this.group.matrix.scale(scale, scale, scale);\n        }\n        // Translate the group matrix\n        if (this.options.translation) {\n            const { x = 0, y = 0, z = 0 } = this.options.translation;\n            let translationMatrix = Matrix4.fromTranslation(x, y, z);\n            Matrix4.multiply(this.group.matrix, translationMatrix, this.group.matrix);\n        }\n    }\n    addArrows() {\n        if (!this.options.arrows) {\n            return;\n        }\n        this.options.arrows.forEach((arrow) => {\n            try {\n                this.scene.add(createArrow(arrow, this.puzzleGeometry, this.group));\n            }\n            catch (e) {\n                console.error(e);\n                console.warn(`Invalid arrow ${JSON.stringify(arrow)}`);\n            }\n        });\n    }\n    initPuzzleOptions(options) {\n        this.options = Object.assign(Object.assign({}, getDefaultOptions(this.type)), options);\n        validatePuzzleOptions(this.options);\n    }\n    applyOptionsToPuzzle() {\n        this.simulator.reset();\n        this.buildGroupMatrix();\n        this.applyColors();\n        this.addArrows();\n    }\n    setPuzzleOptions(options) {\n        this.initPuzzleOptions(options);\n        // Handle square1 geometry separately, since it\n        // changes, unlike the other puzzles\n        if (isSquare1(this.type)) {\n            this.puzzleGeometry = getPuzzleGeometry(this.type, this.options);\n            this.group.setObjects([this.puzzleGeometry.group]);\n        }\n        this.applyOptionsToPuzzle();\n    }\n    render() {\n        this.renderer.render(this.scene, this.camera);\n    }\n}\n","import { BLACK, GREY } from \"./../puzzles/colors\";\nimport { Visualizer } from \"./visualizer\";\nimport { HtmlSvgRenderer } from \"../rendering/htmlSvgRenderer\";\nimport { validColor } from \"./interface\";\nconst defaultOptions = {\n    width: 500,\n    height: 500,\n    minx: -0.9,\n    miny: -0.9,\n    svgWidth: 1.8,\n    svgHeight: 1.8,\n    strokeWidth: 0.02,\n    arrowColor: GREY,\n    arrowStrokeWidth: 0.03,\n};\n/**\n * Visualize puzzles with svg in a DOM\n */\nexport function SVG(element, type, options = {}) {\n    return new SvgVisualizer(element, type, options);\n}\nexport class SvgVisualizer extends Visualizer {\n    constructor(element, type, options = {}) {\n        options = Object.assign(Object.assign({}, defaultOptions), options);\n        if (typeof element === \"string\") {\n            element = document.querySelector(element);\n            if (element === null) {\n                throw new Error(`Could not find visuzlier element by query selector: ${element}`);\n            }\n        }\n        const renderer = new HtmlSvgRenderer(options.width, options.height, options.minx, options.miny, options.svgWidth, options.svgHeight, options.arrowColor);\n        renderer.strokeWidth = \"\" + options.strokeWidth;\n        element.appendChild(renderer.domElement);\n        super(renderer, type, options.puzzle);\n        this.svgOptions = options;\n    }\n    /**\n     * Set the stroke width for the svg elements rendered and re draw the puzzle.\n     *\n     * @param strokeWidth - value to set the stroke width to. It depends on the svg options and puzzle size,\n     *                      but good values are around .01 - .06\n     */\n    setStrokeWidth(strokeWidth) {\n        this.svgOptions.strokeWidth = strokeWidth;\n        this.renderer.strokeWidth =\n            \"\" + this.svgOptions.strokeWidth;\n        this.render();\n    }\n    /**\n     * Dynamically update the svg element options\n     *\n     * @param options - options for the svg element that is being rendered to\n     */\n    setSvgOptions(options) {\n        this.svgOptions = Object.assign(Object.assign({}, defaultOptions), options);\n        validateSvgOptions(this.svgOptions);\n        const renderer = this.renderer;\n        const svgElement = renderer.svgElement;\n        renderer.strokeWidth = \"\" + this.svgOptions.strokeWidth;\n        renderer.arrowStrokeWidth = \"\" + this.svgOptions.arrowStrokeWidth;\n        svgElement.setAttributeNS(null, \"width\", this.svgOptions.width.toString());\n        svgElement.setAttributeNS(null, \"height\", this.svgOptions.width.toString());\n        svgElement.setAttributeNS(null, \"viewBox\", `${this.svgOptions.minx} ${this.svgOptions.miny} ${this.svgOptions.svgWidth} ${this.svgOptions.svgHeight}`);\n        this.render();\n    }\n}\nfunction validateSvgOptions(options) {\n    if (!Number.isInteger(options.width)) {\n        console.warn(`invalid svg width ${options.width}. Must be a whole number`);\n        options.width = defaultOptions.width;\n    }\n    if (!Number.isInteger(options.height)) {\n        console.warn(`invalid svg height ${options.height}. Must be a whole number`);\n        options.width = defaultOptions.height;\n    }\n    if (!Number.isFinite(options.minx)) {\n        console.warn(`invalid svg minx ${options.minx}`);\n        options.minx = defaultOptions.minx;\n    }\n    if (!Number.isFinite(options.miny)) {\n        console.warn(`invalid svg miny ${options.miny}`);\n        options.minx = defaultOptions.miny;\n    }\n    if (!Number.isFinite(options.svgWidth)) {\n        console.warn(`invalid svgWidth ${options.svgWidth}`);\n        options.minx = defaultOptions.svgWidth;\n    }\n    if (!Number.isFinite(options.svgHeight)) {\n        console.warn(`invalid svgHeight ${options.svgHeight}`);\n        options.minx = defaultOptions.svgHeight;\n    }\n    if (!Number.isFinite(options.strokeWidth)) {\n        console.warn(`invalid strokeWidth ${options.strokeWidth}`);\n        options.minx = defaultOptions.strokeWidth;\n    }\n    if (!Number.isFinite(options.arrowStrokeWidth)) {\n        console.warn(`invalid arrowStrokeWidth ${options.arrowStrokeWidth}`);\n        options.minx = defaultOptions.arrowStrokeWidth;\n    }\n    if (options.arrowColor && !validColor(options.arrowColor)) {\n        options.arrowColor = BLACK;\n    }\n}\n","import { GREY } from \"./../puzzles/colors\";\nimport { SVG } from \"./svg\";\nconst defaultOptions = {\n    width: 500,\n    height: 500,\n    minx: -0.9,\n    miny: -0.9,\n    svgWidth: 1.8,\n    svgHeight: 1.8,\n    strokeWidth: 0.02,\n    arrowColor: GREY,\n    arrowStrokeWidth: 0.03,\n};\n/**\n * Creates PNG element\n */\nexport function PNG(container, type, options = {}) {\n    if (typeof container === \"string\") {\n        container = document.querySelector(container);\n        if (container === null) {\n            throw new Error(`Could not find visuzlier element by query selector: ${container}`);\n        }\n    }\n    let element = document.createElement(\"div\");\n    options = Object.assign(Object.assign({}, defaultOptions), options);\n    SVG(element, type, options);\n    setTimeout(() => {\n        let svgElement = element.querySelector(\"svg\");\n        let targetImage = document.createElement(\"img\");\n        container.appendChild(targetImage);\n        let canvas = document.createElement(\"canvas\");\n        let ctx = canvas.getContext(\"2d\");\n        let loader = new Image();\n        loader.width = canvas.width = targetImage.width = options.width;\n        loader.height = canvas.height = targetImage.height = options.height;\n        loader.onload = function () {\n            ctx.drawImage(loader, 0, 0, loader.width, loader.height);\n            targetImage.src = canvas.toDataURL();\n        };\n        var svgAsXML = new XMLSerializer().serializeToString(svgElement);\n        loader.src = `data:image/svg+xml,${encodeURIComponent(svgAsXML)}`;\n    });\n}\n","import { Visualizer } from \".\";\nimport { HtmlCanvasRenderer } from \"../rendering/htmlCanvasRenderer\";\nimport { GREY } from \"../puzzles/colors\";\nconst defaultOptions = {\n    width: 500,\n    height: 500,\n    lineWidth: 5,\n    arrowColor: GREY,\n};\n/**\n * Visualize puzzles with canvas\n */\nexport function Canvas(element, type, options = {}) {\n    return new CanvasVisualizer(element, type, options);\n}\nexport class CanvasVisualizer extends Visualizer {\n    constructor(element, type, options) {\n        options = Object.assign(Object.assign({}, defaultOptions), options);\n        if (typeof element === \"string\") {\n            element = document.querySelector(element);\n            if (element === null) {\n                throw new Error(`Could not find visuzlier element by query selector: ${element}`);\n            }\n        }\n        const renderer = new HtmlCanvasRenderer(options.width, options.height, options.lineWidth, options.arrowColor);\n        element.appendChild(renderer.domElement);\n        super(renderer, type, options.puzzle);\n    }\n}\n","export const Masks = {\n    CUBE_3: {\n        LAST_LAYER: {\n            F: [3, 4, 5, 6, 7, 8],\n            B: [3, 4, 5, 6, 7, 8],\n            R: [3, 4, 5, 6, 7, 8],\n            L: [3, 4, 5, 6, 7, 8],\n            D: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        },\n        F2L: {\n            F: [0, 1, 2],\n            B: [0, 1, 2],\n            R: [0, 1, 2],\n            L: [0, 1, 2],\n            U: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        },\n        FIRST_LAYER: {\n            F: [0, 1, 2, 3, 4, 5],\n            B: [0, 1, 2, 3, 4, 5],\n            R: [0, 1, 2, 3, 4, 5],\n            L: [0, 1, 2, 3, 4, 5],\n            U: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        },\n        OLL: {\n            R: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n            F: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n            D: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n            L: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n            B: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        },\n        CORNERS_LAST_LAYER: {\n            U: [1, 3, 5, 7],\n            F: [1, 3, 4, 5, 6, 7, 8],\n            B: [1, 3, 4, 5, 6, 7, 8],\n            R: [1, 3, 4, 5, 6, 7, 8],\n            L: [1, 3, 4, 5, 6, 7, 8],\n            D: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        },\n        EDGES_LAST_LAYER: {\n            U: [0, 2, 6, 8],\n            F: [0, 2, 3, 4, 5, 6, 7, 8],\n            B: [0, 2, 3, 4, 5, 6, 7, 8],\n            R: [0, 2, 3, 4, 5, 6, 7, 8],\n            L: [0, 2, 3, 4, 5, 6, 7, 8],\n            D: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        },\n    },\n    MEGA_3: {\n        OLL: {\n            F: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            R: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            L: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            BR: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            BL: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            d: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            b: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            dl: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            dr: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            bl: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            br: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        },\n    },\n};\n","import { TurnType } from \"./algorithms/algorithm\";\nimport { parseCubeAlgorithm } from \"./algorithms/cube\";\nimport { Square1Simualtor } from \"./simulator/square1/square1Simulator\";\nimport { SkewbSimulator } from \"./simulator/skewb/skewbSimulator\";\nimport { PyraminxSimulator } from \"./simulator/pyraminx/pyraminxSimulator\";\nimport { MegaminxSimulator } from \"./simulator/megaminx/megaminxSimulator\";\nimport { RubiksCubeSimulator } from \"./simulator/rubiksCube/rubiksCubeSimulator\";\nimport { Square1Net } from \"./puzzles/square1/square1Net\";\nimport { Square1 } from \"./puzzles/square1/square1\";\nimport { SkewbNet } from \"./puzzles/skewbNet\";\nimport { Skewb } from \"./puzzles/skewb\";\nimport { PyraminxNet } from \"./puzzles/pyraminxNet\";\nimport { Pyraminx } from \"./puzzles/pyraminx\";\nimport { MegaminxNet } from \"./puzzles/megaminxNet\";\nimport { Megaminx } from \"./puzzles/megaminx\";\nimport { RubiksCubeTopLayer } from \"./puzzles/rubiksCube/rubiksCubeTop\";\nimport { RubiksCubeNet } from \"./puzzles/rubiksCube/rubiksCubeNet\";\nimport { RubiksCube } from \"./puzzles/rubiksCube/rubiksCube\";\nimport { HtmlSvgRenderer } from \"./rendering/htmlSvgRenderer\";\nimport { HtmlCanvasRenderer } from \"./rendering/htmlCanvasRenderer\";\nimport { PolygonRenderer } from \"./rendering/polygonRenderer\";\nimport { Camera } from \"./rendering/camera\";\nimport { Scene } from \"./rendering/scene\";\nimport { parseMegaminxAlgorithm } from \"./algorithms/megaminx\";\nimport { parsePyraminxAlgorithm } from \"./algorithms/pyraminx\";\nimport { parseSkewbAlgorithm } from \"./algorithms/skewb\";\nimport { parseSquare1Algorithm } from \"./algorithms/square1\";\nimport * as Colors_1 from \"./puzzles/colors\";\nexport { Colors_1 as Colors };\nexport * from \"./visualizer\";\nexport * from \"./rendering/renderer\";\nexport const Rendering = {\n    Scene,\n    Camera,\n    HtmlSvgRenderer,\n    HtmlCanvasRenderer,\n    PolygonRenderer,\n};\nexport const PuzzleGeometry = {\n    RubiksCube,\n    RubiksCubeNet,\n    RubiksCubeTopLayer,\n    Megaminx,\n    MegaminxNet,\n    Pyraminx,\n    PyraminxNet,\n    Skewb,\n    SkewbNet,\n    Square1,\n    Square1Net,\n};\nexport const Simulator = {\n    RubiksCubeSimulator,\n    MegaminxSimulator,\n    PyraminxSimulator,\n    SkewbSimulator,\n    Square1Simualtor,\n};\nexport const Algorithm = {\n    TurnType,\n    parseCubeAlgorithm: parseCubeAlgorithm,\n    parseMegaminxAlgorithm: parseMegaminxAlgorithm,\n    parsePyraminxAlgorithm: parsePyraminxAlgorithm,\n    parseSkewbAlgorithm: parseSkewbAlgorithm,\n    parseSquare1Algorithm: parseSquare1Algorithm,\n};\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","TurnType","TurnAbbreviation","CubeAlgorithmUnit","possibleMoves","F","U","R","L","D","B","M","E","S","X","Y","Z","cubeRotations","cubeTurnRegex","parseCubeAlgorithm","algorithm","match","turns","exec","rawSlices","rawFace","outerBlockIndicator","rawType","Clockwise","isLowerCaseMove","toLowerCase","indexOf","toUpperCase","turn","unit","getMove","turnType","getTurnType","slices","getSlices","push","Error","intValue","parseInt","CounterClockwise","Double","Simulator","constructor","stickers","Map","faces","addFace","label","has","size","toString","stickerIds","reduce","nextSticker","stickerId","set","faceId","addTurn","changes","doTurn","reverse","movingSticker","replacedSticker","cached","forEach","change","isSolved","entries","entry","next","id","done","getValues","values","map","setValue","face","index","console","warn","faceStickers","alg","split","case","reset","faceName","YELLOW","RED","BLUE","WHITE","ORANGE","GREEN","PURPLE","GREY","DARK_BLUE","LIGHT_YELLOW","LIGHT_GREEN","PINK","BLACK","MASK_COLOR","YELLOW_STICKERLESS","stroke","RED_STICKERLESS","BLUE_STICKERLESS","WHITE_STICKERLESS","ORANGE_STICKERLESS","GREEN_STICKERLESS","PURPLE_STICKERLESS","GREY_STICKERLESS","DARK_BLUE_STICKERLESS","LIGHT_YELLOW_STICKERLESS","LIGHT_GREEN_STICKERLESS","PINK_STICKERLESS","PIECE_TYPE","x","y","z","static","transformMat4","m","w","multiply","rotateX","origin","radians","Math","cos","sin","rotateZ","clone","fromValues","Vector2","ROTATION_VECTOR","TOP_COLOR","BOTTOM_COLOR","FRONT_COLOR","LEFT_COLOR","RIGHT_COLOR","BACK_COLOR","DEFAULT_SQ1_SCHEME","top","front","bottom","left","right","back","SOLVED_TOP_PIECES","type","CORNER","colors","EDGE","SOLVED_BOTTOM_PIECES","square1TurnRegex","parseSquare1Algorithm","slice","pieceValue","Square1Simualtor","scheme","super","topLayer","solvedTop","bottomLayer","solvedBottom","middleRotated","move","rotateTop","rotateBottom","topNum","bottomNum","i","length","topSlice","splice","bottomSlice","concat","originalTurns","piece","shift","abs","pop","unshift","skewbTurnRegex","DirectionToTurnType","parseSkewbAlgorithm","rawUnit","rawDirection","fillArray","Array","fill","SkewbSimulator","center","topLeft","topRight","bottomLeft","bottomRight","doTurns","assign","pyraminxTurnRegex","parsePyraminxAlgorithm","PyraminxSimulator","u","r","l","b","MEGAMINX_FACES","megaminxTurnNotation","PochmannDirections","FaceClockwise","FaceCounter","parseMegaminxAlgorithm","rawNumber","n","MegaminxSimulator","dr","dl","d","br","BR","BL","bl","makeFaceTurnDefinitions","Dxx","Rxx","turnFunc","bind","SIMULATOR_FACE","CUBE_FACES","CUBE_AXIS","CUBE_AXIS_FACES","AXIS_ORIENTATION","AXIS_FACE_ORIENTATION","degreesToRadians","degrees","PI","polarToCartesian","radius","theta","dodecahedronInRadius","sqrt","calculateCentroid","vertices","cx","cy","cz","vertex","RubiksCubeSimulator","gridSize","faceChanges","axis","column","layerChanges","nextFaceName","nextFace","currentFace","row","stickerIndex","sticker1","axisAlignedSticker","sticker2","clockwiseSticker","counterClockwiseSticker","oppositeSticker","turnFace","from","to","error","increment","current","range","layer","layers","generateUid","Matrix4","isArray","m1","m2","m3","m4","m5","m6","m7","m8","m9","m10","m11","m12","m13","m14","m15","m16","q","a","c","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","s","out","matrix","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b0","b1","b2","b3","fovy","aspect","near","far","f","tan","Infinity","nf","translate","scale","rotate","len","hypot","b00","b01","b02","b10","b11","b12","b20","b21","b22","t","Object3D","uid","centroid","rad","setColor","color","Group","objects","setObjects","addObject","object","setCentroid","vector","ATAN_15_DEG","atan","DEG_30_RADIANS","DEG_60_RADIANS","Square1Builder","sideLength","halfSide","halfEdgePiece","layerWidth","middleWidth","halfMiddleWidth","borderLayerWidth","outerHalfSide","outerHalfEdgePiece","pieces","buildSquare1","group","makeLayer","geometry","angle","corner","square1Corner","edge","square1Edge","setColors","Face","indices","filter","v","includes","Geometry","Square1Net","side1","side2","points","side","square1Middle","rotated","layerHeight","halfMiddleHeight","cornerLength","frontColor","leftColor","backColor","INNER_FACE_COLOR","Square1","innerCentroid","innerFaceCentroid","rightColor","Plane","width","height","Triangle","verticies","SkewbNet","centerWidth","pow","cubeWidth","orange","makeStickers","green","white","red","yellow","blue","triangles","triangle","setFaceColors","Skewb","halfWidth","TriangleLattice","base","halfBase","fullHeight","triangleBase","triangleHeight","inradius","count","PyraminxNet","inDiameter","faceSpacing","lattice","ARC_COS_THIRD","acos","DEG_120_RADIANS","SQRT_24","Pyraminx","insphereRadius","DividedPentagon","outRadius","pentagonOutRadius","radiusDiff","aSquared","angleRadians","cSquared","layerWidthToRadiusDiff","layerVerticies","faceVerticies","firstLayerFace","totalPoints","currentPoint","layerPoints","downMap","downMapping","prevLayer","layerVertexNumbers","currentLayer","currentLayerPoint","f2isCorner","f1","f2","f3","f4","makeFaces","mapping","previousPoints","vertexNumbers","segmentPoints","p1","p2","segments","lineSegmentLength","lastPoint","first","last","OPTIMAL_LAYER_WIDTH","MegaminxNet","getLayerWidth","ind","pentagonInRadius","bottomTransforms","oldSetColors","numStickers","array","chunkSize","newSize","ceil","_","chunkArray","Megaminx","megaminxRadius","makeGrid","halfLength","elementWidth","halfElementWidth","vOffset","makeRow","hOffset","RubiksCubeTopLayer","rotationAngle","halfCubeWidth","stickerWidth","halfStickerWidth","borderOffset","rotateBorder","g","sticker","RubiksCubeNet","RubiksCube","Arrow","applyTransformations","transforms","PolygonRenderer","polygons","arrows","render","scene","camera","renderObject3D","onBeforeRender","renderPolygons","renderArrows","onComplete","sort","p","drawPolygon","drawArrow","transformations","renderGeometry","renderArrow","screenPoint","addPolygon","objectToScreen","p1Screen","p2Screen","sortObjects","sorted","aToWorld","bToWorld","aCentroid","bCentroid","updatePolygonElement","polygon","strokeWidth","pointsAttribute","pointString","point","makePointsAttributeValue","colorValue","strokeValue","setAttributeNS","HtmlSvgRenderer","minx","miny","svgWidth","svgHeight","arrowColor","arrowStrokeWidth","lines","uidToPolygon","uidToLine","domElement","document","createElement","className","svgElement","createElementNS","createSVGElement","markers","defs","arrowHeadMarker","arrowHeadPolygon","appendChild","createMarkers","createPolygonElement","arrow","start","end","line","strokeColor","createArrowLineElement","HtmlCanvasRenderer","lineWidth","canvasElement","ctx","getContext","convertRange","clearRect","_a","_b","lineJoin","fillStyle","strokeStyle","moveTo","beginPath","lineTo","closePath","toX","toY","fromX","fromY","dx","dy","atan2","setLineWidth","Camera","perspective","Scene","add","clear","VisualizerType","defaultCubeOptions","rotations","defaultMegaminxOptions","defaultPyraminxOptions","defaultSkewbOptions","defaultSquare1Options","validatePuzzleOptions","options","keys","faceColor","mask","maskValues","Number","isInteger","stickerColors","faceColors","validColor","validRotation","isFinite","translation","validTranslation","validArrow","MegaminxTop","createFaces","removeHiddenStickers","geometryCache","CUBE","CUBE_NET","CUBE_TOP","MEGAMINX","MEGAMINX_NET","MEGAMINX_TOP","PYRAMINX","PYRAMINX_NET","SKEWB","SKEWB_NET","SQUARE1","SQUARE1_NET","getPuzzleGeometry","createCube","createCubeNet","createCubeTop","createMegaminx","createMegaminxNet","createMegaminxTop","createPyraminx","createPyraminxNet","createSkewb","createSkewbNet","simulator","initSquare1Simulator","createSquare1","createSquare1Net","Quaternion","halfToRad","sx","sy","sz","isSquare1","canApplySimulatorColors","isPyraminx","isMegaminx","Visualizer","renderer","initPuzzleOptions","puzzleGeometry","getPuzzleSimulator","buildGroupMatrix","applyColors","addArrows","hasCustomColors","canUseSimulator","applySimulatorColors","applyMask","applyAlgorithm","faceValues","applyColorScheme","maskedFace","rotation","rotationMatrix","fromQuaternion","fromEuler","translationMatrix","fromTranslation","puzzle","_c","_d","_e","_f","_g","_h","startFace","endFace","JSON","stringify","startTransformations","endTransformations","createArrow","e","getDefaultOptions","applyOptionsToPuzzle","setPuzzleOptions","defaultOptions","SVG","element","SvgVisualizer","querySelector","svgOptions","setStrokeWidth","setSvgOptions","validateSvgOptions","PNG","container","setTimeout","targetImage","canvas","loader","Image","onload","drawImage","src","toDataURL","svgAsXML","XMLSerializer","serializeToString","encodeURIComponent","Canvas","CanvasVisualizer","Masks","CUBE_3","LAST_LAYER","F2L","FIRST_LAYER","OLL","CORNERS_LAST_LAYER","EDGES_LAST_LAYER","MEGA_3","Rendering","PuzzleGeometry","Algorithm"],"sourceRoot":""}