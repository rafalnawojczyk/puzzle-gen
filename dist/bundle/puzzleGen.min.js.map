{"version":3,"sources":["webpack://puzzleGen/webpack/universalModuleDefinition","webpack://puzzleGen/./src/algorithms/algorithm.ts","webpack://puzzleGen/./src/algorithms/cube.ts","webpack://puzzleGen/./src/simulator/simulator.ts","webpack://puzzleGen/./src/puzzles/colors.ts","webpack://puzzleGen/./src/puzzles/square1/enum.ts","webpack://puzzleGen/./src/math/vector.ts","webpack://puzzleGen/./src/puzzles/square1/constants.ts","webpack://puzzleGen/./src/algorithms/square1.ts","webpack://puzzleGen/./src/simulator/square1/square1Simulator.ts","webpack://puzzleGen/./src/algorithms/skewb.ts","webpack://puzzleGen/./src/utils/arrays.ts","webpack://puzzleGen/./src/simulator/skewb/skewbSimulator.ts","webpack://puzzleGen/./src/algorithms/pyraminx.ts","webpack://puzzleGen/./src/simulator/pyraminx/pyraminxSimulator.ts","webpack://puzzleGen/./src/simulator/megaminx/constants.ts","webpack://puzzleGen/./src/algorithms/megaminx.ts","webpack://puzzleGen/./src/simulator/megaminx/megaminxSimulator.ts","webpack://puzzleGen/./src/simulator/rubiksCube/constants.ts","webpack://puzzleGen/./src/math/utils.ts","webpack://puzzleGen/./src/simulator/rubiksCube/rubiksCubeSimulator.ts","webpack://puzzleGen/./src/geometry/uid.ts","webpack://puzzleGen/./src/math/matrix.ts","webpack://puzzleGen/./src/geometry/object3d.ts","webpack://puzzleGen/./src/geometry/group.ts","webpack://puzzleGen/./src/math/constants.ts","webpack://puzzleGen/./src/puzzles/square1/interface.ts","webpack://puzzleGen/./src/geometry/face.ts","webpack://puzzleGen/./src/geometry/geometry.ts","webpack://puzzleGen/./src/puzzles/square1/square1Net.ts","webpack://puzzleGen/./src/puzzles/square1/square1.ts","webpack://puzzleGen/./src/geometry/plane.ts","webpack://puzzleGen/./src/geometry/triangle.ts","webpack://puzzleGen/./src/puzzles/skewbNet.ts","webpack://puzzleGen/./src/puzzles/skewb.ts","webpack://puzzleGen/./src/geometry/triangleLattice.ts","webpack://puzzleGen/./src/puzzles/pyraminxNet.ts","webpack://puzzleGen/./src/puzzles/pyraminx.ts","webpack://puzzleGen/./src/geometry/dividedPentagon.ts","webpack://puzzleGen/./src/puzzles/megaminxNet.ts","webpack://puzzleGen/./src/puzzles/megaminx.ts","webpack://puzzleGen/./src/geometry/grid.ts","webpack://puzzleGen/./src/puzzles/rubiksCube/rubiksCubeTop.ts","webpack://puzzleGen/./src/puzzles/rubiksCube/rubiksCubeNet.ts","webpack://puzzleGen/./src/puzzles/rubiksCube/rubiksCube.ts","webpack://puzzleGen/./src/geometry/arrow.ts","webpack://puzzleGen/./src/rendering/utils.ts","webpack://puzzleGen/./src/rendering/polygonRenderer.ts","webpack://puzzleGen/./src/svg/svg.ts","webpack://puzzleGen/./src/rendering/htmlSvgRenderer.ts","webpack://puzzleGen/./src/rendering/htmlCanvasRenderer.ts","webpack://puzzleGen/./src/rendering/camera.ts","webpack://puzzleGen/./src/rendering/scene.ts","webpack://puzzleGen/./src/visualizer/enum.ts","webpack://puzzleGen/./src/visualizer/options.ts","webpack://puzzleGen/./src/visualizer/interface.ts","webpack://puzzleGen/./src/puzzles/megaminxTop.ts","webpack://puzzleGen/./src/visualizer/puzzleCreator.ts","webpack://puzzleGen/./src/math/quaternion.ts","webpack://puzzleGen/./src/visualizer/visualizer.ts","webpack://puzzleGen/./src/visualizer/svg.ts","webpack://puzzleGen/./src/visualizer/png.ts","webpack://puzzleGen/./src/visualizer/canvas.ts","webpack://puzzleGen/./src/visualizer/mask.ts","webpack://puzzleGen/./src/index.ts","webpack://puzzleGen/webpack/bootstrap","webpack://puzzleGen/webpack/startup","webpack://puzzleGen/webpack/runtime/define property getters","webpack://puzzleGen/webpack/runtime/hasOwnProperty shorthand","webpack://puzzleGen/webpack/runtime/make namespace object"],"names":["root","factory","exports","module","define","amd","this","TurnType","TurnAbbreviation","CubeAlgorithmUnit","possibleMoves","F","U","R","L","D","B","M","E","S","X","Y","Z","cubeRotations","cubeTurnRegex","parseCubeAlgorithm","algorithm","match","turns","exec","rawSlices","rawFace","outerBlockIndicator","rawType","Clockwise","isLowerCaseMove","toLowerCase","indexOf","toUpperCase","turn","unit","getMove","turnType","getTurnType","slices","getSlices","push","Error","intValue","parseInt","CounterClockwise","Double","Simulator","stickers","Map","faces","label","has","size","toString","stickerIds","reduce","nextSticker","stickerId","set","faceId","changes","reverse","get","movingSticker","replacedSticker","cached","forEach","change","entries","entry","next","value","id","done","values","key","map","face","index","console","warn","faceStickers","alg","split","doTurn","faceName","YELLOW","RED","BLUE","WHITE","ORANGE","GREEN","PURPLE","GREY","DARK_BLUE","LIGHT_YELLOW","LIGHT_GREEN","PINK","BLACK","MASK_COLOR","YELLOW_STICKERLESS","stroke","RED_STICKERLESS","BLUE_STICKERLESS","WHITE_STICKERLESS","ORANGE_STICKERLESS","GREEN_STICKERLESS","PURPLE_STICKERLESS","GREY_STICKERLESS","DARK_BLUE_STICKERLESS","LIGHT_YELLOW_STICKERLESS","LIGHT_GREEN_STICKERLESS","PINK_STICKERLESS","PIECE_TYPE","x","y","z","m","w","origin","radians","Math","cos","sin","fromValues","Vector2","ROTATION_VECTOR","TOP_COLOR","BOTTOM_COLOR","FRONT_COLOR","LEFT_COLOR","RIGHT_COLOR","BACK_COLOR","DEFAULT_SQ1_SCHEME","top","front","bottom","left","right","back","SOLVED_TOP_PIECES","type","CORNER","colors","EDGE","SOLVED_BOTTOM_PIECES","square1TurnRegex","parseSquare1Algorithm","slice","pieceValue","Square1Simualtor","scheme","super","topLayer","solvedTop","bottomLayer","solvedBottom","middleRotated","move","rotateTop","rotateBottom","topNum","bottomNum","i","length","topSlice","splice","bottomSlice","concat","originalTurns","piece","shift","abs","pop","unshift","skewbTurnRegex","DirectionToTurnType","parseSkewbAlgorithm","rawUnit","rawDirection","fillArray","Array","fill","SkewbSimulator","addFace","addTurn","center","topLeft","topRight","bottomLeft","bottomRight","doTurns","Object","assign","pyraminxTurnRegex","parsePyraminxAlgorithm","PyraminxSimulator","r","u","l","b","MEGAMINX_FACES","megaminxTurnNotation","PochmannDirections","FaceClockwise","FaceCounter","parseMegaminxAlgorithm","rawNumber","n","MegaminxSimulator","dr","dl","d","br","BR","BL","bl","makeFaceTurnDefinitions","turnFunc","Rxx","bind","Dxx","SIMULATOR_FACE","CUBE_FACES","CUBE_AXIS","CUBE_AXIS_FACES","AXIS_ORIENTATION","AXIS_FACE_ORIENTATION","degreesToRadians","degrees","PI","polarToCartesian","radius","theta","dodecahedronInRadius","sqrt","calculateCentroid","vertices","cx","cy","cz","vertex","RubiksCubeSimulator","gridSize","faceChanges","axis","column","layerChanges","nextFaceName","nextFace","currentFace","row","stickerIndex","sticker1","axisAlignedSticker","sticker2","clockwiseSticker","oppositeSticker","counterClockwiseSticker","from","to","error","increment","current","range","layer","layers","turnFace","generateUid","Matrix4","isArray","m1","m2","m3","m4","m5","m6","m7","m8","m9","m10","m11","m12","m13","m14","m15","m16","q","a","c","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","s","out","matrix","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b0","b1","b2","b3","fovy","aspect","near","far","f","tan","Infinity","nf","len","hypot","b00","b01","b02","b10","b11","b12","b20","b21","b22","t","multiply","Object3D","uid","centroid","translate","rad","rotate","scale","color","Group","objects","setObjects","object","vector","ATAN_15_DEG","atan","DEG_30_RADIANS","DEG_60_RADIANS","Square1Builder","sideLength","halfSide","halfEdgePiece","layerWidth","middleWidth","halfMiddleWidth","borderLayerWidth","outerHalfSide","outerHalfEdgePiece","pieces","buildSquare1","group","geometry","angle","corner","square1Corner","edge","square1Edge","Face","indices","filter","v","includes","Geometry","Square1Net","side1","side2","points","side","rotateZ","rotated","layerHeight","halfMiddleHeight","cornerLength","makeLayer","square1Middle","INNER_FACE_COLOR","Square1","innerCentroid","innerFaceCentroid","Plane","width","height","Triangle","verticies","SkewbNet","centerWidth","pow","cubeWidth","orange","makeStickers","green","white","red","yellow","blue","triangles","triangle","setFaceColors","Skewb","halfWidth","TriangleLattice","base","halfBase","fullHeight","triangleBase","triangleHeight","inradius","count","PyraminxNet","inDiameter","faceSpacing","lattice","ARC_COS_THIRD","acos","DEG_120_RADIANS","SQRT_24","Pyraminx","insphereRadius","DividedPentagon","outRadius","pentagonOutRadius","radiusDiff","aSquared","angleRadians","cSquared","layerWidthToRadiusDiff","layerVerticies","faceVerticies","firstLayerFace","totalPoints","currentPoint","layerPoints","downMap","downMapping","prevLayer","layerVertexNumbers","currentLayer","currentLayerPoint","f2isCorner","f1","f2","f3","f4","makeFaces","mapping","previousPoints","vertexNumbers","segmentPoints","p1","p2","segments","lineSegmentLength","lastPoint","first","last","OPTIMAL_LAYER_WIDTH","2","3","4","MegaminxNet","getLayerWidth","ind","pentagonInRadius","bottomTransforms","numStickers","array","chunkSize","newSize","ceil","_","chunkArray","Megaminx","megaminxRadius","makeGrid","halfLength","elementWidth","halfElementWidth","vOffset","makeRow","hOffset","RubiksCubeTopLayer","rotationAngle","halfCubeWidth","stickerWidth","halfStickerWidth","borderOffset","rotateBorder","g","sticker","rotateX","RubiksCubeNet","RubiksCube","Arrow","applyTransformations","transforms","clone","transformMat4","PolygonRenderer","polygons","arrows","scene","camera","renderObject3D","onBeforeRender","renderPolygons","renderArrows","onComplete","sort","p","drawPolygon","drawArrow","transformations","renderGeometry","renderArrow","screenPoint","addPolygon","objectToScreen","p1Screen","p2Screen","sorted","aToWorld","bToWorld","aCentroid","bCentroid","updatePolygonElement","polygon","strokeWidth","pointsAttribute","pointString","point","makePointsAttributeValue","colorValue","strokeValue","setAttributeNS","HtmlSvgRenderer","minx","miny","svgWidth","svgHeight","arrowColor","arrowStrokeWidth","lines","uidToPolygon","uidToLine","domElement","document","createElement","className","svgElement","createElementNS","createSVGElement","markers","defs","arrowHeadMarker","arrowHeadPolygon","appendChild","createMarkers","createPolygonElement","arrow","start","end","line","strokeColor","createArrowLineElement","HtmlCanvasRenderer","lineWidth","canvasElement","ctx","getContext","clearRect","_a","_b","lineJoin","fillStyle","strokeStyle","moveTo","convertRange","beginPath","lineTo","closePath","toX","toY","fromX","fromY","dx","dy","atan2","Camera","perspective","Scene","VisualizerType","defaultCubeOptions","rotations","defaultMegaminxOptions","defaultPyraminxOptions","defaultSkewbOptions","defaultSquare1Options","validatePuzzleOptions","options","case","keys","faceColor","mask","maskValues","Number","isInteger","stickerColors","faceColors","validColor","validRotation","isFinite","translation","validTranslation","validArrow","MegaminxTop","createFaces","removeHiddenStickers","geometryCache","CUBE","CUBE_NET","CUBE_TOP","MEGAMINX","MEGAMINX_NET","MEGAMINX_TOP","PYRAMINX","PYRAMINX_NET","SKEWB","SKEWB_NET","SQUARE1","SQUARE1_NET","getPuzzleGeometry","createCube","createCubeNet","createCubeTop","createMegaminx","createMegaminxNet","createMegaminxTop","createPyraminx","createPyraminxNet","createSkewb","createSkewbNet","simulator","initSquare1Simulator","createSquare1","createSquare1Net","Quaternion","halfToRad","sx","sy","sz","isSquare1","canApplySimulatorColors","isPyraminx","isMegaminx","Visualizer","renderer","add","initPuzzleOptions","puzzleGeometry","getPuzzleSimulator","buildGroupMatrix","applyColors","addArrows","addObject","render","hasCustomColors","canUseSimulator","setColors","applySimulatorColors","o","applyMask","applyAlgorithm","faceValues","applyColorScheme","getValues","maskedFace","setValue","rotation","rotationMatrix","fromQuaternion","fromEuler","translationMatrix","fromTranslation","puzzle","_c","_d","_e","_f","_g","_h","startFace","endFace","JSON","stringify","startTransformations","endTransformations","createArrow","e","getDefaultOptions","reset","applyOptionsToPuzzle","defaultOptions","SVG","element","SvgVisualizer","querySelector","svgOptions","validateSvgOptions","PNG","container","setTimeout","targetImage","canvas","loader","Image","onload","drawImage","src","toDataURL","svgAsXML","XMLSerializer","serializeToString","encodeURIComponent","Canvas","CanvasVisualizer","Masks","CUBE_3","LAST_LAYER","F2L","FIRST_LAYER","OLL","CORNERS_LAST_LAYER","EDGES_LAST_LAYER","MEGA_3","Rendering","PuzzleGeometry","Algorithm","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","definition","defineProperty","enumerable","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag"],"mappings":"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","file":"puzzleGen.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"puzzleGen\"] = factory();\n\telse\n\t\troot[\"puzzleGen\"] = factory();\n})(this, function() {\nreturn ","export var TurnType;\n(function (TurnType) {\n    TurnType[TurnType[\"Clockwise\"] = 0] = \"Clockwise\";\n    TurnType[TurnType[\"CounterClockwise\"] = 1] = \"CounterClockwise\";\n    TurnType[TurnType[\"Double\"] = 2] = \"Double\";\n})(TurnType || (TurnType = {}));\n","import { TurnType } from \"./algorithm\";\nvar TurnAbbreviation;\n(function (TurnAbbreviation) {\n    TurnAbbreviation[\"Clockwise\"] = \"\";\n    TurnAbbreviation[\"CounterClockwise\"] = \"'\";\n    TurnAbbreviation[\"Double\"] = \"2\";\n})(TurnAbbreviation || (TurnAbbreviation = {}));\nexport var CubeAlgorithmUnit;\n(function (CubeAlgorithmUnit) {\n    CubeAlgorithmUnit[\"F\"] = \"F\";\n    CubeAlgorithmUnit[\"U\"] = \"U\";\n    CubeAlgorithmUnit[\"R\"] = \"R\";\n    CubeAlgorithmUnit[\"L\"] = \"L\";\n    CubeAlgorithmUnit[\"D\"] = \"D\";\n    CubeAlgorithmUnit[\"B\"] = \"B\";\n    CubeAlgorithmUnit[\"M\"] = \"M\";\n    CubeAlgorithmUnit[\"E\"] = \"E\";\n    CubeAlgorithmUnit[\"S\"] = \"S\";\n    CubeAlgorithmUnit[\"X\"] = \"x\";\n    CubeAlgorithmUnit[\"Y\"] = \"y\";\n    CubeAlgorithmUnit[\"Z\"] = \"z\";\n})(CubeAlgorithmUnit || (CubeAlgorithmUnit = {}));\nexport const possibleMoves = [\n    CubeAlgorithmUnit.F,\n    CubeAlgorithmUnit.U,\n    CubeAlgorithmUnit.R,\n    CubeAlgorithmUnit.L,\n    CubeAlgorithmUnit.D,\n    CubeAlgorithmUnit.B,\n    CubeAlgorithmUnit.M,\n    CubeAlgorithmUnit.E,\n    CubeAlgorithmUnit.S,\n    CubeAlgorithmUnit.X,\n    CubeAlgorithmUnit.Y,\n    CubeAlgorithmUnit.Z,\n];\nconst cubeRotations = [\n    CubeAlgorithmUnit.X,\n    CubeAlgorithmUnit.Y,\n    CubeAlgorithmUnit.Z,\n];\nconst cubeTurnRegex = /([0-9]+)?([UuFfRrDdLlBbMESxyz])(w)?([2\\'])?/g;\n/**\n * Takes in an algorithm string and parses the turns from it\n * algorithm string format should be moves separated by a single space\n * (ex. \"U R2 L' x\")\n *\n * https://www.worldcubeassociation.org/regulations/#article-12-notation\n */\nexport function parseCubeAlgorithm(algorithm) {\n    if (!algorithm) {\n        return [];\n    }\n    let turns = [];\n    let match;\n    while ((match = cubeTurnRegex.exec(algorithm))) {\n        let rawSlices = match[1];\n        let rawFace = match[2];\n        let outerBlockIndicator = match[3];\n        let rawType = match[4] || TurnAbbreviation.Clockwise; // Default to clockwise\n        let isLowerCaseMove = rawFace === rawFace.toLowerCase() &&\n            cubeRotations.indexOf(rawFace) === -1;\n        if (isLowerCaseMove) {\n            rawFace = rawFace.toUpperCase();\n        }\n        let turn = {\n            unit: getMove(rawFace),\n            turnType: getTurnType(rawType),\n            slices: isLowerCaseMove ? 2 : getSlices(rawSlices, outerBlockIndicator),\n        };\n        turns.push(turn);\n    }\n    return turns;\n}\nfunction getSlices(rawSlices, outerBlockIndicator) {\n    if (outerBlockIndicator && !rawSlices) {\n        return 2;\n    }\n    else if (!outerBlockIndicator && rawSlices) {\n        throw new Error(`Invalid move: Cannot specify num slices if outer block move indicator 'w' is not present`);\n    }\n    else if (!outerBlockIndicator && !rawSlices) {\n        return 1;\n    }\n    else {\n        const intValue = parseInt(rawSlices);\n        if (intValue > 1) {\n            return intValue;\n        }\n        throw new Error(`Invalid outer block move (${intValue}) must be greater than 1`);\n    }\n}\nfunction getMove(rawFace) {\n    if (possibleMoves.indexOf(rawFace) < 0) {\n        throw new Error(`Invalid move (${rawFace}): Possible turn faces are [U R F L D B M E S x y z]`);\n    }\n    else\n        return rawFace;\n}\nfunction getTurnType(rawType) {\n    switch (rawType) {\n        case TurnAbbreviation.Clockwise:\n            return TurnType.Clockwise;\n        case TurnAbbreviation.CounterClockwise:\n            return TurnType.CounterClockwise;\n        case TurnAbbreviation.Double:\n            return TurnType.Double;\n        default:\n            throw new Error(`Invalid move modifier (${rawType})`);\n    }\n}\n","/**\n * Class for simulating turns on symmetric twisty puzzles. This is acheived by\n * defining a set of faces with stickers, and a set of turns.\n *\n * @see {@link SkewbSimulator}\n *\n * @example\n * ```typescript\n * // extend class to create a coin simulator\n * export class CoinSimulator extends Simulator {\n *   constructor() {\n *     super()\n *\n *     // Add a head face with one \"heads\" sticker\n *     // Label this face \"top\"\n *      const { stickerIds: top } = this.addFace(['heads'], 'top');\n *\n *     // Add a tail face with one \"tails\" sticker\n *     // Label this face \"bottom\"\n *      const { stickerIds: bottom } = this.addface(['tails'], 'bottom');\n *\n *     // Define a turn by providing the\n *     // sticker id for the top and bottom stickers.\n *     // Label this \"turnOver\"\n *     this.addTurn([top[0], bottom[0]], \"turnOver\");\n *   }\n *\n *   // Flip the coin over\n *   turnOver() {\n *     // Execute the \"turnOver\" turn we created\n *     this.doTurn(\"turnOver\")\n *   }\n *\n * }\n * ```\n */\nexport class Simulator {\n    constructor() {\n        this.stickers = new Map();\n        this.faces = new Map();\n        this.turns = new Map();\n    }\n    /**\n     * Adds a face of stickers to the puzzle.\n     *\n     * @param stickers - array of sticker values\n     * @param label - label to reference the face by\n     * @returns object with the faceId and list of sticker ids.\n     *  faceId will be label if that is present. Otherwise it\n     *  will be generated.\n     * @example\n     * ```\n     * const stickers = ['red', 'red', 'red', 'red'];\n     *\n     * // Add the F face\n     * addFace(stickers, 'F')\n     * ```\n     */\n    addFace(stickers, label) {\n        if (label && this.faces.has(label)) {\n            throw `Face ${label} already exists`;\n        }\n        else if (!label) {\n            label = (this.faces.size + 1).toString();\n        }\n        // Add Stickers\n        const stickerIds = stickers.reduce((stickerIds, nextSticker) => {\n            const stickerId = (this.stickers.size + 1).toString();\n            this.stickers.set(stickerId, nextSticker);\n            stickerIds.push(stickerId);\n            return stickerIds;\n        }, []);\n        // Add Face\n        this.faces.set(label, stickerIds);\n        return {\n            faceId: label,\n            stickerIds,\n        };\n    }\n    /**\n     * Creates a turn definition that tells the simulator\n     * what sticker values to change when turning.\n     *\n     * A change is an array with two sticker ids (ex. ['sticker1', 'sticker2'])\n     * this means that when turning 'sticker1' will go to 'sticker2'.\n     * Or when doing a reverse turn, `sticker2' will go to 'sticker1'\n     *\n     * @param changes - list of turn definitions.\n     * @param label - label to reference the turn by\n     * @returns label of the turn that was created\n     */\n    addTurn(changes, label) {\n        if (label && this.turns.has(label)) {\n            throw `Turn ${label} already exists`;\n        }\n        else if (!label) {\n            label = (this.turns.size + 1).toString();\n        }\n        this.turns.set(label, changes);\n        return label;\n    }\n    /**\n     * Executes a turn on the puzzle\n     *\n     * @param label - label of the turn to execute\n     * @param prime - true to do the turn in reverse\n     */\n    doTurn(label, reverse = false) {\n        const changes = this.turns.get(label);\n        if (!changes) {\n            throw `Unknown turn ${label}`;\n        }\n        let movingSticker = reverse ? 1 : 0;\n        let replacedSticker = reverse ? 0 : 1;\n        let cached = {};\n        changes.forEach((change) => {\n            // Cache value we're replacing\n            cached[change[replacedSticker]] = this.stickers.get(change[replacedSticker]);\n            // Update sticker with new value\n            this.stickers.set(change[replacedSticker], cached[change[movingSticker]] ||\n                this.stickers.get(change[movingSticker]));\n        });\n    }\n    /**\n     * checks that every sticker on every face\n     * is the same value\n     */\n    isSolved() {\n        const faces = this.faces.entries();\n        let entry = faces.next();\n        do {\n            const stickerIds = entry.value[1];\n            let value = this.stickers.get(stickerIds[0]);\n            for (let id of stickerIds) {\n                if (value != this.stickers.get(id))\n                    return false;\n            }\n            entry = faces.next();\n        } while (!entry.done);\n        return true;\n    }\n    getValues() {\n        let values = {};\n        this.faces.forEach((stickerIds, key) => {\n            values[key] = stickerIds.map((id) => this.stickers.get(id));\n        });\n        return values;\n    }\n    /**\n     * override value of sticker on a face\n     *\n     * @param face - label\n     * @param index - index of sticker to set value of\n     * @param value - value to set the sticker to\n     */\n    setValue(face, index, value) {\n        if (!this.faces.has(face)) {\n            console.warn(`attempting to set sticker value on invalid face: ${face}`);\n            return;\n        }\n        let faceStickers = this.faces.get(face);\n        let stickerId = faceStickers[index];\n        if (!faceStickers) {\n            console.warn(`attempting to set sticker value for invalid sticker: ${face} ${index}`);\n            return;\n        }\n        this.stickers.set(stickerId, value);\n    }\n    /**\n     * parse and execute a sequence of moves\n     *\n     * @example\n     * ```typescript\n     * // assuming U, R, and F are turn labels\n     * simulator.alg(\"U R F\")\n     * ```\n     *\n     * @param alg - algorithm\n     */\n    alg(alg) {\n        // Default implementation\n        if (!alg) {\n            return;\n        }\n        alg.split(\" \").forEach((turn) => this.doTurn(turn));\n    }\n    /**\n     * reverses an algorithm then executes it\n     */\n    case(alg) {\n        // No default implementation\n    }\n    /**\n     * resets stickers back to solved position. Uses face name\n     * as sticker value by default\n     */\n    reset() {\n        this.faces.forEach((stickerIds, faceName) => {\n            stickerIds.forEach((stickerId) => {\n                this.stickers.set(stickerId, faceName);\n            });\n        });\n    }\n}\n","// Standard Cube Colors\nexport const YELLOW = { value: \"#FFFF00\" };\nexport const RED = { value: \"#FF0000\" };\nexport const BLUE = { value: \"#0000FF\" };\nexport const WHITE = { value: \"#FFFFFF\" };\nexport const ORANGE = { value: \"#FFA500\" };\nexport const GREEN = { value: \"#00FF00\" };\n// Extra colors for megaminx\nexport const PURPLE = { value: \"#800080\" };\nexport const GREY = { value: \"#808080\" };\nexport const DARK_BLUE = { value: \"#00008B\" };\nexport const LIGHT_YELLOW = { value: \"#ffffb3\" };\nexport const LIGHT_GREEN = { value: \"#32CD32\" };\nexport const PINK = { value: \"#FF69B4\" };\nexport const BLACK = { value: \"#000000\" };\nexport const MASK_COLOR = { value: \"#404040\" };\n// Stickerless\nexport const YELLOW_STICKERLESS = {\n    value: \"#FFFF00\",\n    stroke: \"#DDDD00\",\n};\nexport const RED_STICKERLESS = { value: \"#FF0000\", stroke: \"#DD0000\" };\nexport const BLUE_STICKERLESS = { value: \"#0000FF\", stroke: \"#0000DD\" };\nexport const WHITE_STICKERLESS = { value: \"#FFFFFF\", stroke: \"#DDD\" };\nexport const ORANGE_STICKERLESS = {\n    value: \"#FFA500\",\n    stroke: \"#DD8500\",\n};\nexport const GREEN_STICKERLESS = {\n    value: \"#00FF00\",\n    stroke: \"#00DD00\",\n};\nexport const PURPLE_STICKERLESS = {\n    value: \"#800080\",\n    stroke: \"#5c005c\",\n};\nexport const GREY_STICKERLESS = { value: \"#808080\", stroke: \"#6b6b6b\" };\nexport const DARK_BLUE_STICKERLESS = {\n    value: \"#00008B\",\n    stroke: \"#000075\",\n};\nexport const LIGHT_YELLOW_STICKERLESS = {\n    value: \"#ffffb3\",\n    stroke: \"#e6e6a3\",\n};\nexport const LIGHT_GREEN_STICKERLESS = {\n    value: \"#32CD32\",\n    stroke: \"#2db32d\",\n};\nexport const PINK_STICKERLESS = { value: \"#FF69B4\", stroke: \"#de5b9c\" };\n","export var PIECE_TYPE;\n(function (PIECE_TYPE) {\n    PIECE_TYPE[PIECE_TYPE[\"CORNER\"] = 0] = \"CORNER\";\n    PIECE_TYPE[PIECE_TYPE[\"EDGE\"] = 1] = \"EDGE\";\n    PIECE_TYPE[PIECE_TYPE[\"MIDDLE\"] = 2] = \"MIDDLE\";\n})(PIECE_TYPE || (PIECE_TYPE = {}));\n","export class Vector3 {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromValues(x, y, z) {\n        return new Vector3(x, y, z);\n    }\n    transformMat4(m) {\n        let w = m.values[3] * this.x +\n            m.values[7] * this.y +\n            m.values[11] * this.z +\n            m.values[15];\n        w = w || 1.0;\n        const x = (m.values[0] * this.x +\n            m.values[4] * this.y +\n            m.values[8] * this.z +\n            m.values[12]) /\n            w;\n        const y = (m.values[1] * this.x +\n            m.values[5] * this.y +\n            m.values[9] * this.z +\n            m.values[13]) /\n            w;\n        const z = (m.values[2] * this.x +\n            m.values[6] * this.y +\n            m.values[10] * this.z +\n            m.values[14]) /\n            w;\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    multiply(x, y, z) {\n        this.x = this.x * x;\n        this.y = this.y * y;\n        this.z = this.z * z;\n    }\n    rotateX(origin, radians) {\n        // translate point to origin\n        let x = this.x - origin.x;\n        let y = this.y - origin.y;\n        let z = this.z - origin.z;\n        // rotate\n        this.x = x;\n        this.y = y * Math.cos(radians) - z * Math.sin(radians);\n        this.z = y * Math.sin(radians) + z * Math.cos(radians);\n        // translate back\n        this.x += origin.x;\n        this.y += origin.y;\n        this.z += origin.z;\n        return this;\n    }\n    rotateZ(origin, radians) {\n        // translate point to origin\n        let x = this.x - origin.x;\n        let y = this.y - origin.y;\n        let z = this.z - origin.z;\n        // rotate\n        this.x = x * Math.cos(radians) - y * Math.sin(radians);\n        this.y = x * Math.sin(radians) + y * Math.cos(radians);\n        this.z = z;\n        // translate back\n        this.x += origin.x;\n        this.y += origin.y;\n        this.z += origin.z;\n        return this;\n    }\n    clone() {\n        return Vector3.fromValues(this.x, this.y, this.z);\n    }\n}\nexport class Vector2 {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    static fromValues(x, y) {\n        return new Vector2(x, y);\n    }\n}\n","import { WHITE, RED, BLUE, GREEN, ORANGE, YELLOW } from \"./../colors\";\nimport { PIECE_TYPE } from \"./enum\";\nimport { Vector3 } from \"../../math/vector\";\nexport const ROTATION_VECTOR = Vector3.fromValues(0.92875, -0.24803, 0);\nexport const TOP_COLOR = YELLOW;\nexport const BOTTOM_COLOR = WHITE;\nexport const FRONT_COLOR = RED;\nexport const LEFT_COLOR = BLUE;\nexport const RIGHT_COLOR = GREEN;\nexport const BACK_COLOR = ORANGE;\nexport const DEFAULT_SQ1_SCHEME = {\n    top: TOP_COLOR,\n    front: FRONT_COLOR,\n    bottom: BOTTOM_COLOR,\n    left: LEFT_COLOR,\n    right: RIGHT_COLOR,\n    back: BACK_COLOR,\n};\nexport const SOLVED_TOP_PIECES = [\n    { type: PIECE_TYPE.CORNER, colors: [TOP_COLOR, FRONT_COLOR, LEFT_COLOR] },\n    { type: PIECE_TYPE.EDGE, colors: [TOP_COLOR, LEFT_COLOR] },\n    { type: PIECE_TYPE.CORNER, colors: [TOP_COLOR, LEFT_COLOR, BACK_COLOR] },\n    { type: PIECE_TYPE.EDGE, colors: [TOP_COLOR, BACK_COLOR] },\n    { type: PIECE_TYPE.CORNER, colors: [TOP_COLOR, BACK_COLOR, RIGHT_COLOR] },\n    { type: PIECE_TYPE.EDGE, colors: [TOP_COLOR, RIGHT_COLOR] },\n    { type: PIECE_TYPE.CORNER, colors: [TOP_COLOR, RIGHT_COLOR, FRONT_COLOR] },\n    { type: PIECE_TYPE.EDGE, colors: [TOP_COLOR, FRONT_COLOR] },\n];\nexport const SOLVED_BOTTOM_PIECES = [\n    { type: PIECE_TYPE.EDGE, colors: [BOTTOM_COLOR, BACK_COLOR] },\n    { type: PIECE_TYPE.CORNER, colors: [BOTTOM_COLOR, BACK_COLOR, LEFT_COLOR] },\n    { type: PIECE_TYPE.EDGE, colors: [BOTTOM_COLOR, LEFT_COLOR] },\n    { type: PIECE_TYPE.CORNER, colors: [BOTTOM_COLOR, LEFT_COLOR, FRONT_COLOR] },\n    { type: PIECE_TYPE.EDGE, colors: [BOTTOM_COLOR, FRONT_COLOR] },\n    { type: PIECE_TYPE.CORNER, colors: [BOTTOM_COLOR, FRONT_COLOR, RIGHT_COLOR] },\n    { type: PIECE_TYPE.EDGE, colors: [BOTTOM_COLOR, RIGHT_COLOR] },\n    { type: PIECE_TYPE.CORNER, colors: [BOTTOM_COLOR, RIGHT_COLOR, BACK_COLOR] },\n];\n","const square1TurnRegex = /((\\()?(-?\\d)\\s*,\\s*(-?\\d)(\\))?)|(\\/)/g;\nexport function parseSquare1Algorithm(algorithm) {\n    let turns = [];\n    let match;\n    while ((match = square1TurnRegex.exec(algorithm))) {\n        if (match[0] === \"/\") {\n            turns.push({ slice: true });\n        }\n        else {\n            turns.push({\n                top: parseInt(match[3]),\n                bottom: parseInt(match[4]),\n            });\n        }\n    }\n    return turns;\n}\n","import { Simulator } from \"./../simulator\";\nimport { BACK_COLOR, BOTTOM_COLOR, DEFAULT_SQ1_SCHEME, FRONT_COLOR, LEFT_COLOR, RIGHT_COLOR, TOP_COLOR, } from \"./../../puzzles/square1/constants\";\nimport { PIECE_TYPE } from \"../../puzzles/square1/enum\";\nimport { parseSquare1Algorithm } from \"../../algorithms/square1\";\nconst pieceValue = {\n    [PIECE_TYPE.CORNER]: 2,\n    [PIECE_TYPE.EDGE]: 1,\n};\nexport class Square1Simualtor extends Simulator {\n    constructor(scheme = DEFAULT_SQ1_SCHEME) {\n        super();\n        this.scheme = scheme;\n        this.topLayer = solvedTop(this.scheme);\n        this.bottomLayer = solvedBottom(this.scheme);\n        this.middleRotated = false;\n    }\n    alg(alg) {\n        parseSquare1Algorithm(alg).forEach((move) => {\n            if (\"slice\" in move) {\n                this.slice();\n            }\n            else {\n                this.rotateTop(move.top);\n                this.rotateBottom(move.bottom);\n            }\n        });\n    }\n    case(alg) {\n        parseSquare1Algorithm(alg)\n            .reverse()\n            .forEach((move) => {\n            if (\"slice\" in move) {\n                this.slice();\n            }\n            else {\n                this.rotateTop(move.top * -1);\n                this.rotateBottom(move.bottom * -1);\n            }\n        });\n    }\n    slice() {\n        let topNum = 0;\n        let bottomNum = 0;\n        let value = 0;\n        for (let i = this.topLayer.length; i > 0 && value < 6; i--) {\n            value += pieceValue[this.topLayer[i - 1].type];\n            topNum++;\n        }\n        if (value != 6) {\n            throw \"Cannot perform slice move. Top layer misaligned\";\n        }\n        value = 0;\n        for (let i = this.bottomLayer.length; i > 0 && value < 6; i--) {\n            value += pieceValue[this.bottomLayer[i - 1].type];\n            bottomNum++;\n        }\n        if (value != 6) {\n            throw \"Cannot perform slice move. Bottom layer misaligned\";\n        }\n        const topSlice = this.topLayer.splice(this.topLayer.length - topNum, this.topLayer.length);\n        const bottomSlice = this.bottomLayer.splice(this.bottomLayer.length - bottomNum, this.bottomLayer.length);\n        this.topLayer = this.topLayer.concat(bottomSlice);\n        this.bottomLayer = this.bottomLayer.concat(topSlice);\n        this.middleRotated = !this.middleRotated;\n    }\n    rotateTop(turns) {\n        const originalTurns = turns;\n        while (turns != 0) {\n            if (turns < 0) {\n                const piece = this.topLayer.shift();\n                const value = pieceValue[piece.type];\n                if (Math.abs(turns) < value) {\n                    throw `Invalid Square1 Move. Cannot turn top layer ${originalTurns} steps`;\n                }\n                this.topLayer.push(piece);\n                turns += value;\n            }\n            else {\n                const piece = this.topLayer.pop();\n                const value = pieceValue[piece.type];\n                if (Math.abs(turns) < value) {\n                    throw `Invalid Square1 Move. Cannot turn top layer ${originalTurns} steps`;\n                }\n                this.topLayer.unshift(piece);\n                turns -= value;\n            }\n        }\n    }\n    rotateBottom(turns) {\n        const originalTurns = turns;\n        while (turns != 0) {\n            if (turns < 0) {\n                const piece = this.bottomLayer.shift();\n                const value = pieceValue[piece.type];\n                if (Math.abs(turns) < value) {\n                    throw `Invalid Square1 Move. Cannot turn top layer ${originalTurns} steps`;\n                }\n                this.bottomLayer.push(piece);\n                turns += value;\n            }\n            else {\n                const piece = this.bottomLayer.pop();\n                const value = pieceValue[piece.type];\n                if (Math.abs(turns) < value) {\n                    throw `Invalid Square1 Move. Cannot turn top layer ${originalTurns} steps`;\n                }\n                this.bottomLayer.unshift(piece);\n                turns -= value;\n            }\n        }\n    }\n}\nfunction solvedTop(scheme) {\n    return [\n        {\n            type: PIECE_TYPE.CORNER,\n            colors: [\n                scheme.top || TOP_COLOR,\n                scheme.front || FRONT_COLOR,\n                scheme.left || LEFT_COLOR,\n            ],\n        },\n        {\n            type: PIECE_TYPE.EDGE,\n            colors: [scheme.top || TOP_COLOR, scheme.left || LEFT_COLOR],\n        },\n        {\n            type: PIECE_TYPE.CORNER,\n            colors: [\n                scheme.top || TOP_COLOR,\n                scheme.left || LEFT_COLOR,\n                scheme.back || BACK_COLOR,\n            ],\n        },\n        {\n            type: PIECE_TYPE.EDGE,\n            colors: [scheme.top || TOP_COLOR, scheme.back || BACK_COLOR],\n        },\n        {\n            type: PIECE_TYPE.CORNER,\n            colors: [\n                scheme.top || TOP_COLOR,\n                scheme.back || BACK_COLOR,\n                scheme.right || RIGHT_COLOR,\n            ],\n        },\n        {\n            type: PIECE_TYPE.EDGE,\n            colors: [scheme.top || TOP_COLOR, scheme.right || RIGHT_COLOR],\n        },\n        {\n            type: PIECE_TYPE.CORNER,\n            colors: [\n                scheme.top || TOP_COLOR,\n                scheme.right || RIGHT_COLOR,\n                scheme.front || FRONT_COLOR,\n            ],\n        },\n        {\n            type: PIECE_TYPE.EDGE,\n            colors: [scheme.top || TOP_COLOR, scheme.front || FRONT_COLOR],\n        },\n    ];\n}\nfunction solvedBottom(scheme) {\n    return [\n        {\n            type: PIECE_TYPE.EDGE,\n            colors: [scheme.bottom || BOTTOM_COLOR, scheme.back || BACK_COLOR],\n        },\n        {\n            type: PIECE_TYPE.CORNER,\n            colors: [\n                scheme.bottom || BOTTOM_COLOR,\n                scheme.back || BACK_COLOR,\n                scheme.left || LEFT_COLOR,\n            ],\n        },\n        {\n            type: PIECE_TYPE.EDGE,\n            colors: [scheme.bottom || BOTTOM_COLOR, scheme.left || LEFT_COLOR],\n        },\n        {\n            type: PIECE_TYPE.CORNER,\n            colors: [\n                scheme.bottom || BOTTOM_COLOR,\n                scheme.left || LEFT_COLOR,\n                scheme.front || FRONT_COLOR,\n            ],\n        },\n        {\n            type: PIECE_TYPE.EDGE,\n            colors: [scheme.bottom || BOTTOM_COLOR, scheme.front || FRONT_COLOR],\n        },\n        {\n            type: PIECE_TYPE.CORNER,\n            colors: [\n                scheme.bottom || BOTTOM_COLOR,\n                scheme.front || FRONT_COLOR,\n                scheme.right || RIGHT_COLOR,\n            ],\n        },\n        {\n            type: PIECE_TYPE.EDGE,\n            colors: [scheme.bottom || BOTTOM_COLOR, scheme.right || RIGHT_COLOR],\n        },\n        {\n            type: PIECE_TYPE.CORNER,\n            colors: [\n                scheme.bottom || BOTTOM_COLOR,\n                scheme.right || RIGHT_COLOR,\n                scheme.back || BACK_COLOR,\n            ],\n        },\n    ];\n}\n","import { TurnType } from \"./algorithm\";\nconst skewbTurnRegex = /([LRUB])(\\'?)/g;\nconst DirectionToTurnType = {\n    \"\": TurnType.Clockwise,\n    \"'\": TurnType.CounterClockwise,\n};\nexport function parseSkewbAlgorithm(algorithm) {\n    let turns = [];\n    let match;\n    while ((match = skewbTurnRegex.exec(algorithm))) {\n        const rawUnit = match[1];\n        const rawDirection = match[2];\n        turns.push({\n            unit: rawUnit,\n            turnType: DirectionToTurnType[rawDirection],\n            slices: 1,\n        });\n    }\n    return turns;\n}\n","/**\n * Splits an array into chunks\n *\n * @param array original array\n * @param chunkSize\n *\n * @example\n * ```\n * chunkArray([1,2,3,4,5,6], 2)\n * // returns [[1,2], [3,4], [5,6]]\n * ```\n */\nexport function chunkArray(array, chunkSize) {\n    const newSize = Math.ceil(array.length / chunkSize);\n    return new Array(newSize)\n        .fill(null)\n        .map((_, index) => array.slice(index * chunkSize, (index + 1) * chunkSize));\n}\n/**\n * Generates an array of set size filled with a specific value\n *\n * @param length length of the array\n * @param value value to fill the array with\n */\nexport function fillArray(length, value) {\n    return new Array(length).fill(value);\n}\n","import { TurnType } from \"../../algorithms/algorithm\";\nimport { parseSkewbAlgorithm } from \"../../algorithms/skewb\";\nimport { fillArray } from \"../../utils/arrays\";\nimport { Simulator } from \"./../simulator\";\n/**\n * Simulates a standard skewb\n *\n * Imagine the faces like this\n * ```\n *      U\n *    L F R B\n *      D\n * ```\n *\n * each face has 5 sickers (1 center, 4 corners), stored as\n * an array. Each index of the array maps to stickers like\n * so, 0 being the center, 1-4 being the corners from top left\n * to bottom right\n * ```\n *      1   2\n *        0\n *      3   4\n * ```\n *\n * So all together the simulator stores information like\n * this\n * ```\n *          U1    U2\n *             U0\n *          U3    U4\n * L1    L2 F1    F2 R1    R2 B1    B2\n *    L0       F0       R0       B0\n * L3    L4 F3    F4 F3    F4 B3    B4\n *          D1    D2\n *             D0\n *          D3    D4\n * ```\n */\nexport class SkewbSimulator extends Simulator {\n    constructor() {\n        super();\n        const { stickerIds: top } = this.addFace(fillArray(5, \"top\"), \"top\");\n        const { stickerIds: front } = this.addFace(fillArray(5, \"front\"), \"front\");\n        const { stickerIds: right } = this.addFace(fillArray(5, \"right\"), \"right\");\n        const { stickerIds: bottom } = this.addFace(fillArray(5, \"bottom\"), \"bottom\");\n        const { stickerIds: back } = this.addFace(fillArray(5, \"back\"), \"back\");\n        const { stickerIds: left } = this.addFace(fillArray(5, \"left\"), \"left\");\n        // Skewb Notation https://www.worldcubeassociation.org/regulations/#12h\n        this.addTurn([\n            [right[0], back[0]],\n            [right[2], back[4]],\n            [right[3], back[1]],\n            [right[4], back[3]],\n            [back[0], bottom[0]],\n            [back[4], bottom[2]],\n            [back[1], bottom[3]],\n            [back[3], bottom[4]],\n            [bottom[0], right[0]],\n            [bottom[2], right[2]],\n            [bottom[3], right[3]],\n            [bottom[4], right[4]],\n            [front[4], top[2]],\n            [top[2], left[3]],\n            [left[3], front[4]],\n        ], \"R\");\n        this.addTurn([\n            [center(top), center(left)],\n            [topLeft(top), topLeft(left)],\n            [topRight(top), topRight(left)],\n            [bottomLeft(top), bottomLeft(left)],\n            [center(left), center(back)],\n            [topLeft(left), topRight(back)],\n            [topRight(left), bottomRight(back)],\n            [bottomLeft(left), topLeft(back)],\n            [center(back), center(top)],\n            [topRight(back), topLeft(top)],\n            [bottomRight(back), topRight(top)],\n            [topLeft(back), bottomLeft(top)],\n            [topRight(right), topLeft(front)],\n            [topLeft(front), bottomLeft(bottom)],\n            [bottomLeft(bottom), topRight(right)],\n        ], \"U\");\n        this.addTurn([\n            [center(left), center(front)],\n            [bottomLeft(left), topLeft(front)],\n            [topRight(left), bottomRight(front)],\n            [bottomRight(left), bottomLeft(front)],\n            [center(front), center(bottom)],\n            [topLeft(front), topRight(bottom)],\n            [bottomRight(front), bottomLeft(bottom)],\n            [bottomLeft(front), topLeft(bottom)],\n            [center(bottom), center(left)],\n            [topRight(bottom), bottomLeft(left)],\n            [bottomLeft(bottom), topRight(left)],\n            [topLeft(bottom), bottomRight(left)],\n            [bottomRight(back), bottomLeft(top)],\n            [bottomLeft(top), bottomLeft(right)],\n            [bottomLeft(right), bottomRight(back)],\n        ], \"L\");\n        this.addTurn([\n            [center(back), center(left)],\n            [topRight(back), bottomRight(left)],\n            [bottomLeft(back), topLeft(left)],\n            [bottomRight(back), bottomLeft(left)],\n            [center(left), center(bottom)],\n            [bottomRight(left), bottomRight(bottom)],\n            [topLeft(left), topLeft(bottom)],\n            [bottomLeft(left), bottomLeft(bottom)],\n            [center(bottom), center(back)],\n            [bottomRight(bottom), topRight(back)],\n            [topLeft(bottom), bottomLeft(back)],\n            [bottomLeft(bottom), bottomRight(back)],\n            [topLeft(top), bottomLeft(front)],\n            [bottomLeft(front), bottomRight(right)],\n            [bottomRight(right), topLeft(top)],\n        ], \"B\");\n    }\n    R(reverse) {\n        this.doTurn(\"R\", reverse);\n    }\n    U(reverse) {\n        this.doTurn(\"U\", reverse);\n    }\n    L(reverse) {\n        this.doTurn(\"L\", reverse);\n    }\n    B(reverse) {\n        this.doTurn(\"B\", reverse);\n    }\n    alg(alg) {\n        if (!alg) {\n            return;\n        }\n        this.doTurns(parseSkewbAlgorithm(alg));\n    }\n    case(alg) {\n        if (!alg) {\n            return;\n        }\n        let turns = parseSkewbAlgorithm(alg)\n            .reverse()\n            .map((turn) => (Object.assign(Object.assign({}, turn), { turnType: turn.turnType === TurnType.Clockwise\n                ? TurnType.CounterClockwise\n                : TurnType.Clockwise })));\n        this.doTurns(turns);\n    }\n    doTurns(turns) {\n        turns.forEach((turn) => {\n            let reverse = turn.turnType === TurnType.CounterClockwise;\n            switch (turn.unit) {\n                case \"R\":\n                    this.R(reverse);\n                    break;\n                case \"U\":\n                    this.U(reverse);\n                    break;\n                case \"L\":\n                    this.L(reverse);\n                    break;\n                case \"B\":\n                    this.B(reverse);\n                    break;\n            }\n        });\n    }\n}\nconst center = (face) => face[0];\nconst topLeft = (face) => face[1];\nconst topRight = (face) => face[2];\nconst bottomLeft = (face) => face[3];\nconst bottomRight = (face) => face[4];\n","import { TurnType } from \"./algorithm\";\nconst pyraminxTurnRegex = /([LlRrUuBb])(\\'?)/g;\nconst DirectionToTurnType = {\n    \"\": TurnType.Clockwise,\n    \"'\": TurnType.CounterClockwise,\n};\nexport function parsePyraminxAlgorithm(algorithm) {\n    let turns = [];\n    let match;\n    while ((match = pyraminxTurnRegex.exec(algorithm))) {\n        const rawUnit = match[1];\n        const rawDirection = match[2];\n        turns.push({\n            unit: rawUnit,\n            turnType: DirectionToTurnType[rawDirection],\n            slices: 1,\n        });\n    }\n    return turns;\n}\n","import { TurnType } from \"../../algorithms/algorithm\";\nimport { parsePyraminxAlgorithm } from \"../../algorithms/pyraminx\";\nimport { fillArray } from \"../../utils/arrays\";\nimport { Simulator } from \"./../simulator\";\nexport class PyraminxSimulator extends Simulator {\n    constructor() {\n        super();\n        const { stickerIds: U } = this.addFace(fillArray(9, \"top\"), \"top\");\n        const { stickerIds: L } = this.addFace(fillArray(9, \"left\"), \"left\");\n        const { stickerIds: R } = this.addFace(fillArray(9, \"right\"), \"right\");\n        const { stickerIds: B } = this.addFace(fillArray(9, \"back\"), \"back\");\n        // Tip turns\n        this.addTurn([\n            [U[8], R[8]],\n            [R[8], L[8]],\n            [L[8], U[8]],\n        ], \"u\");\n        this.addTurn([\n            [L[0], B[8]],\n            [B[8], U[4]],\n            [U[4], L[0]],\n        ], \"l\");\n        this.addTurn([\n            [L[4], R[0]],\n            [R[0], B[4]],\n            [B[4], L[4]],\n        ], \"r\");\n        this.addTurn([\n            [R[4], U[0]],\n            [U[0], B[0]],\n            [B[0], R[4]],\n        ], \"b\");\n        // Full turns\n        this.addTurn([\n            [U[5], R[5]],\n            [U[6], R[6]],\n            [U[7], R[7]],\n            [U[8], R[8]],\n            [R[5], L[5]],\n            [R[6], L[6]],\n            [R[7], L[7]],\n            [R[8], L[8]],\n            [L[5], U[5]],\n            [L[6], U[6]],\n            [L[7], U[7]],\n            [L[8], U[8]],\n        ], \"U\");\n        this.addTurn([\n            [L[0], B[8]],\n            [L[1], B[6]],\n            [L[2], B[5]],\n            [L[5], B[7]],\n            [B[8], U[4]],\n            [B[6], U[3]],\n            [B[5], U[7]],\n            [B[7], U[2]],\n            [U[4], L[0]],\n            [U[3], L[1]],\n            [U[7], L[2]],\n            [U[2], L[5]],\n        ], \"L\");\n        this.addTurn([\n            [L[2], R[5]],\n            [L[3], R[1]],\n            [L[4], R[0]],\n            [L[7], R[2]],\n            [R[5], B[2]],\n            [R[1], B[3]],\n            [R[0], B[4]],\n            [R[2], B[7]],\n            [B[2], L[2]],\n            [B[3], L[3]],\n            [B[4], L[4]],\n            [B[7], L[7]],\n        ], \"R\");\n        this.addTurn([\n            [R[2], U[5]],\n            [R[3], U[1]],\n            [R[4], U[0]],\n            [R[7], U[2]],\n            [U[5], B[5]],\n            [U[1], B[1]],\n            [U[0], B[0]],\n            [U[2], B[2]],\n            [B[5], R[2]],\n            [B[1], R[3]],\n            [B[0], R[4]],\n            [B[2], R[7]],\n        ], \"B\");\n    }\n    U(reverse) {\n        this.doTurn(\"U\", reverse);\n    }\n    R(reverse) {\n        this.doTurn(\"R\", reverse);\n    }\n    L(reverse) {\n        this.doTurn(\"L\", reverse);\n    }\n    B(reverse) {\n        this.doTurn(\"B\", reverse);\n    }\n    u(reverse) {\n        this.doTurn(\"u\", reverse);\n    }\n    r(reverse) {\n        this.doTurn(\"r\", reverse);\n    }\n    l(reverse) {\n        this.doTurn(\"l\", reverse);\n    }\n    b(reverse) {\n        this.doTurn(\"b\", reverse);\n    }\n    alg(alg) {\n        if (!alg) {\n            return;\n        }\n        this.doTurns(parsePyraminxAlgorithm(alg));\n    }\n    case(alg) {\n        if (!alg) {\n            return;\n        }\n        let turns = parsePyraminxAlgorithm(alg)\n            .reverse()\n            .map((turn) => (Object.assign(Object.assign({}, turn), { turnType: turn.turnType === TurnType.Clockwise\n                ? TurnType.CounterClockwise\n                : TurnType.Clockwise })));\n        this.doTurns(turns);\n    }\n    doTurns(turns) {\n        turns.forEach((turn) => {\n            let reverse = turn.turnType === TurnType.CounterClockwise;\n            switch (turn.unit) {\n                case \"R\":\n                    this.R(reverse);\n                    break;\n                case \"r\":\n                    this.r(reverse);\n                    break;\n                case \"U\":\n                    this.U(reverse);\n                    break;\n                case \"u\":\n                    this.u(reverse);\n                    break;\n                case \"L\":\n                    this.L(reverse);\n                    break;\n                case \"l\":\n                    this.l(reverse);\n                    break;\n                case \"B\":\n                    this.B(reverse);\n                    break;\n                case \"b\":\n                    this.b(reverse);\n                    break;\n            }\n        });\n    }\n}\n","export const MEGAMINX_FACES = [\n    // Front\n    \"U\",\n    \"R\",\n    \"F\",\n    \"dr\",\n    \"dl\",\n    \"L\",\n    // Back\n    \"d\",\n    \"br\",\n    \"BR\",\n    \"BL\",\n    \"bl\",\n    \"b\",\n];\n","import { TurnType } from \"./algorithm\";\nconst megaminxTurnNotation = /([RD])([\\+\\+|\\-\\-]+)|([UFRL]|BR|BL)([2-3]?)(\\'?)/g;\nvar PochmannDirections;\n(function (PochmannDirections) {\n    PochmannDirections[\"Clockwise\"] = \"++\";\n    PochmannDirections[\"CounterClockwise\"] = \"--\";\n    PochmannDirections[\"FaceClockwise\"] = \"\";\n    PochmannDirections[\"FaceCounter\"] = \"'\";\n})(PochmannDirections || (PochmannDirections = {}));\nconst DirectionToTurnType = {\n    [PochmannDirections.Clockwise]: TurnType.Clockwise,\n    [PochmannDirections.CounterClockwise]: TurnType.CounterClockwise,\n    [PochmannDirections.FaceClockwise]: TurnType.Clockwise,\n    [PochmannDirections.FaceCounter]: TurnType.CounterClockwise,\n};\n/**\n * Takes in a megaminx algorithm in stefan pochmann notation as a string\n * and parses the turns from it\n *\n * Also supports face turns U,F,R,L,BR,BL as i've seen in some algorithms online\n *\n * algorithm string format should be moves separated by a single space\n *\n * @example\n * ```typescript\n * parseMegaminxAlgorithm(\"D++ R-- D-- U\")\n * parseMegaminxAlgorithm(\"R' U2' R2 U R2' U R2 U2' R'\")\n * ```\n *\n * @see https://www.worldcubeassociation.org/regulations/#article-12-notation\n */\nexport function parseMegaminxAlgorithm(algorithm) {\n    if (!algorithm) {\n        return [];\n    }\n    let turns = [];\n    let match;\n    while ((match = megaminxTurnNotation.exec(algorithm))) {\n        const rawUnit = match[1] ? `${match[1]}xx` : match[3];\n        const rawDirection = match[2] || match[5];\n        const rawNumber = match[4];\n        turns.push({\n            unit: rawUnit,\n            turnType: DirectionToTurnType[rawDirection],\n            slices: 1,\n            n: rawNumber ? parseInt(rawNumber) : 1,\n        });\n    }\n    return turns;\n}\n","import { TurnType } from \"./../../algorithms/algorithm\";\nimport { MEGAMINX_FACES } from \"./constants\";\nimport { Simulator } from \"./../simulator\";\nimport { fillArray } from \"../../utils/arrays\";\nimport { parseMegaminxAlgorithm } from \"../../algorithms/megaminx\";\n/**\n * Simulator to define megaminx type puzzles\n *\n * Currently only standard megaminx size supported.\n */\nexport class MegaminxSimulator extends Simulator {\n    constructor() {\n        super();\n        MEGAMINX_FACES.forEach((faceName) => {\n            this.addFace(fillArray(11, faceName), faceName);\n        });\n        const U = this.faces.get(\"U\"); // White\n        const R = this.faces.get(\"R\"); // Blue\n        const F = this.faces.get(\"F\"); // Red\n        const dr = this.faces.get(\"dr\"); // Pink\n        const dl = this.faces.get(\"dl\"); // Light Yellow\n        const L = this.faces.get(\"L\"); // Green\n        const d = this.faces.get(\"d\"); // Gray\n        const br = this.faces.get(\"br\"); // Light Green\n        const BR = this.faces.get(\"BR\"); // Yellow\n        const BL = this.faces.get(\"BL\"); // Purple\n        const bl = this.faces.get(\"bl\"); // Dark Blue\n        const b = this.faces.get(\"b\"); // Orange\n        // R\n        this.addTurn([\n            [F[2], U[6]],\n            [F[1], U[5]],\n            [F[10], U[4]],\n            [U[6], BR[10]],\n            [U[5], BR[9]],\n            [U[4], BR[8]],\n            [BR[10], br[8]],\n            [BR[9], br[7]],\n            [BR[8], br[6]],\n            [br[8], dr[2]],\n            [br[7], dr[1]],\n            [br[6], dr[10]],\n            [dr[2], F[2]],\n            [dr[1], F[1]],\n            [dr[10], F[10]],\n            ...makeFaceTurnDefinitions(R),\n        ], \"R\");\n        // F\n        this.addTurn([\n            [U[2], R[2]],\n            [U[3], R[3]],\n            [U[4], R[4]],\n            [R[2], dr[2]],\n            [R[3], dr[3]],\n            [R[4], dr[4]],\n            [dr[2], dl[2]],\n            [dr[3], dl[3]],\n            [dr[4], dl[4]],\n            [dl[2], L[2]],\n            [dl[3], L[3]],\n            [dl[4], L[4]],\n            [L[2], U[2]],\n            [L[3], U[3]],\n            [L[4], U[4]],\n            ...makeFaceTurnDefinitions(F),\n        ], \"F\");\n        // U\n        this.addTurn([\n            [F[2], L[4]],\n            [F[3], L[5]],\n            [F[4], L[6]],\n            [L[4], BL[8]],\n            [L[5], BL[9]],\n            [L[6], BL[10]],\n            [BL[8], BR[6]],\n            [BL[9], BR[7]],\n            [BL[10], BR[8]],\n            [BR[6], R[10]],\n            [BR[7], R[1]],\n            [BR[8], R[2]],\n            [R[10], F[2]],\n            [R[1], F[3]],\n            [R[2], F[4]],\n            ...makeFaceTurnDefinitions(U),\n        ], \"U\");\n        // L\n        this.addTurn([\n            [F[4], dl[4]],\n            [F[5], dl[5]],\n            [F[6], dl[6]],\n            [dl[4], bl[8]],\n            [dl[5], bl[9]],\n            [dl[6], bl[10]],\n            [bl[8], BL[6]],\n            [bl[9], BL[7]],\n            [bl[10], BL[8]],\n            [BL[6], U[10]],\n            [BL[7], U[1]],\n            [BL[8], U[2]],\n            [U[10], F[4]],\n            [U[1], F[5]],\n            [U[2], F[6]],\n            ...makeFaceTurnDefinitions(L),\n        ], \"L\");\n        // BR\n        this.addTurn([\n            [U[6], BL[10]],\n            [U[7], BL[1]],\n            [U[8], BL[2]],\n            [BL[10], b[8]],\n            [BL[1], b[9]],\n            [BL[2], b[10]],\n            [b[8], br[4]],\n            [b[9], br[5]],\n            [b[10], br[6]],\n            [br[4], R[8]],\n            [br[5], R[9]],\n            [br[6], R[10]],\n            [R[8], U[6]],\n            [R[9], U[7]],\n            [R[10], U[8]],\n            ...makeFaceTurnDefinitions(BR),\n        ], \"BR\");\n        // BL\n        this.addTurn([\n            [U[8], L[6]],\n            [U[9], L[7]],\n            [U[10], L[8]],\n            [L[6], bl[10]],\n            [L[7], bl[1]],\n            [L[8], bl[2]],\n            [bl[10], b[6]],\n            [bl[1], b[7]],\n            [bl[2], b[8]],\n            [b[6], BR[4]],\n            [b[7], BR[5]],\n            [b[8], BR[6]],\n            [BR[4], U[8]],\n            [BR[5], U[9]],\n            [BR[6], U[10]],\n            ...makeFaceTurnDefinitions(BL),\n        ], \"BL\");\n        // dr\n        this.addTurn([\n            [F[8], R[4]],\n            [F[9], R[5]],\n            [F[10], R[6]],\n            [R[4], br[8]],\n            [R[5], br[9]],\n            [R[6], br[10]],\n            [br[8], d[6]],\n            [br[9], d[7]],\n            [br[10], d[8]],\n            [d[6], dl[10]],\n            [d[7], dl[1]],\n            [d[8], dl[2]],\n            [dl[10], F[8]],\n            [dl[1], F[9]],\n            [dl[2], F[10]],\n            ...makeFaceTurnDefinitions(dr),\n        ], \"dr\");\n        // dl\n        this.addTurn([\n            [F[6], dr[4]],\n            [F[7], dr[5]],\n            [F[8], dr[6]],\n            [dr[4], d[8]],\n            [dr[5], d[9]],\n            [dr[6], d[10]],\n            [d[8], bl[6]],\n            [d[9], bl[7]],\n            [d[10], bl[8]],\n            [bl[6], L[10]],\n            [bl[7], L[1]],\n            [bl[8], L[2]],\n            [L[10], F[6]],\n            [L[1], F[7]],\n            [L[2], F[8]],\n            ...makeFaceTurnDefinitions(dl),\n        ], \"dl\");\n        // d\n        this.addTurn([\n            [br[10], b[2]],\n            [br[1], b[3]],\n            [br[2], b[4]],\n            [b[2], bl[4]],\n            [b[3], bl[5]],\n            [b[4], bl[6]],\n            [bl[4], dl[8]],\n            [bl[5], dl[9]],\n            [bl[6], dl[10]],\n            [dl[8], dr[6]],\n            [dl[9], dr[7]],\n            [dl[10], dr[8]],\n            [dr[6], br[10]],\n            [dr[7], br[1]],\n            [dr[8], br[2]],\n            ...makeFaceTurnDefinitions(d),\n        ], \"d\");\n        // br\n        this.addTurn([\n            [b[10], d[4]],\n            [b[1], d[5]],\n            [b[2], d[6]],\n            [d[4], dr[8]],\n            [d[5], dr[9]],\n            [d[6], dr[10]],\n            [dr[8], R[6]],\n            [dr[9], R[7]],\n            [dr[10], R[8]],\n            [R[6], BR[10]],\n            [R[7], BR[1]],\n            [R[8], BR[2]],\n            [BR[10], b[10]],\n            [BR[1], b[1]],\n            [BR[2], b[2]],\n            ...makeFaceTurnDefinitions(br),\n        ], \"br\");\n        // bl\n        this.addTurn([\n            [BL[4], L[8]],\n            [BL[5], L[9]],\n            [BL[6], L[10]],\n            [L[8], dl[6]],\n            [L[9], dl[7]],\n            [L[10], dl[8]],\n            [dl[6], d[10]],\n            [dl[7], d[1]],\n            [dl[8], d[2]],\n            [d[10], b[4]],\n            [d[1], b[5]],\n            [d[2], b[6]],\n            [b[4], BL[4]],\n            [b[5], BL[5]],\n            [b[6], BL[6]],\n            ...makeFaceTurnDefinitions(bl),\n        ], \"bl\");\n        // b\n        this.addTurn([\n            [br[2], BR[2]],\n            [br[3], BR[3]],\n            [br[4], BR[4]],\n            [BR[2], BL[2]],\n            [BR[3], BL[3]],\n            [BR[4], BL[4]],\n            [BL[2], bl[2]],\n            [BL[3], bl[3]],\n            [BL[4], bl[4]],\n            [bl[2], d[2]],\n            [bl[3], d[3]],\n            [bl[4], d[4]],\n            [d[2], br[2]],\n            [d[3], br[3]],\n            [d[4], br[4]],\n            ...makeFaceTurnDefinitions(b),\n        ], \"b\");\n        // \"Pochmann notation\"\n        // D++ / D--\n        this.addTurn([\n            // Top Layer\n            [F[0], R[0]],\n            [F[1], R[9]],\n            [F[5], R[3]],\n            [F[6], R[4]],\n            [F[7], R[5]],\n            [F[8], R[6]],\n            [F[9], R[7]],\n            [F[10], R[8]],\n            [R[0], BR[0]],\n            [R[3], BR[9]],\n            [R[4], BR[10]],\n            [R[5], BR[1]],\n            [R[6], BR[2]],\n            [R[7], BR[3]],\n            [R[8], BR[4]],\n            [R[9], BR[5]],\n            [BR[0], BL[0]],\n            [BR[9], BL[1]],\n            [BR[10], BL[2]],\n            [BR[1], BL[3]],\n            [BR[2], BL[4]],\n            [BR[3], BL[5]],\n            [BR[4], BL[6]],\n            [BR[5], BL[7]],\n            [BL[0], L[0]],\n            [BL[1], L[7]],\n            [BL[2], L[8]],\n            [BL[3], L[9]],\n            [BL[4], L[10]],\n            [BL[5], L[1]],\n            [BL[6], L[2]],\n            [BL[7], L[3]],\n            [L[0], F[0]],\n            [L[7], F[5]],\n            [L[8], F[6]],\n            [L[9], F[7]],\n            [L[10], F[8]],\n            [L[1], F[9]],\n            [L[2], F[10]],\n            [L[3], F[1]],\n            // Bottom Layer\n            [dr[0], br[0]],\n            [dr[1], br[5]],\n            [dr[2], br[6]],\n            [dr[3], br[7]],\n            [dr[4], br[8]],\n            [dr[5], br[9]],\n            [dr[6], br[10]],\n            [dr[7], br[1]],\n            [dr[8], br[2]],\n            [dr[9], br[3]],\n            [dr[10], br[4]],\n            [br[0], b[0]],\n            [br[1], b[3]],\n            [br[2], b[4]],\n            [br[3], b[5]],\n            [br[4], b[6]],\n            [br[5], b[7]],\n            [br[6], b[8]],\n            [br[7], b[9]],\n            [br[8], b[10]],\n            [br[9], b[1]],\n            [br[10], b[2]],\n            [b[0], bl[0]],\n            [b[1], bl[3]],\n            [b[2], bl[4]],\n            [b[3], bl[5]],\n            [b[4], bl[6]],\n            [b[5], bl[7]],\n            [b[6], bl[8]],\n            [b[7], bl[9]],\n            [b[8], bl[10]],\n            [b[9], bl[1]],\n            [b[10], bl[2]],\n            [bl[0], dl[0]],\n            [bl[1], dl[5]],\n            [bl[2], dl[6]],\n            [bl[3], dl[7]],\n            [bl[4], dl[8]],\n            [bl[5], dl[9]],\n            [bl[6], dl[10]],\n            [bl[7], dl[1]],\n            [bl[8], dl[2]],\n            [bl[9], dl[3]],\n            [bl[10], dl[4]],\n            [dl[0], dr[0]],\n            [dl[1], dr[9]],\n            [dl[2], dr[10]],\n            [dl[3], dr[1]],\n            [dl[4], dr[2]],\n            [dl[5], dr[3]],\n            [dl[6], dr[4]],\n            [dl[7], dr[5]],\n            [dl[8], dr[6]],\n            [dl[9], dr[7]],\n            [dl[10], dr[8]],\n            ...makeFaceTurnDefinitions(d),\n        ], \"D++\");\n        // R++ / R--\n        this.addTurn([\n            // Top Layer\n            [F[0], U[0]],\n            [F[7], U[3]],\n            [F[8], U[4]],\n            [F[9], U[5]],\n            [F[10], U[6]],\n            [F[1], U[7]],\n            [F[2], U[8]],\n            [F[3], U[9]],\n            [U[0], BL[0]],\n            [U[3], BL[9]],\n            [U[4], BL[10]],\n            [U[5], BL[1]],\n            [U[6], BL[2]],\n            [U[7], BL[3]],\n            [U[8], BL[4]],\n            [U[9], BL[5]],\n            [BL[0], bl[0]],\n            [BL[9], bl[1]],\n            [BL[10], bl[2]],\n            [BL[1], bl[3]],\n            [BL[2], bl[4]],\n            [BL[3], bl[5]],\n            [BL[4], bl[6]],\n            [BL[5], bl[7]],\n            [bl[0], dl[0]],\n            [bl[1], dl[7]],\n            [bl[2], dl[8]],\n            [bl[3], dl[9]],\n            [bl[4], dl[10]],\n            [bl[5], dl[1]],\n            [bl[6], dl[2]],\n            [bl[7], dl[3]],\n            [dl[0], F[0]],\n            [dl[7], F[7]],\n            [dl[8], F[8]],\n            [dl[9], F[9]],\n            [dl[10], F[10]],\n            [dl[1], F[1]],\n            [dl[2], F[2]],\n            [dl[3], F[3]],\n            // Bottom Layer\n            [dr[0], R[0]],\n            [dr[1], R[9]],\n            [dr[2], R[10]],\n            [dr[3], R[1]],\n            [dr[4], R[2]],\n            [dr[5], R[3]],\n            [dr[6], R[4]],\n            [dr[7], R[5]],\n            [dr[8], R[6]],\n            [dr[9], R[7]],\n            [dr[10], R[8]],\n            [R[0], BR[0]],\n            [R[1], BR[5]],\n            [R[2], BR[6]],\n            [R[3], BR[7]],\n            [R[4], BR[8]],\n            [R[5], BR[9]],\n            [R[6], BR[10]],\n            [R[7], BR[1]],\n            [R[8], BR[2]],\n            [R[9], BR[3]],\n            [R[10], BR[4]],\n            [BR[0], b[0]],\n            [BR[1], b[1]],\n            [BR[2], b[2]],\n            [BR[3], b[3]],\n            [BR[4], b[4]],\n            [BR[5], b[5]],\n            [BR[6], b[6]],\n            [BR[7], b[7]],\n            [BR[8], b[8]],\n            [BR[9], b[9]],\n            [BR[10], b[10]],\n            [b[0], d[0]],\n            [b[1], d[5]],\n            [b[2], d[6]],\n            [b[3], d[7]],\n            [b[4], d[8]],\n            [b[5], d[9]],\n            [b[6], d[10]],\n            [b[7], d[1]],\n            [b[8], d[2]],\n            [b[9], d[3]],\n            [b[10], d[4]],\n            [d[0], dr[0]],\n            [d[1], dr[5]],\n            [d[2], dr[6]],\n            [d[3], dr[7]],\n            [d[4], dr[8]],\n            [d[5], dr[9]],\n            [d[6], dr[10]],\n            [d[7], dr[1]],\n            [d[8], dr[2]],\n            [d[9], dr[3]],\n            [d[10], dr[4]],\n            ...makeFaceTurnDefinitions(br),\n        ], \"R++\");\n    }\n    U(reverse) {\n        this.doTurn(\"U\", reverse);\n    }\n    R(reverse) {\n        this.doTurn(\"R\", reverse);\n    }\n    F(reverse) {\n        this.doTurn(\"F\", reverse);\n    }\n    dr(reverse) {\n        this.doTurn(\"dr\", reverse);\n    }\n    dl(reverse) {\n        this.doTurn(\"dl\", reverse);\n    }\n    L(reverse) {\n        this.doTurn(\"L\", reverse);\n    }\n    d(reverse) {\n        this.doTurn(\"d\", reverse);\n    }\n    br(reverse) {\n        this.doTurn(\"br\", reverse);\n    }\n    BR(reverse) {\n        this.doTurn(\"BR\", reverse);\n    }\n    BL(reverse) {\n        this.doTurn(\"BL\", reverse);\n    }\n    bl(reverse) {\n        this.doTurn(\"bl\", reverse);\n    }\n    b(reverse) {\n        this.doTurn(\"b\", reverse);\n    }\n    /**\n     * D++ for Pochmann notation. D-- if reverse = false\n     */\n    Dxx(reverse) {\n        this.doTurn(\"D++\", reverse);\n    }\n    /**\n     * R++ for Pochmann notation. R-- if reverse = false\n     */\n    Rxx(reverse) {\n        this.doTurn(\"R++\", reverse);\n    }\n    /**\n     * Parses and executes a megaminx algorithm using WCA standard notation\n     *\n     * @see https://www.stefan-pochmann.info/spocc/other_stuff/tools/scramble_megaminx/)\n     * @see https://www.worldcubeassociation.org/regulations/#12d\n     *\n     * @param alg megaminx algorithm to parse\n     * @example\n     * ```\n     * R-- D++ R++ U'\n     * ```\n     */\n    alg(alg) {\n        if (!alg) {\n            return;\n        }\n        // pochmann notation\n        this.doTurns(parseMegaminxAlgorithm(alg));\n    }\n    case(alg) {\n        if (!alg) {\n            return;\n        }\n        let turns = parseMegaminxAlgorithm(alg)\n            .reverse()\n            .map((turn) => (Object.assign(Object.assign({}, turn), { turnType: turn.turnType === TurnType.Clockwise\n                ? TurnType.CounterClockwise\n                : TurnType.Clockwise })));\n        this.doTurns(turns);\n    }\n    doTurns(turns) {\n        turns.forEach((turn) => {\n            let reverse = turn.turnType === TurnType.CounterClockwise;\n            let turnFunc;\n            switch (turn.unit) {\n                case \"Rxx\":\n                    turnFunc = this.Rxx.bind(this);\n                    break;\n                case \"Dxx\":\n                    turnFunc = this.Dxx.bind(this);\n                    break;\n                case \"U\":\n                    turnFunc = this.U.bind(this);\n                    break;\n                case \"R\":\n                    turnFunc = this.R.bind(this);\n                    break;\n                case \"F\":\n                    turnFunc = this.F.bind(this);\n                    break;\n                case \"L\":\n                    turnFunc = this.L.bind(this);\n                    break;\n                case \"BL\":\n                    turnFunc = this.BL.bind(this);\n                    break;\n                case \"BR\":\n                    turnFunc = this.BR.bind(this);\n                    break;\n            }\n            for (let i = turn.n; i > 0; i--) {\n                turnFunc(reverse);\n            }\n        });\n    }\n}\n/**\n * Generates turn definitions for rotating a megaminx face clockwise\n * @param face array of sticker ids\n */\nfunction makeFaceTurnDefinitions(face) {\n    return [\n        // Edges\n        [face[1], face[9]],\n        [face[9], face[7]],\n        [face[7], face[5]],\n        [face[5], face[3]],\n        [face[3], face[1]],\n        // Corners\n        [face[2], face[10]],\n        [face[10], face[8]],\n        [face[8], face[6]],\n        [face[6], face[4]],\n        [face[4], face[2]],\n    ];\n}\n","export var SIMULATOR_FACE;\n(function (SIMULATOR_FACE) {\n    SIMULATOR_FACE[\"U\"] = \"U\";\n    SIMULATOR_FACE[\"R\"] = \"R\";\n    SIMULATOR_FACE[\"F\"] = \"F\";\n    SIMULATOR_FACE[\"D\"] = \"D\";\n    SIMULATOR_FACE[\"L\"] = \"L\";\n    SIMULATOR_FACE[\"B\"] = \"B\";\n})(SIMULATOR_FACE || (SIMULATOR_FACE = {}));\nexport const CUBE_FACES = [\n    SIMULATOR_FACE.U,\n    SIMULATOR_FACE.R,\n    SIMULATOR_FACE.F,\n    SIMULATOR_FACE.D,\n    SIMULATOR_FACE.L,\n    SIMULATOR_FACE.B,\n];\nexport var CUBE_AXIS;\n(function (CUBE_AXIS) {\n    CUBE_AXIS[\"X\"] = \"X\";\n    CUBE_AXIS[\"Y\"] = \"Y\";\n    CUBE_AXIS[\"Z\"] = \"Z\";\n})(CUBE_AXIS || (CUBE_AXIS = {}));\n// Faces that wrap around a given axis\nexport const CUBE_AXIS_FACES = {\n    X: [SIMULATOR_FACE.U, SIMULATOR_FACE.B, SIMULATOR_FACE.D, SIMULATOR_FACE.F],\n    Y: [SIMULATOR_FACE.L, SIMULATOR_FACE.B, SIMULATOR_FACE.R, SIMULATOR_FACE.F],\n    Z: [SIMULATOR_FACE.L, SIMULATOR_FACE.U, SIMULATOR_FACE.R, SIMULATOR_FACE.D],\n};\n// Face's orientation related to other faces on a given axis\n// the number represents the number of turns necessary\n// to orient the face in the same direction\nexport const AXIS_ORIENTATION = {\n    X: {\n        [SIMULATOR_FACE.U]: 0,\n        [SIMULATOR_FACE.B]: 2,\n        [SIMULATOR_FACE.F]: 0,\n        [SIMULATOR_FACE.D]: 0,\n    },\n    Y: {\n        [SIMULATOR_FACE.B]: -1,\n        [SIMULATOR_FACE.F]: -1,\n        [SIMULATOR_FACE.L]: -1,\n        [SIMULATOR_FACE.R]: -1,\n    },\n    Z: {\n        [SIMULATOR_FACE.U]: -1,\n        [SIMULATOR_FACE.D]: 1,\n        [SIMULATOR_FACE.L]: 2,\n        [SIMULATOR_FACE.R]: 0,\n    },\n};\n// True if faces are in reverse orientation\n// from the axis it's on (X, Y, Z).\n// For example D turns on the Y axis, but the\n// y axis layer turns clockwise based on the U\n// face, so D needs to be reversed\nexport const AXIS_FACE_ORIENTATION = {\n    [SIMULATOR_FACE.U]: false,\n    [SIMULATOR_FACE.R]: false,\n    [SIMULATOR_FACE.F]: false,\n    [SIMULATOR_FACE.D]: true,\n    [SIMULATOR_FACE.L]: true,\n    [SIMULATOR_FACE.B]: true,\n};\n","import { Vector2, Vector3 } from \"./vector\";\nexport function degreesToRadians(degrees) {\n    return (Math.PI * degrees) / 180;\n}\nexport function polarToCartesian(radius, theta) {\n    const x = radius * Math.cos(theta);\n    const y = radius * Math.sin(theta);\n    return Vector2.fromValues(x, y);\n}\nexport function lineSegmentLength(p1, p2) {\n    return Math.sqrt(Math.pow(p2.y - p1.y, 2) + Math.pow(p2.x - p1.x, 2));\n}\n/**\n * Calculates the radius of a circle inscribing a regular\n * pentagon given the side length\n */\nexport function pentagonInRadius(length) {\n    return length / (2 * Math.tan(Math.PI / 5));\n}\n/**\n * Calculates the radius of a circle circumscribing a\n * regular pentagon given the side length\n */\nexport function pentagonOutRadius(length) {\n    return length / (2 * Math.sin(Math.PI / 5));\n}\n/**\n * Calculates the radius of the sphere that inscribes a\n * regular dodecahedron given the side length\n */\nexport function dodecahedronInRadius(length) {\n    return (length / 2) * Math.sqrt(5 / 2 + (11 / 10) * Math.sqrt(5));\n}\nexport function calculateCentroid(vertices) {\n    let cx = 0, cy = 0, cz = 0;\n    vertices.forEach((vertex) => {\n        cx += vertex.x;\n        cy += vertex.y;\n        cz += vertex.z;\n    });\n    cx /= vertices.length;\n    cy /= vertices.length;\n    cz /= vertices.length;\n    return Vector3.fromValues(cx, cy, cz);\n}\n/**\n * generates an array with values in a given range by step\n *\n * ex. range(1, 5) -> [1, 2, 3, 4, 5]\n * ex. range(5, 2) -> [5, 4, 3, 2]\n *\n * @param from start of range\n * @param to end of range\n */\nexport function range(from, to) {\n    if (from === to) {\n        return [from];\n    }\n    const increment = from < to ? 1 : -1;\n    let values = [];\n    for (let current = from; current != to; current += increment) {\n        values.push(current);\n    }\n    values.push(to);\n    return values;\n}\n","import { CubeAlgorithmUnit } from \"./../../algorithms/cube\";\nimport { fillArray } from \"../../utils/arrays\";\nimport { CUBE_FACES, CUBE_AXIS, CUBE_AXIS_FACES, AXIS_ORIENTATION, SIMULATOR_FACE, AXIS_FACE_ORIENTATION, } from \"./constants\";\nimport { Simulator } from \"../simulator\";\nimport { range } from \"../../math/utils\";\nimport { parseCubeAlgorithm } from \"../../algorithms/cube\";\nimport { TurnType } from \"../../algorithms/algorithm\";\nexport class RubiksCubeSimulator extends Simulator {\n    constructor(size) {\n        super();\n        this.size = size;\n        this.gridSize = size * size;\n        CUBE_FACES.forEach((faceName) => {\n            // Create stickers for face\n            this.addFace(fillArray(this.gridSize, faceName), faceName);\n            const faceChanges = this.makeFaceTurnDefinitions(faceName);\n            // Create rotation for stickers on face only\n            this.addTurn(faceChanges, faceName);\n        });\n        // Create rotations for stickers on each layer\n        // around each turnable axis\n        [CUBE_AXIS.X, CUBE_AXIS.Y, CUBE_AXIS.Z].forEach((axis) => {\n            for (let column = 0; column < this.size; column++) {\n                let layerChanges = [];\n                CUBE_AXIS_FACES[axis].forEach((faceName, i) => {\n                    const nextFaceName = CUBE_AXIS_FACES[axis][(i + 1) % CUBE_AXIS_FACES[axis].length];\n                    const nextFace = this.faces.get(nextFaceName);\n                    const currentFace = this.faces.get(faceName);\n                    for (let row = 0; row < this.size; row++) {\n                        const stickerIndex = this.size * row + column;\n                        const sticker1 = currentFace[this.axisAlignedSticker(axis, faceName, stickerIndex)];\n                        const sticker2 = nextFace[this.axisAlignedSticker(axis, nextFaceName, stickerIndex)];\n                        layerChanges.push([sticker1, sticker2]);\n                    }\n                });\n                this.addTurn(layerChanges, `${axis}-${column}`);\n            }\n        });\n    }\n    /**\n     * Makes turn definitions for a face of the cube\n     *\n     * @param faceName the label of the face to make turn definitions\n     * @example returning turn definitions for stickers on a 2x2\n     * ```\n     * addFace(['y', 'y', 'y', 'y'], 'U');\n     * // returns { faceId: 'U', stickerIds: ['1','2','3','4'] }\n     *\n     * makeTurnDefinitions('U');\n     * // returns [\n     * //   ['1','2'],\n     * //   ['2','4'],\n     * //   ['3','1'],\n     * //   ['4','3']\n     * // ]\n     * ```\n     */\n    makeFaceTurnDefinitions(faceName) {\n        const stickerIds = this.faces.get(faceName);\n        return stickerIds.map((stickerId, i) => [\n            stickerId,\n            stickerIds[this.clockwiseSticker(i)],\n        ]);\n    }\n    /**\n     * Given sticker i return the index it will go to\n     * after rotating clockwise\n     *\n     * ex. stickers are stored in an array but represent a grid\n     * so, for a 3x3 sticker index 0 will rotate to 2, 1 to 5, etc...\n     *\n     * ```\n     *  0 | 1 | 2\n     *  ----------\n     *  3 | 4 | 5\n     *  ----------\n     *  6 | 7 | 8\n     * ```\n     */\n    clockwiseSticker(stickerIndex) {\n        return (((stickerIndex + 1) * this.size) % (this.gridSize + 1)) - 1;\n    }\n    /**\n     * Given sticker i return the index it will go to\n     * after rotating counterclockwise\n     */\n    counterClockwiseSticker(stickerIndex) {\n        return this.oppositeSticker(this.clockwiseSticker(stickerIndex));\n    }\n    /**\n     * Given sticker i return the index it will go to\n     * after rotating 180 degrees\n     */\n    oppositeSticker(stickerIndex) {\n        return this.gridSize - (stickerIndex + 1);\n    }\n    axisAlignedSticker(axis, face, stickerIndex) {\n        switch (AXIS_ORIENTATION[axis][face]) {\n            case 0:\n                return stickerIndex;\n            case 1:\n                return this.clockwiseSticker(stickerIndex);\n            case 2:\n                return this.oppositeSticker(stickerIndex);\n            case -1:\n                return this.counterClockwiseSticker(stickerIndex);\n            default:\n                throw `Invalid axis face orientation value ${AXIS_ORIENTATION[axis][face]}`;\n        }\n    }\n    /**\n     * Performs a turn on a given face.\n     *\n     * @param face the face to turn\n     * @param axis axis to perform inner layer turns on\n     * @param reverse true if you want to turn the face counter clockwise\n     * @param from inner layer to start turning from\n     * @param to last inner layer to stop turning\n     * @param to last inner layer to stop turning\n     */\n    turnFace(face, axis, reverse, from, to) {\n        if (Math.abs(to - from) >= this.size - 1) {\n            console.error(`Invalid number of layers to turn, skipping turn.; face=${face}, layers=${Math.abs(to - from) + 1}`);\n            return;\n        }\n        // Rotate face\n        this.doTurn(face, reverse);\n        // Turn inner layers\n        range(from, to).forEach((layer) => {\n            this.doTurn(`${axis}-${layer}`, AXIS_FACE_ORIENTATION[face] ? !reverse : reverse);\n        });\n    }\n    /**\n     * Performs a U turn\n     * @param reverse true if you want to turn the face counter clockwise (U')\n     * @param layers how many inner layers of the face to turn defaults to 1. Cannot be the cube size or greater\n     */\n    U(reverse = false, layers = 1) {\n        this.turnFace(SIMULATOR_FACE.U, CUBE_AXIS.Y, reverse, this.size - 1, this.size - layers);\n    }\n    /**\n     * Performs an R turn\n     * @param reverse true if you want to turn the face counter clockwise (R')\n     * @param layers how many inner layers of the face to turn defaults to 1. Cannot be the cube size or greater\n     */\n    R(reverse = false, layers = 1) {\n        this.turnFace(SIMULATOR_FACE.R, CUBE_AXIS.X, reverse, this.size - 1, this.size - layers);\n    }\n    /**\n     * Performs an F turn\n     * @param reverse true if you want to turn the face counter clockwise (F')\n     * @param layers how many inner layers of the face to turn defaults to 1. Cannot be the cube size or greater\n     */\n    F(reverse = false, layers = 1) {\n        this.turnFace(SIMULATOR_FACE.F, CUBE_AXIS.Z, reverse, 0, layers - 1);\n    }\n    /**\n     * Performs a D turn\n     * @param reverse true if you want to turn the face counter clockwise (D')\n     * @param layers how many inner layers of the face to turn defaults to 1. Cannot be the cube size or greater\n     */\n    D(reverse = false, layers = 1) {\n        this.turnFace(SIMULATOR_FACE.D, CUBE_AXIS.Y, reverse, 0, layers - 1);\n    }\n    /**\n     * Performs an L turn\n     * @param reverse true if you want to turn the face counter clockwise (L')\n     * @param layers how many inner layers of the face to turn defaults to 1. Cannot be the cube size or greater\n     */\n    L(reverse = false, layers = 1) {\n        this.turnFace(SIMULATOR_FACE.L, CUBE_AXIS.X, reverse, 0, layers - 1);\n    }\n    /**\n     * Performs a B turn\n     * @param reverse true if you want to turn the face counter clockwise (B')\n     * @param layers how many inner layers of the face to turn defaults to 1. Cannot be the cube size or greater\n     */\n    B(reverse = false, layers = 1) {\n        this.turnFace(SIMULATOR_FACE.B, CUBE_AXIS.Z, reverse, this.size - 1, this.size - layers);\n    }\n    /**\n     * Rotates the middle slice in the direction of an L turn\n     * https://ruwix.com/the-rubiks-cube/notation/advanced/\n     *\n     * Will rotate all middle layers inbetween R and L for larger cubes\n     */\n    M(reverse = false) {\n        for (let layer = 1; layer < this.size - 1; layer++) {\n            this.doTurn(`${CUBE_AXIS.X}-${layer}`, !reverse);\n        }\n    }\n    /**\n     * Rotates the standing layers in the direction of an F turn\n     * https://ruwix.com/the-rubiks-cube/notation/advanced/\n     *\n     * Will rotate all middle layers inbetween F and B for larger cubes\n     */\n    S(reverse = false) {\n        for (let layer = 1; layer < this.size - 1; layer++) {\n            this.doTurn(`${CUBE_AXIS.Z}-${layer}`, reverse);\n        }\n    }\n    /**\n     * Rotates the equitorial layers in the direction of a D turn\n     * https://ruwix.com/the-rubiks-cube/notation/advanced/\n     *\n     * Will rotate all middle layers inbetween U and D for larger cubes\n     */\n    E(reverse = false) {\n        for (let layer = 1; layer < this.size - 1; layer++) {\n            this.doTurn(`${CUBE_AXIS.Y}-${layer}`, !reverse);\n        }\n    }\n    /**\n     * rotates the entire cube on R\n     */\n    X(reverse = false) {\n        this.doTurn(\"R\", reverse);\n        this.doTurn(\"L\", !reverse);\n        for (let layer = 0; layer < this.size; layer++) {\n            this.doTurn(`${CUBE_AXIS.X}-${layer}`, reverse);\n        }\n    }\n    /**\n     * rotates the entire cube on U\n     */\n    Y(reverse = false) {\n        this.doTurn(\"U\", reverse);\n        this.doTurn(\"D\", !reverse);\n        for (let layer = 0; layer < this.size; layer++) {\n            this.doTurn(`${CUBE_AXIS.Y}-${layer}`, reverse);\n        }\n    }\n    /**\n     * rotates the entire cube on F\n     */\n    Z(reverse = false) {\n        this.doTurn(\"F\", reverse);\n        this.doTurn(\"B\", !reverse);\n        for (let layer = 0; layer < this.size; layer++) {\n            this.doTurn(`${CUBE_AXIS.Z}-${layer}`, reverse);\n        }\n    }\n    alg(alg) {\n        if (!alg) {\n            return;\n        }\n        this.doTurns(parseCubeAlgorithm(alg));\n    }\n    /**\n     * reverses an algorithm then executes it\n     */\n    case(alg) {\n        if (!alg) {\n            return;\n        }\n        let turns = parseCubeAlgorithm(alg)\n            .reverse()\n            .map((turn) => {\n            switch (turn.turnType) {\n                case TurnType.Clockwise:\n                    turn.turnType = TurnType.CounterClockwise;\n                    break;\n                case TurnType.CounterClockwise:\n                    turn.turnType = TurnType.Clockwise;\n                    break;\n                case TurnType.Double:\n                    break;\n            }\n            return turn;\n        });\n        this.doTurns(turns);\n    }\n    doTurns(turns) {\n        turns.forEach((turn) => {\n            let turnFunc;\n            switch (turn.unit) {\n                case CubeAlgorithmUnit.U:\n                    turnFunc = this.U.bind(this);\n                    break;\n                case CubeAlgorithmUnit.R:\n                    turnFunc = this.R.bind(this);\n                    break;\n                case CubeAlgorithmUnit.F:\n                    turnFunc = this.F.bind(this);\n                    break;\n                case CubeAlgorithmUnit.D:\n                    turnFunc = this.D.bind(this);\n                    break;\n                case CubeAlgorithmUnit.L:\n                    turnFunc = this.L.bind(this);\n                    break;\n                case CubeAlgorithmUnit.B:\n                    turnFunc = this.B.bind(this);\n                    break;\n                case CubeAlgorithmUnit.M:\n                    turnFunc = this.M.bind(this);\n                    break;\n                case CubeAlgorithmUnit.E:\n                    turnFunc = this.E.bind(this);\n                    break;\n                case CubeAlgorithmUnit.S:\n                    turnFunc = this.S.bind(this);\n                    break;\n                case CubeAlgorithmUnit.X:\n                    turnFunc = this.X.bind(this);\n                    break;\n                case CubeAlgorithmUnit.Y:\n                    turnFunc = this.Y.bind(this);\n                    break;\n                case CubeAlgorithmUnit.Z:\n                    turnFunc = this.Z.bind(this);\n                    break;\n                default:\n                    console.warn(`Unsupported cube move`, turn);\n                    break;\n            }\n            const reverse = turn.turnType === TurnType.CounterClockwise;\n            turnFunc(reverse, turn.slices);\n            if (turn.turnType === TurnType.Double) {\n                turnFunc(reverse, turn.slices);\n            }\n        });\n    }\n}\n","/**\n * Simple generator that yields a new ID every time\n * its called. Used to give unique IDs to geometry.\n */\nexport const generateUid = (() => {\n    let current = 0;\n    return function () {\n        return current++;\n    };\n})();\n","/**\n * Credit to logic https://github.com/toji/gl-matrix/blob/master/src/mat4.js\n */\nconst EPSILON = 0.000001;\nexport class Matrix4 {\n    constructor(values) {\n        if (Array.isArray(values) && values.length == 16) {\n            this.values = values;\n        }\n        else {\n            this.values = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n        }\n    }\n    /**\n     * Returns a 4x4 matrix with the given values\n     */\n    static fromValues(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14, m15, m16) {\n        return new Matrix4([\n            m1,\n            m2,\n            m3,\n            m4,\n            m5,\n            m6,\n            m7,\n            m8,\n            m9,\n            m10,\n            m11,\n            m12,\n            m13,\n            m14,\n            m15,\n            m16,\n        ]);\n    }\n    static fromQuaternion(q) {\n        let { a: x, b: y, c: z, d: w } = q;\n        let x2 = x + x;\n        let y2 = y + y;\n        let z2 = z + z;\n        let xx = x * x2;\n        let yx = y * x2;\n        let yy = y * y2;\n        let zx = z * x2;\n        let zy = z * y2;\n        let zz = z * z2;\n        let wx = w * x2;\n        let wy = w * y2;\n        let wz = w * z2;\n        return Matrix4.fromValues(1 - yy - zz, yx + wz, zx - wy, 0, yx - wz, 1 - xx - zz, zy + wx, 0, zx + wy, zy - wx, 1 - xx - yy, 0, 0, 0, 0, 1);\n    }\n    static fromTranslation(x, y, z) {\n        return Matrix4.fromValues(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x, y, z, 1);\n    }\n    static fromXRotation(radians) {\n        let s = Math.sin(radians);\n        let c = Math.cos(radians);\n        return Matrix4.fromValues(1, 0, 0, 0, 0, c, s, 0, 0, -s, c, 0, 0, 0, 0, 1);\n    }\n    static fromYRotation(radians) {\n        let s = Math.sin(radians);\n        let c = Math.cos(radians);\n        return Matrix4.fromValues(c, 0, -s, 0, 0, 1, 0, 0, s, 0, c, 0, 0, 0, 0, 1);\n    }\n    /**\n     * copy values from one matrix to another\n     */\n    static copy(out, matrix) {\n        out.values[0] = matrix.values[0];\n        out.values[1] = matrix.values[1];\n        out.values[2] = matrix.values[2];\n        out.values[3] = matrix.values[3];\n        out.values[4] = matrix.values[4];\n        out.values[5] = matrix.values[5];\n        out.values[6] = matrix.values[6];\n        out.values[7] = matrix.values[7];\n        out.values[8] = matrix.values[8];\n        out.values[9] = matrix.values[9];\n        out.values[10] = matrix.values[10];\n        out.values[11] = matrix.values[11];\n        out.values[12] = matrix.values[12];\n        out.values[13] = matrix.values[13];\n        out.values[14] = matrix.values[14];\n        out.values[15] = matrix.values[15];\n    }\n    static multiply(out, a, b) {\n        let a00 = a.values[0], a01 = a.values[1], a02 = a.values[2], a03 = a.values[3];\n        let a10 = a.values[4], a11 = a.values[5], a12 = a.values[6], a13 = a.values[7];\n        let a20 = a.values[8], a21 = a.values[9], a22 = a.values[10], a23 = a.values[11];\n        let a30 = a.values[12], a31 = a.values[13], a32 = a.values[14], a33 = a.values[15];\n        // Cache only the current line of the second matrix\n        let b0 = b.values[0], b1 = b.values[1], b2 = b.values[2], b3 = b.values[3];\n        out.values[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        out.values[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        out.values[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        out.values[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n        b0 = b.values[4];\n        b1 = b.values[5];\n        b2 = b.values[6];\n        b3 = b.values[7];\n        out.values[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        out.values[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        out.values[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        out.values[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n        b0 = b.values[8];\n        b1 = b.values[9];\n        b2 = b.values[10];\n        b3 = b.values[11];\n        out.values[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        out.values[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        out.values[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        out.values[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n        b0 = b.values[12];\n        b1 = b.values[13];\n        b2 = b.values[14];\n        b3 = b.values[15];\n        out.values[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        out.values[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        out.values[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        out.values[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n        return out;\n    }\n    /**\n     * Generates a perspective projection matrix with the given bounds.\n     * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n     * which matches WebGL/OpenGL's clip volume.\n     * Passing null/undefined/no value for far will generate infinite projection matrix.\n     *\n     * @param {number} fovy Vertical field of view in radians\n     * @param {number} aspect Aspect ratio. typically viewport width/height\n     * @param {number} near Near bound of the frustum\n     * @param {number} far Far bound of the frustum, can be null or Infinity\n     */\n    static perspective(fovy, aspect, near, far) {\n        const f = 1.0 / Math.tan(fovy / 2);\n        const values = [f / aspect, 0, 0, 0, 0, f, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0];\n        if (far != null && far !== Infinity) {\n            const nf = 1 / (near - far);\n            values[10] = (far + near) * nf;\n            values[14] = 2 * far * near * nf;\n        }\n        else {\n            values[10] = -1;\n            values[14] = -2 * near;\n        }\n        return new Matrix4(values);\n    }\n    translate(x, y, z) {\n        this.values[12] =\n            this.values[0] * x +\n                this.values[4] * y +\n                this.values[8] * z +\n                this.values[12];\n        this.values[13] =\n            this.values[1] * x +\n                this.values[5] * y +\n                this.values[9] * z +\n                this.values[13];\n        this.values[14] =\n            this.values[2] * x +\n                this.values[6] * y +\n                this.values[10] * z +\n                this.values[14];\n        this.values[15] =\n            this.values[3] * x +\n                this.values[7] * y +\n                this.values[11] * z +\n                this.values[15];\n    }\n    scale(x, y, z) {\n        this.values[0] = this.values[0] * x;\n        this.values[1] = this.values[1] * x;\n        this.values[2] = this.values[2] * x;\n        this.values[3] = this.values[3] * x;\n        this.values[4] = this.values[4] * y;\n        this.values[5] = this.values[5] * y;\n        this.values[6] = this.values[6] * y;\n        this.values[7] = this.values[7] * y;\n        this.values[8] = this.values[8] * z;\n        this.values[9] = this.values[9] * z;\n        this.values[10] = this.values[10] * z;\n        this.values[11] = this.values[11] * z;\n    }\n    /**\n     * Rotates the matrix by the given angle around the axis (x, y, z)\n     */\n    rotate(radians, x, y, z) {\n        let len = Math.hypot(x, y, z);\n        if (len < EPSILON) {\n            return;\n        }\n        len = 1 / len;\n        x *= len;\n        y *= len;\n        z *= len;\n        let s = Math.sin(radians);\n        let c = Math.cos(radians);\n        let t = 1 - c;\n        let a00, a01, a02, a03;\n        let a10, a11, a12, a13;\n        let a20, a21, a22, a23;\n        let b00, b01, b02;\n        let b10, b11, b12;\n        let b20, b21, b22;\n        a00 = this.values[0];\n        a01 = this.values[1];\n        a02 = this.values[2];\n        a03 = this.values[3];\n        a10 = this.values[4];\n        a11 = this.values[5];\n        a12 = this.values[6];\n        a13 = this.values[7];\n        a20 = this.values[8];\n        a21 = this.values[9];\n        a22 = this.values[10];\n        a23 = this.values[11];\n        // Construct the elements of the rotation matrix\n        b00 = x * x * t + c;\n        b01 = y * x * t + z * s;\n        b02 = z * x * t - y * s;\n        b10 = x * y * t - z * s;\n        b11 = y * y * t + c;\n        b12 = z * y * t + x * s;\n        b20 = x * z * t + y * s;\n        b21 = y * z * t - x * s;\n        b22 = z * z * t + c;\n        // Perform rotation-specific matrix multiplication\n        this.values[0] = a00 * b00 + a10 * b01 + a20 * b02;\n        this.values[1] = a01 * b00 + a11 * b01 + a21 * b02;\n        this.values[2] = a02 * b00 + a12 * b01 + a22 * b02;\n        this.values[3] = a03 * b00 + a13 * b01 + a23 * b02;\n        this.values[4] = a00 * b10 + a10 * b11 + a20 * b12;\n        this.values[5] = a01 * b10 + a11 * b11 + a21 * b12;\n        this.values[6] = a02 * b10 + a12 * b11 + a22 * b12;\n        this.values[7] = a03 * b10 + a13 * b11 + a23 * b12;\n        this.values[8] = a00 * b20 + a10 * b21 + a20 * b22;\n        this.values[9] = a01 * b20 + a11 * b21 + a21 * b22;\n        this.values[10] = a02 * b20 + a12 * b21 + a22 * b22;\n        this.values[11] = a03 * b20 + a13 * b21 + a23 * b22;\n    }\n    multiply(b) {\n        Matrix4.multiply(this, this, b);\n    }\n}\n","import { generateUid } from \"./uid\";\nimport { Vector3 } from \"../math/vector\";\nimport { Matrix4 } from \"../math/matrix\";\nexport class Object3D {\n    constructor() {\n        this.uid = generateUid();\n        this.matrix = new Matrix4();\n        this.centroid = Vector3.fromValues(0, 0, 0);\n    }\n    translate(x, y, z) {\n        this.matrix.translate(x, y, z);\n    }\n    rotate(rad, x, y, z) {\n        this.matrix.rotate(rad, x, y, z);\n    }\n    scale(x, y, z) {\n        this.matrix.scale(x, y, z);\n    }\n    setColor(color) {\n        this.color = color;\n    }\n}\n","import { Object3D } from \"./object3d\";\nexport class Group extends Object3D {\n    constructor(objects = []) {\n        super();\n        this.setObjects(objects);\n    }\n    setObjects(objects) {\n        this.objects = objects;\n    }\n    addObject(object) {\n        this.objects.push(object);\n    }\n    setCentroid(vector) {\n        this.centroid = vector;\n    }\n}\n","import { degreesToRadians } from \"./utils\";\nexport const SQRT_3 = Math.sqrt(3);\nexport const ATAN_15_DEG = Math.atan(degreesToRadians(15));\nexport const DEG_30_RADIANS = degreesToRadians(30);\nexport const DEG_36_RADIANS = degreesToRadians(36);\nexport const DEG_60_RADIANS = degreesToRadians(60);\nexport const DEG_72_RADIANS = degreesToRadians(72);\n","import { SOLVED_BOTTOM_PIECES, SOLVED_TOP_PIECES } from \"./constants\";\nimport { Group } from \"./../../geometry/group\";\nimport { ATAN_15_DEG, DEG_30_RADIANS, DEG_60_RADIANS, } from \"./../../math/constants\";\nimport { PIECE_TYPE } from \"./enum\";\nexport class Square1Builder {\n    constructor(topLayer = SOLVED_TOP_PIECES, bottomLayer = SOLVED_BOTTOM_PIECES, middleRotated = false, sideLength = 0.7) {\n        this.sideLength = sideLength;\n        this.halfSide = this.sideLength / 2;\n        this.halfEdgePiece = this.halfSide * ATAN_15_DEG;\n        this.layerWidth = this.halfSide - this.halfEdgePiece;\n        this.middleWidth = this.sideLength - 2 * this.layerWidth;\n        this.halfMiddleWidth = this.middleWidth / 2;\n        this.borderLayerWidth = this.sideLength * 0.2;\n        this.outerHalfSide = (sideLength + this.borderLayerWidth) / 2;\n        this.outerHalfEdgePiece = this.outerHalfSide * ATAN_15_DEG;\n        this.pieces = this.buildSquare1(topLayer, bottomLayer, middleRotated);\n        this.group = new Group(this.pieces);\n    }\n    makeLayer(pieces) {\n        let geometry = [];\n        let angle = Math.PI;\n        pieces.forEach((piece, index) => {\n            switch (piece.type) {\n                case PIECE_TYPE.CORNER:\n                    const corner = this.square1Corner(piece.colors[0], piece.colors[1], piece.colors[2]);\n                    corner.rotate(angle, 0, 0, 1);\n                    geometry.push(corner);\n                    angle -= DEG_60_RADIANS;\n                    break;\n                case PIECE_TYPE.EDGE:\n                    const edge = this.square1Edge(piece.colors[0], piece.colors[1]);\n                    edge.rotate(angle - DEG_60_RADIANS, 0, 0, 1);\n                    geometry.push(edge);\n                    angle -= DEG_30_RADIANS;\n                    break;\n            }\n        });\n        return geometry;\n    }\n    /**\n     * Not implemented. Just here for {@link Visualizer}'s sake\n     */\n    setColors(colors) { }\n}\n","import { calculateCentroid } from \"../math/utils\";\nimport { generateUid } from \"./uid\";\n/**\n * Face that will render as a puzzle sticker\n */\nexport class Face {\n    /**\n     * @param indices indices of vertices that make up a face\n     * @param vertices vertices of the geometry to calculate centroid from\n     * @param color color of the sticker\n     */\n    constructor(indices, vertices, color) {\n        this.indices = indices;\n        this.color = color;\n        this.uid = generateUid();\n        if (vertices) {\n            this.calculateCentroid(vertices);\n        }\n    }\n    /**\n     * recalculate the centroid of the face.\n     */\n    calculateCentroid(vertices) {\n        this.centroid = calculateCentroid(\n        // Calculate centroid from vertices included in the face\n        vertices.filter((v, i) => this.indices.includes(i)));\n    }\n}\n","import { Object3D } from \"./object3d\";\nimport { calculateCentroid } from \"../math/utils\";\nexport class Geometry extends Object3D {\n    constructor(vertices, faces) {\n        super();\n        this.vertices = vertices;\n        this.faces = faces;\n        this.centroid = calculateCentroid(this.vertices);\n    }\n}\n","import { Square1Builder } from \"./interface\";\nimport { DEG_30_RADIANS } from \"./../../math/constants\";\nimport { Face } from \"./../../geometry/face\";\nimport { Geometry } from \"./../../geometry/geometry\";\nimport { Group } from \"./../../geometry/group\";\nimport { FRONT_COLOR, RIGHT_COLOR, BACK_COLOR } from \"./constants\";\nimport { Vector3 } from \"../../math/vector\";\nexport class Square1Net extends Square1Builder {\n    square1Corner(top, side1, side2) {\n        const points = [\n            // Top\n            Vector3.fromValues(0, 0, 0),\n            Vector3.fromValues(this.halfSide, this.halfEdgePiece, 0),\n            Vector3.fromValues(this.halfSide, this.halfSide, 0),\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, 0),\n            // Sides\n            Vector3.fromValues(this.outerHalfSide, this.outerHalfEdgePiece, 0),\n            Vector3.fromValues(this.outerHalfSide, this.outerHalfSide, 0),\n            Vector3.fromValues(this.outerHalfEdgePiece, this.outerHalfSide, 0),\n        ];\n        const faces = [\n            new Face([0, 1, 2, 3], points, top),\n            new Face([2, 3, 6, 5], points, side1),\n            new Face([1, 2, 5, 4], points, side2),\n        ];\n        return new Geometry(points, faces);\n    }\n    square1Edge(top, side) {\n        const points = [\n            // Top\n            Vector3.fromValues(0, 0, 0).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, 0).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n            Vector3.fromValues(-this.halfEdgePiece, this.halfSide, 0).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n            // Side\n            Vector3.fromValues(this.outerHalfEdgePiece, this.outerHalfSide, 0).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n            Vector3.fromValues(-this.outerHalfEdgePiece, this.outerHalfSide, 0).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n        ];\n        const faces = [\n            new Face([0, 1, 2], points, top),\n            new Face([1, 2, 4, 3], points, side),\n        ];\n        return new Geometry(points, faces);\n    }\n    square1Middle(front, right, back, rotated) {\n        const layerHeight = this.halfSide - this.halfEdgePiece;\n        const middleHeight = this.sideLength - 2 * layerHeight;\n        const halfMiddleHeight = middleHeight / 2;\n        const cornerLength = this.outerHalfSide - this.outerHalfEdgePiece;\n        const vertices = [\n            Vector3.fromValues(-this.outerHalfSide, halfMiddleHeight, -0.01),\n            Vector3.fromValues(-this.outerHalfEdgePiece, halfMiddleHeight, -0.01),\n            Vector3.fromValues(this.outerHalfSide, halfMiddleHeight, -0.01),\n            Vector3.fromValues(-this.outerHalfSide, -halfMiddleHeight, -0.01),\n            Vector3.fromValues(-this.outerHalfEdgePiece, -halfMiddleHeight, -0.01),\n            Vector3.fromValues(this.outerHalfSide, -halfMiddleHeight, -0.01),\n            // Points for when middle is rotated\n            Vector3.fromValues(2 * this.outerHalfEdgePiece, halfMiddleHeight, -0.01),\n            Vector3.fromValues(2 * this.outerHalfEdgePiece, -halfMiddleHeight, -0.01),\n            Vector3.fromValues(2 * cornerLength, halfMiddleHeight, -0.01),\n            Vector3.fromValues(2 * cornerLength, -halfMiddleHeight, -0.01),\n        ];\n        // Left\n        const faces = [new Face([0, 1, 4, 3], vertices, front)];\n        // Right\n        if (!rotated) {\n            faces.push(new Face([1, 2, 5, 4], vertices, front));\n        }\n        else {\n            faces.push(new Face([1, 6, 7, 4], vertices, back));\n            faces.push(new Face([6, 8, 9, 7], vertices, right));\n        }\n        return new Geometry(vertices, faces);\n    }\n    buildSquare1(top, bottom, middleRotated) {\n        const layerHeight = this.halfSide - this.halfEdgePiece;\n        const middleHeight = this.sideLength - 2 * layerHeight;\n        const halfMiddleHeight = middleHeight / 2;\n        let pieces = [];\n        const topLayer = new Group(this.makeLayer(top));\n        const bottomLayer = new Group(this.makeLayer(bottom));\n        topLayer.translate(0, this.outerHalfSide + halfMiddleHeight, 0);\n        bottomLayer.translate(0, -(this.outerHalfSide + halfMiddleHeight), 0);\n        bottomLayer.rotate(DEG_30_RADIANS, 0, 0, 1);\n        pieces = [topLayer, bottomLayer];\n        const m = this.square1Middle(FRONT_COLOR, RIGHT_COLOR, BACK_COLOR, middleRotated);\n        this.faces = {\n            top: topLayer,\n            bottom: bottomLayer,\n        };\n        pieces.push(m);\n        return pieces;\n    }\n}\n","import { ROTATION_VECTOR, FRONT_COLOR, LEFT_COLOR, BACK_COLOR, RIGHT_COLOR, SOLVED_TOP_PIECES, SOLVED_BOTTOM_PIECES, } from \"./constants\";\nimport { Square1Builder } from \"./interface\";\nimport { DEG_30_RADIANS } from \"./../../math/constants\";\nimport { Geometry } from \"./../../geometry/geometry\";\nimport { Face } from \"./../../geometry/face\";\nimport { Group } from \"../../geometry/group\";\nimport { Vector3 } from \"../../math/vector\";\nconst INNER_FACE_COLOR = { value: \"#333\", stroke: \"#333\" };\nexport class Square1 extends Square1Builder {\n    constructor(topLayer = SOLVED_TOP_PIECES, bottomLayer = SOLVED_BOTTOM_PIECES, middleRotated = false, sideLength = 1.25) {\n        super(topLayer, bottomLayer, middleRotated, sideLength);\n    }\n    square1Corner(top, side1, side2) {\n        const points = [\n            // Top\n            Vector3.fromValues(0, 0, this.halfSide),\n            Vector3.fromValues(this.halfSide, this.halfEdgePiece, this.halfSide),\n            Vector3.fromValues(this.halfSide, this.halfSide, this.halfSide),\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, this.halfSide),\n            // Bottom\n            Vector3.fromValues(0, 0, this.halfSide - this.layerWidth),\n            Vector3.fromValues(this.halfSide, this.halfEdgePiece, this.halfSide - this.layerWidth),\n            Vector3.fromValues(this.halfSide, this.halfSide, this.halfSide - this.layerWidth),\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, this.halfSide - this.layerWidth),\n        ];\n        const faces = [\n            new Face([0, 1, 2, 3], points, top),\n            // TODO: the faces commented out here are the underside of the pieces so\n            // they show gray when the cube is scrambled. But they are overlapping sometimes\n            // with outward sticker faces. removing them for now, but it'd be nice to\n            // fix this.\n            new Face([4, 5, 6, 7], points, INNER_FACE_COLOR),\n            new Face([0, 1, 5, 4], points, INNER_FACE_COLOR),\n            new Face([2, 3, 7, 6], points, side1),\n            new Face([1, 2, 6, 5], points, side2),\n            new Face([0, 3, 7, 4], points, INNER_FACE_COLOR),\n        ];\n        const innerCentroid = Vector3.fromValues(this.halfSide / 2, this.halfSide / 2, this.halfSide / 2);\n        faces[1].centroid = innerCentroid;\n        faces[2].centroid = innerCentroid;\n        faces[5].centroid = innerCentroid;\n        return new Geometry(points, faces);\n    }\n    square1Edge(top, side) {\n        const points = [\n            // Top\n            Vector3.fromValues(0, 0, this.halfSide).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, this.halfSide).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n            Vector3.fromValues(-this.halfEdgePiece, this.halfSide, this.halfSide).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n            // Bottom\n            Vector3.fromValues(0, 0, this.halfSide - this.layerWidth).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, this.halfSide - this.layerWidth).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n            Vector3.fromValues(-this.halfEdgePiece, this.halfSide, this.halfSide - this.layerWidth).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS),\n        ];\n        const faces = [\n            new Face([0, 1, 2], points, top),\n            new Face([3, 4, 5], points, INNER_FACE_COLOR),\n            new Face([1, 2, 5, 4], points, side),\n            new Face([0, 1, 4, 3], points, INNER_FACE_COLOR),\n            new Face([0, 2, 5, 3], points, INNER_FACE_COLOR),\n        ];\n        const innerFaceCentroid = Vector3.fromValues(0, this.halfSide / 2, this.halfSide / 2).rotateZ(Vector3.fromValues(0, 0, 0), DEG_30_RADIANS);\n        // Override centroid to avoid drawing over outside stickers\n        faces[1].centroid = innerFaceCentroid;\n        faces[3].centroid = innerFaceCentroid;\n        faces[4].centroid = innerFaceCentroid;\n        return new Geometry(points, faces);\n    }\n    square1Middle(front, side, back) {\n        const vertices = [\n            Vector3.fromValues(-this.halfSide, -this.halfSide, this.halfMiddleWidth),\n            Vector3.fromValues(-this.halfSide, this.halfSide, this.halfMiddleWidth),\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, this.halfMiddleWidth),\n            Vector3.fromValues(-this.halfEdgePiece, -this.halfSide, this.halfMiddleWidth),\n            Vector3.fromValues(-this.halfSide, -this.halfSide, -this.halfMiddleWidth),\n            Vector3.fromValues(-this.halfSide, this.halfSide, -this.halfMiddleWidth),\n            Vector3.fromValues(this.halfEdgePiece, this.halfSide, -this.halfMiddleWidth),\n            Vector3.fromValues(-this.halfEdgePiece, -this.halfSide, -this.halfMiddleWidth),\n        ];\n        const faces = [\n            new Face([0, 1, 2, 3], vertices, { value: \"#333\" }),\n            new Face([4, 5, 6, 7], vertices, { value: \"#333\" }),\n            new Face([0, 1, 5, 4], vertices, side),\n            new Face([1, 2, 6, 5], vertices, back),\n            // new Face([2, 3, 7, 6], vertices, { value: \"#333\" }),\n            new Face([0, 3, 7, 4], vertices, front),\n        ];\n        const innerFaceCentroid = Vector3.fromValues(-this.halfSide / 2, 0, 0);\n        // Override centroid to avoid drawing over outside stickers\n        faces[0].centroid = innerFaceCentroid;\n        faces[1].centroid = innerFaceCentroid;\n        faces[2].centroid = Vector3.fromValues(-(this.halfSide + this.halfSide * 0.45), 0, 0);\n        return new Geometry(vertices, faces);\n    }\n    buildSquare1(top, bottom, middleRotated) {\n        const topLayer = new Group(this.makeLayer(top));\n        const bottomLayer = new Group(this.makeLayer(bottom));\n        bottomLayer.rotate(Math.PI, 1, 0, 0);\n        bottomLayer.rotate(DEG_30_RADIANS, 0, 0, 1);\n        const pieces = [topLayer, bottomLayer];\n        const m1 = this.square1Middle(FRONT_COLOR, LEFT_COLOR, BACK_COLOR);\n        const m2 = this.square1Middle(BACK_COLOR, RIGHT_COLOR, FRONT_COLOR);\n        m2.rotate(Math.PI, 0, 0, 1);\n        if (middleRotated) {\n            m2.rotate(Math.PI, ROTATION_VECTOR.x, ROTATION_VECTOR.y, ROTATION_VECTOR.z);\n        }\n        pieces.push(m1);\n        pieces.push(m2);\n        this.faces = {\n            top: topLayer,\n            bottom: bottomLayer,\n        };\n        return pieces;\n    }\n}\n","import { Geometry } from \"./geometry\";\nimport { Face } from \"./face\";\nimport { Vector3 } from \"../math/vector\";\nexport class Plane extends Geometry {\n    constructor(width, height, color) {\n        let vertices = [\n            Vector3.fromValues(0, 0, 0),\n            Vector3.fromValues(width, 0, 0),\n            Vector3.fromValues(width, -height, 0),\n            Vector3.fromValues(0, -height, 0),\n        ];\n        let faces = [new Face([0, 1, 2, 3], vertices, color)];\n        super(vertices, faces);\n    }\n}\n","import { Geometry } from \"./geometry\";\nimport { Face } from \"./face\";\nimport { SQRT_3 } from \"../math/constants\";\nimport { Vector3 } from \"../math/vector\";\nexport class Triangle extends Geometry {\n    constructor(a, b, c, color) {\n        let verticies = [a, b, c];\n        let faces = [new Face([0, 1, 2], verticies, color)];\n        super(verticies, faces);\n    }\n}\nexport class EquilateralTriangle extends Triangle {\n    constructor(base, color) {\n        let height = base * (SQRT_3 / 2);\n        super(Vector3.fromValues(0, 0, 0), Vector3.fromValues(base / 2, height, 0), Vector3.fromValues(base, 0, 0), color);\n    }\n}\n","import { RED, YELLOW, BLUE, ORANGE, GREEN, WHITE, BLACK } from \"./colors\";\nimport { Group } from \"../geometry/group\";\nimport { Plane } from \"../geometry/plane\";\nimport { Triangle } from \"../geometry/triangle\";\nimport { Vector3 } from \"../math/vector\";\nexport class SkewbNet {\n    constructor() {\n        const cubeWidth = 1;\n        const centerWidth = Math.sqrt(Math.pow(cubeWidth / 2, 2) * 2);\n        const orange = new Group(this.makeStickers(ORANGE, centerWidth, Vector3.fromValues(-cubeWidth, 0, 0)));\n        const green = new Group(this.makeStickers(GREEN, centerWidth, Vector3.fromValues(2 * cubeWidth, 0, 0)));\n        const white = new Group(this.makeStickers(WHITE, centerWidth, Vector3.fromValues(0, -cubeWidth, 0)));\n        const red = new Group(this.makeStickers(RED, centerWidth, Vector3.fromValues(cubeWidth, 0, 0)));\n        const yellow = new Group(this.makeStickers(YELLOW, centerWidth, Vector3.fromValues(0, cubeWidth, 0)));\n        const blue = new Group(this.makeStickers(BLUE, centerWidth, Vector3.fromValues(0, 0, 0)));\n        this.U = yellow;\n        this.R = red;\n        this.F = blue;\n        this.L = orange;\n        this.B = green;\n        this.D = white;\n        this.faces = {\n            top: this.U,\n            front: this.F,\n            right: this.R,\n            back: this.B,\n            left: this.L,\n            bottom: this.D,\n        };\n        this.stickers = [red, yellow, blue, orange, green, white];\n        this.group = new Group(this.stickers);\n        this.group.translate(-cubeWidth / 4, 0, 0);\n        this.group.scale(0.5, 0.5, 0.5);\n    }\n    makeStickers(color, width, translate) {\n        const center = new Plane(width, width, color);\n        center.translate(translate.x, translate.y, translate.z);\n        center.rotate(Math.PI / 4, 0, 0, 1);\n        center.translate(-width / 2, width / 2, 0);\n        const triangles = [];\n        for (let i = 0; i < 4; i++) {\n            const triangle = new Triangle(Vector3.fromValues(-width / 2, width / 2, 0), Vector3.fromValues(0, width, 0), Vector3.fromValues(width / 2, width / 2, 0), color);\n            triangle.translate(translate.x, translate.y, translate.z);\n            triangle.rotate((-Math.PI / 2) * i, 0, 0, 1);\n            triangle.rotate(Math.PI / 4, 0, 0, 1);\n            triangles.push(triangle);\n        }\n        return [center, ...triangles];\n    }\n    setColors(colors) {\n        let { top, right, front, bottom, left, back } = colors;\n        this.setFaceColors(this.U, top);\n        this.setFaceColors(this.R, right);\n        this.setFaceColors(this.F, front);\n        this.setFaceColors(this.D, bottom);\n        this.setFaceColors(this.L, left);\n        this.setFaceColors(this.B, back);\n    }\n    setFaceColors(faceStickers, colors = []) {\n        faceStickers.objects[0].faces[0].color = colors[0] || BLACK;\n        faceStickers.objects[1].faces[0].color = colors[1] || BLACK;\n        faceStickers.objects[2].faces[0].color = colors[2] || BLACK;\n        faceStickers.objects[3].faces[0].color = colors[4] || BLACK; // Setting 3 -> 4 and 4 -> 3 now because 4 and 3 are stored incorrectly in this class.\n        faceStickers.objects[4].faces[0].color = colors[3] || BLACK;\n    }\n}\n","import { RED, YELLOW, BLUE, ORANGE, GREEN, WHITE, BLACK } from \"./colors\";\nimport { Group } from \"../geometry/group\";\nimport { Plane } from \"../geometry/plane\";\nimport { Triangle } from \"../geometry/triangle\";\nimport { Vector3 } from \"../math/vector\";\nexport class Skewb {\n    constructor() {\n        const cubeWidth = 1.25;\n        const centerWidth = Math.sqrt(Math.pow(cubeWidth / 2, 2) * 2);\n        const halfWidth = cubeWidth / 2;\n        const red = new Group(this.makeStickers(RED, centerWidth));\n        const yellow = new Group(this.makeStickers(YELLOW, centerWidth, Vector3.fromValues(1, 0, 0)));\n        const blue = new Group(this.makeStickers(BLUE, centerWidth, Vector3.fromValues(0, 1, 0)));\n        const orange = new Group(this.makeStickers(ORANGE, centerWidth));\n        const green = new Group(this.makeStickers(GREEN, centerWidth, Vector3.fromValues(0, 1, 0)));\n        const white = new Group(this.makeStickers(WHITE, centerWidth, Vector3.fromValues(1, 0, 0)));\n        this.U = yellow;\n        this.R = red;\n        this.F = blue;\n        this.L = orange;\n        this.B = green;\n        this.D = white;\n        this.faces = {\n            top: this.U,\n            front: this.F,\n            right: this.R,\n            back: this.B,\n            left: this.L,\n            bottom: this.D,\n        };\n        red.translate(0, 0, halfWidth);\n        red.rotate(Math.PI, 1, 0, 0);\n        red.rotate(Math.PI / 2, 0, 0, 1);\n        orange.rotate(-Math.PI / 2, 0, 0, 1);\n        orange.translate(0, 0, -halfWidth);\n        blue.rotate(-Math.PI / 2, 1, 0, 0);\n        blue.translate(-halfWidth, 0, 0);\n        green.translate(halfWidth, 0, 0);\n        green.rotate(Math.PI, 0, 1, 0);\n        green.rotate(-Math.PI / 2, 1, 0, 0);\n        yellow.rotate(Math.PI, 0, 1, 0);\n        yellow.translate(0, halfWidth, 0);\n        white.translate(0, -halfWidth, 0);\n        white.rotate(Math.PI, 1, 0, 0);\n        this.stickers = [red, yellow, blue, orange, green, white];\n        this.group = new Group(this.stickers);\n    }\n    makeStickers(color, width, axis) {\n        const center = new Plane(width, width, color);\n        if (axis) {\n            center.rotate(Math.PI / 2, axis.x, axis.y, axis.z);\n        }\n        center.rotate(Math.PI / 4, 0, 0, 1);\n        center.translate(-width / 2, width / 2, 0);\n        const triangles = [];\n        for (let i = 0; i < 4; i++) {\n            const triangle = new Triangle(Vector3.fromValues(-width / 2, width / 2, 0), Vector3.fromValues(0, width, 0), Vector3.fromValues(width / 2, width / 2, 0), color);\n            if (axis) {\n                triangle.rotate(Math.PI / 2, axis.x, axis.y, axis.z);\n            }\n            triangle.rotate((Math.PI / 2) * i, 0, 0, 1);\n            triangle.rotate(Math.PI / 4, 0, 0, 1);\n            triangles.push(triangle);\n        }\n        return [center, ...triangles];\n    }\n    setColors(colors) {\n        let { top, right, front, bottom, left, back } = colors;\n        this.setFaceColors(this.U, top);\n        this.setFaceColors(this.R, right);\n        this.setFaceColors(this.F, front);\n        this.setFaceColors(this.D, bottom);\n        this.setFaceColors(this.L, left);\n        this.setFaceColors(this.B, back);\n    }\n    setFaceColors(faceStickers, colors = []) {\n        faceStickers.objects[0].faces[0].color = colors[0] || BLACK;\n        faceStickers.objects[1].faces[0].color = colors[1] || BLACK;\n        faceStickers.objects[2].faces[0].color = colors[2] || BLACK;\n        faceStickers.objects[3].faces[0].color = colors[4] || BLACK; // Setting 3 -> 4 and 4 -> 3 now because 4 and 3 are stored incorrectly in this class.\n        faceStickers.objects[4].faces[0].color = colors[3] || BLACK;\n    }\n}\n","import { Face } from \"./face\";\nimport { Geometry } from \"./geometry\";\nimport { SQRT_3 } from \"../math/constants\";\nimport { Vector3 } from \"../math/vector\";\n/**\n * Geometry to build a triangle lattice for the\n * pyraminx puzzle\n */\nexport class TriangleLattice extends Geometry {\n    constructor(base, size, color) {\n        const halfBase = base / 2;\n        const fullHeight = base * (SQRT_3 / 2);\n        const triangleBase = base / size;\n        const triangleHeight = fullHeight / size;\n        const inradius = fullHeight / 3;\n        let vertices = [];\n        let faces = [];\n        /**\n         * Builds one layer of verticies at a time\n         * for each layer after the first it constructs\n         * faces for the triangles (0,1,4), (1,2,5) etc...\n         *\n         *       9\n         *     7   8\n         *   4   5   6\n         * 0   1   2   3\n         */\n        let index = 0;\n        for (let layer = 0; layer <= size; layer++) {\n            for (let vertex = 0, count = size - layer; vertex <= count; vertex++) {\n                const horizontalOffset = -halfBase;\n                const verticalOffset = -inradius;\n                const x = triangleBase * vertex + (layer * triangleBase) / 2 + horizontalOffset;\n                const y = triangleHeight * layer + verticalOffset;\n                vertices.push(Vector3.fromValues(x, y, 0));\n                if (layer > 0) {\n                    // down triangle\n                    if (vertex > 0) {\n                        faces.push(new Face([index, index - 1, index - count - 2], null, color));\n                    }\n                    // up triangle\n                    faces.push(new Face([index, index - count - 2, index - count - 1], null, color));\n                }\n                index++;\n            }\n        }\n        faces.forEach((face) => face.calculateCentroid(vertices));\n        super(vertices, faces);\n    }\n}\n","import { GREEN, RED, BLUE, YELLOW, BLACK } from \"./colors\";\nimport { TriangleLattice } from \"./../geometry/triangleLattice\";\nimport { Group } from \"./../geometry/group\";\nimport { SQRT_3 } from \"../math/constants\";\nconst DEG_60_RADIANS = (60 * Math.PI) / 180;\nexport class PyraminxNet {\n    constructor(size, sideLength = 0.925) {\n        this.size = size;\n        const fullHeight = sideLength * (SQRT_3 / 2);\n        const inDiameter = fullHeight / 1.5;\n        const faceSpacing = inDiameter * 0.1;\n        const U = new TriangleLattice(sideLength, size, YELLOW);\n        const R = new TriangleLattice(sideLength, size, GREEN);\n        const L = new TriangleLattice(sideLength, size, BLUE);\n        const B = new TriangleLattice(sideLength, size, RED);\n        this.L = L;\n        this.R = R;\n        this.U = U;\n        this.B = B;\n        R.rotate(-DEG_60_RADIANS, 0, 0, 1);\n        R.translate(0, inDiameter + faceSpacing, 0);\n        R.rotate(2 * DEG_60_RADIANS, 0, 0, 1);\n        U.rotate(DEG_60_RADIANS, 0, 0, 1);\n        U.translate(0, inDiameter + faceSpacing, 0);\n        U.rotate(-2 * DEG_60_RADIANS, 0, 0, 1);\n        B.rotate(3 * DEG_60_RADIANS, 0, 0, 1);\n        B.translate(0, inDiameter + faceSpacing, 0);\n        B.rotate(-2 * DEG_60_RADIANS, 0, 0, 1);\n        this.faces = {\n            top: this.U,\n            right: this.R,\n            left: this.L,\n            back: this.B,\n        };\n        this.group = new Group([U, R, L, B]);\n    }\n    setColors(colors) {\n        let { left, right, top, back } = colors;\n        this.setFaceColors(this.L, left);\n        this.setFaceColors(this.R, right);\n        this.setFaceColors(this.U, top);\n        this.setFaceColors(this.B, back);\n    }\n    setFaceColors(lattice, colors) {\n        lattice.faces.forEach((f, i) => {\n            if (colors && colors[i]) {\n                f.color = colors[i];\n            }\n            else {\n                f.color = BLACK;\n            }\n        });\n    }\n}\n","import { GREEN, RED, BLUE, YELLOW, BLACK } from \"./colors\";\nimport { TriangleLattice } from \"./../geometry/triangleLattice\";\nimport { Group } from \"./../geometry/group\";\nconst ARC_COS_THIRD = Math.acos(1 / 3);\nconst DEG_120_RADIANS = (120 * Math.PI) / 180;\nconst SQRT_24 = Math.sqrt(24);\nexport class Pyraminx {\n    constructor(size, sideLength = 1.75) {\n        this.size = size;\n        const insphereRadius = sideLength / SQRT_24;\n        const U = new TriangleLattice(sideLength, size, YELLOW);\n        const R = new TriangleLattice(sideLength, size, GREEN);\n        const L = new TriangleLattice(sideLength, size, BLUE);\n        const B = new TriangleLattice(sideLength, size, RED);\n        this.L = L;\n        this.R = R;\n        this.U = U;\n        this.B = B;\n        U.rotate(DEG_120_RADIANS, 0, 0, 1);\n        U.rotate(ARC_COS_THIRD, 1, 0, 0);\n        U.translate(0, 0, insphereRadius);\n        R.rotate(ARC_COS_THIRD, 1, 0, 0);\n        R.translate(0, 0, insphereRadius);\n        L.rotate(-DEG_120_RADIANS, 0, 0, 1);\n        L.rotate(ARC_COS_THIRD, 1, 0, 0);\n        L.translate(0, 0, insphereRadius);\n        B.rotate(Math.PI, 0, 1, 0);\n        B.translate(0, 0, insphereRadius);\n        this.faces = {\n            top: this.U,\n            right: this.R,\n            left: this.L,\n            back: this.B,\n        };\n        this.group = new Group([U, L, R, B]);\n    }\n    setColors(colors) {\n        let { left, right, top, back } = colors;\n        this.setFaceColors(this.L, left);\n        this.setFaceColors(this.R, right);\n        this.setFaceColors(this.U, top);\n        this.setFaceColors(this.B, back);\n    }\n    setFaceColors(lattice, colors) {\n        lattice.faces.forEach((f, i) => {\n            if (colors && colors[i]) {\n                f.color = colors[i];\n            }\n            else {\n                f.color = BLACK;\n            }\n        });\n    }\n}\n","import { Face } from \"./../geometry/face\";\nimport { Geometry } from \"../geometry/geometry\";\nimport { polarToCartesian, lineSegmentLength, pentagonOutRadius, } from \"../math/utils\";\nimport { Vector2, Vector3 } from \"../math/vector\";\nexport class DividedPentagon extends Geometry {\n    /**\n     *\n     * @param color\n     * @param layers number of layers\n     * @param length length of entire edge of the outer pentagon\n     */\n    constructor(color, layers = 2, length = 1.6, layerWidth = 0.4 // TODO: calculate this somehow\n    ) {\n        const outRadius = pentagonOutRadius(length);\n        const radiusDiff = layerWidthToRadiusDiff(layerWidth);\n        const centerOutRadius = outRadius - radiusDiff * (layers - 1);\n        const vertices = faceVerticies(layers, centerOutRadius, radiusDiff, layerWidth);\n        super(vertices, makeFaces(layers, color, vertices));\n    }\n}\n/**\n * Given the the distance between two parallel sides of the\n * dividen pentagon, calculate the difference in pentagon radius\n */\nfunction layerWidthToRadiusDiff(width) {\n    const aSquared = width * width;\n    const angleRadians = (71 * Math.PI) / 180;\n    // Law of cosines\n    const cSquared = 2 * aSquared - 2 * aSquared * Math.cos(angleRadians);\n    const diff = 2 * Math.sqrt(Math.abs(aSquared - cSquared));\n    return diff;\n}\n/**\n * creates mapping for indicies in one layer to another\n * so we can build the geometry for a megaminx face\n */\nfunction downMapping(layer) {\n    if (layer < 1) {\n        return [];\n    }\n    let mapping = [];\n    const layerPoints = 5 + (layer - 1) * 10;\n    let previousPoints = 5 * (layer - 1) * (layer - 1);\n    for (let i = 0; i < layerPoints; i++) {\n        mapping.push(i + previousPoints);\n        if (i % (layerPoints / 5) === 0) {\n            mapping.push(i + previousPoints);\n        }\n    }\n    mapping.push(mapping.shift());\n    mapping.push(mapping.shift());\n    return mapping;\n}\nfunction layerVertexNumbers(layer) {\n    let previousPoints = 5 * layer * layer;\n    let vertexNumbers = [];\n    for (let i = 0, layerPoints = 5 + layer * 10; i < layerPoints; i++) {\n        vertexNumbers.push(i + previousPoints);\n    }\n    return vertexNumbers;\n}\nfunction makeFaces(layers, color, vertices) {\n    let faces = [];\n    const firstLayerFace = new Face([0, 1, 2, 3, 4], vertices, color);\n    faces.push(firstLayerFace);\n    let totalPoints = 5;\n    let currentPoint = 5;\n    for (let i = 1; i < layers; i++) {\n        const layerPoints = 5 + i * 10;\n        totalPoints += layerPoints;\n        const downMap = downMapping(i);\n        const prevLayer = layerVertexNumbers(i - 1);\n        const currentLayer = layerVertexNumbers(i);\n        while (currentPoint < totalPoints) {\n            const currentLayerPoint = currentPoint - (prevLayer[prevLayer.length - 1] + 1);\n            const f1isCorner = currentLayerPoint % (layerPoints / 5) === 0;\n            if (f1isCorner) {\n                currentPoint++;\n                continue;\n            }\n            const f2isCorner = (currentLayerPoint + 1) % (layerPoints / 5) === 0;\n            let f1 = currentPoint;\n            let f2 = currentLayer[(currentLayerPoint + 1) % currentLayer.length];\n            let f3 = f2isCorner ? f2 + 1 : downMap.shift();\n            let f4 = f2isCorner\n                ? downMap.shift()\n                : prevLayer[(prevLayer.indexOf(f3) - 1 + prevLayer.length) % prevLayer.length];\n            currentPoint++;\n            faces.push(new Face([f1, f2, f3, f4], vertices, color));\n        }\n    }\n    return faces;\n}\n/**\n * Takes two points and extrapolates points along the line they make\n *\n * @param p1 point 1\n * @param p2 point 2\n * @param segments how many points to extrapolate from each direction p1 -> p2 and p2 -> p1\n */\nfunction segmentPoints(p1, p2, segments, layerWidth) {\n    if (segments === 0) {\n        return [\n            Vector3.fromValues(p1.x, p1.y, 0),\n            Vector3.fromValues(p2.x, p2.y, 0),\n        ];\n    }\n    const length = lineSegmentLength(p1, p2);\n    let points = [];\n    for (let i = segments; i > 0; i--) {\n        // extrapolate from p1.v\n        let a = Vector3.fromValues(p1.x + ((p2.x - p1.x) / length) * layerWidth * i, p1.y + ((p2.y - p1.y) / length) * layerWidth * i, 0);\n        points.unshift(a);\n        // extrapolate from p2.v\n        let b = Vector3.fromValues(p2.x + ((p1.x - p2.x) / length) * layerWidth * i, p2.y + ((p1.y - p2.y) / length) * layerWidth * i, 0);\n        points.push(b);\n    }\n    points.unshift(Vector3.fromValues(p1.x, p1.y, 0));\n    points.push(Vector3.fromValues(p2.x, p2.y, 0));\n    return points;\n}\nfunction layerVerticies(layer, radius, layerWidth) {\n    let verticies = [];\n    for (let i = 0; i < 5; i++) {\n        const theta = (i * (2 * Math.PI)) / 5 - Math.PI / 10;\n        const v = polarToCartesian(radius, theta);\n        if (verticies.length > 0) {\n            const lastPoint = verticies[verticies.length - 1];\n            const points = segmentPoints(Vector2.fromValues(lastPoint.x, lastPoint.y), v, layer, layerWidth);\n            points.shift(); // Remove the first, otherwise it's duplicated\n            verticies = verticies.concat(points);\n        }\n        else {\n            verticies.push(Vector3.fromValues(v.x, v.y, 0));\n        }\n    }\n    // Insert segments for last and first\n    const first = verticies[0];\n    const last = verticies[verticies.length - 1];\n    const points = segmentPoints(Vector2.fromValues(last.x, last.y), Vector2.fromValues(first.x, first.y), layer, layerWidth);\n    points.pop();\n    points.shift();\n    verticies = verticies.concat(points);\n    return verticies;\n}\nfunction faceVerticies(layers, radius, radiusDiff, layerWidth) {\n    let verticies = [];\n    for (let i = 0; i < layers; i++) {\n        const r = radius + radiusDiff * i;\n        verticies = [...verticies, ...layerVerticies(i, r, layerWidth)];\n    }\n    return verticies;\n}\n","import { WHITE, RED, GREEN, PURPLE, YELLOW, BLUE, GREY, DARK_BLUE, LIGHT_YELLOW, PINK, LIGHT_GREEN, ORANGE, BLACK, } from \"./colors\";\nimport { Group } from \"./../geometry/group\";\nimport { DividedPentagon } from \"./../geometry/dividedPentagon\";\nimport { pentagonInRadius } from \"../math/utils\";\nimport { chunkArray } from \"../utils/arrays\";\nimport { Matrix4 } from \"../math/matrix\";\nconst DEG_36_RADIANS = (36 * Math.PI) / 180;\nconst DEG_72_RADIANS = (72 * Math.PI) / 180;\n/**\n * for a megaminx with side length 1,\n * layer widths that look good.\n */\nconst OPTIMAL_LAYER_WIDTH = {\n    2: 0.3,\n    3: 0.17,\n    4: 0.121,\n};\nfunction getLayerWidth(length, layers) {\n    return OPTIMAL_LAYER_WIDTH[layers] || length / (layers * 1.9);\n}\nexport class MegaminxNet {\n    constructor(layers) {\n        this.layers = layers;\n        const sideLength = 0.75;\n        const layerWidth = getLayerWidth(length, layers);\n        // Left\n        this.U = new DividedPentagon(WHITE, layers, sideLength, layerWidth);\n        this.F = new DividedPentagon(RED, layers, sideLength, layerWidth);\n        this.R = new DividedPentagon(BLUE, layers, sideLength, layerWidth);\n        this.L = new DividedPentagon(GREEN, layers, sideLength, layerWidth);\n        this.dl = new DividedPentagon(LIGHT_YELLOW, layers, sideLength, layerWidth);\n        this.dr = new DividedPentagon(PINK, layers, sideLength, layerWidth);\n        // Right\n        this.BL = new DividedPentagon(PURPLE, layers, sideLength, layerWidth);\n        this.BR = new DividedPentagon(YELLOW, layers, sideLength, layerWidth);\n        this.d = new DividedPentagon(GREY, layers, sideLength, layerWidth);\n        this.bl = new DividedPentagon(DARK_BLUE, layers, sideLength, layerWidth);\n        this.br = new DividedPentagon(LIGHT_GREEN, layers, sideLength, layerWidth);\n        this.b = new DividedPentagon(ORANGE, layers, sideLength, layerWidth);\n        const ind = 2 * pentagonInRadius(sideLength);\n        // Left\n        this.U.translate(0, ind, 0);\n        this.U.rotate(5 * DEG_36_RADIANS, 0, 0, 1);\n        this.R.rotate(-DEG_72_RADIANS, 0, 0, 1);\n        this.R.translate(0, ind, 0);\n        this.R.rotate(5 * DEG_36_RADIANS, 0, 0, 1);\n        this.L.rotate(DEG_72_RADIANS, 0, 0, 1);\n        this.L.translate(0, ind, 0);\n        this.L.rotate(-5 * DEG_36_RADIANS, 0, 0, 1);\n        this.dl.rotate(2 * DEG_72_RADIANS, 0, 0, 1);\n        this.dl.translate(0, ind, 0);\n        this.dl.rotate(-5 * DEG_36_RADIANS, 0, 0, 1);\n        this.dr.rotate(-2 * DEG_72_RADIANS, 0, 0, 1);\n        this.dr.translate(0, ind, 0);\n        this.dr.rotate(-5 * DEG_36_RADIANS, 0, 0, 1);\n        // Right\n        this.b.rotate(Math.PI, 0, 0, 1);\n        this.b.rotate(-2 * DEG_36_RADIANS, 0, 0, 1);\n        this.d.rotate(3 * DEG_36_RADIANS, 0, 0, 1);\n        this.d.translate(0, ind, 0);\n        this.d.rotate(5 * DEG_36_RADIANS, 0, 0, 1);\n        this.br.rotate(DEG_36_RADIANS, 0, 0, 1);\n        this.br.translate(0, ind, 0);\n        this.br.rotate(5 * DEG_36_RADIANS, 0, 0, 1);\n        this.BR.rotate(-DEG_36_RADIANS, 0, 0, 1);\n        this.BR.translate(0, ind, 0);\n        this.BR.rotate(-5 * DEG_36_RADIANS, 0, 0, 1);\n        this.BL.rotate(-3 * DEG_36_RADIANS, 0, 0, 1);\n        this.BL.translate(0, ind, 0);\n        this.BL.rotate(5 * DEG_36_RADIANS, 0, 0, 1);\n        this.bl.rotate(5 * DEG_36_RADIANS, 0, 0, 1);\n        this.bl.translate(0, ind, 0);\n        this.bl.rotate(-5 * DEG_36_RADIANS, 0, 0, 1);\n        let bottomTransforms = new Matrix4();\n        bottomTransforms.rotate(-DEG_72_RADIANS, 0, 0, 1);\n        bottomTransforms.translate(0, 2 * ind, 0);\n        bottomTransforms.rotate(2 * DEG_72_RADIANS, 0, 0, 1);\n        bottomTransforms.translate(0, -ind, 0);\n        [this.d, this.bl, this.BL, this.BR, this.br, this.b].forEach((face) => {\n            Matrix4.multiply(face.matrix, bottomTransforms, face.matrix);\n        });\n        this.faces = {\n            U: this.U,\n            F: this.F,\n            R: this.R,\n            dr: this.dr,\n            dl: this.dl,\n            L: this.L,\n            d: this.d,\n            br: this.br,\n            BR: this.BR,\n            BL: this.BL,\n            bl: this.bl,\n            b: this.b,\n        };\n        this.group = new Group([\n            this.U,\n            this.F,\n            this.L,\n            this.dr,\n            this.dl,\n            this.R,\n            this.d,\n            this.bl,\n            this.BL,\n            this.BR,\n            this.br,\n            this.b,\n        ]);\n        this.group.scale(0.33, 0.33, 0.33);\n        this.group.translate(-1.75 * sideLength, 0, 0);\n    }\n    setColors(colors) {\n        let { U, R, F, d, L, b, dr, dl, br, BR, BL, bl } = colors;\n        this.setFaceColors(this.U, U);\n        this.setFaceColors(this.R, R);\n        this.setFaceColors(this.F, F);\n        this.setFaceColors(this.d, d);\n        this.setFaceColors(this.L, L);\n        this.setFaceColors(this.b, b);\n        this.setFaceColors(this.dr, dr);\n        this.setFaceColors(this.dl, dl);\n        this.setFaceColors(this.BR, BR);\n        this.setFaceColors(this.BL, BL);\n        this.setFaceColors(this.bl, bl);\n        this.setFaceColors(this.br, br);\n    }\n    oldSetColors(colors) {\n        const n = this.layers;\n        const numStickers = 5 * n * n - 5 * n + 1;\n        let [U, R, F, dr, dl, L, d, br, BR, BL, bl, b] = chunkArray(colors, numStickers);\n        this.setFaceColors(this.U, U);\n        this.setFaceColors(this.R, R);\n        this.setFaceColors(this.F, F);\n        this.setFaceColors(this.d, d);\n        this.setFaceColors(this.L, L);\n        this.setFaceColors(this.b, b);\n        this.setFaceColors(this.dr, dr);\n        this.setFaceColors(this.dl, dl);\n        this.setFaceColors(this.br, br);\n        this.setFaceColors(this.BR, BR);\n        this.setFaceColors(this.BL, BL);\n        this.setFaceColors(this.bl, bl);\n    }\n    setFaceColors(faceStickers, colors) {\n        faceStickers.faces.forEach((f, i) => {\n            if (colors && colors[i]) {\n                f.color = colors[i];\n            }\n            else {\n                f.color = BLACK;\n            }\n        });\n    }\n}\n","import { WHITE, RED, GREEN, YELLOW, BLUE, ORANGE, LIGHT_GREEN, PINK, LIGHT_YELLOW, DARK_BLUE, GREY, PURPLE, BLACK, } from \"./colors\";\nimport { Group } from \"./../geometry/group\";\nimport { DividedPentagon } from \"../geometry/dividedPentagon\";\nimport { dodecahedronInRadius } from \"../math/utils\";\nconst OPTIMAL_LAYER_WIDTH = {\n    2: 0.3,\n    3: 0.17,\n    4: 0.121,\n};\nfunction getLayerWidth(length, layers) {\n    return OPTIMAL_LAYER_WIDTH[layers] || length / (layers * 1.9);\n}\nexport class Megaminx {\n    constructor(layers = 2) {\n        this.layers = layers;\n        const length = 0.75;\n        const megaminxRadius = dodecahedronInRadius(length);\n        const layerWidth = getLayerWidth(length, layers);\n        // Front\n        this.U = new DividedPentagon(WHITE, layers, length, layerWidth);\n        this.F = new DividedPentagon(RED, layers, length, layerWidth);\n        this.R = new DividedPentagon(BLUE, layers, length, layerWidth);\n        this.dr = new DividedPentagon(PINK, layers, length, layerWidth);\n        this.dl = new DividedPentagon(LIGHT_YELLOW, layers, length, layerWidth);\n        this.L = new DividedPentagon(GREEN, layers, length, layerWidth);\n        // Back\n        this.d = new DividedPentagon(GREY, layers, length, layerWidth);\n        this.br = new DividedPentagon(LIGHT_GREEN, layers, length, layerWidth);\n        this.BR = new DividedPentagon(YELLOW, layers, length, layerWidth);\n        this.BL = new DividedPentagon(PURPLE, layers, length, layerWidth);\n        this.bl = new DividedPentagon(DARK_BLUE, layers, length, layerWidth);\n        this.b = new DividedPentagon(ORANGE, layers, length, layerWidth);\n        this.F.translate(0, 0, megaminxRadius);\n        this.b.rotate(Math.PI, 0, 0, 1);\n        this.b.rotate(Math.PI, 0, 1, 0);\n        this.b.translate(0, 0, megaminxRadius);\n        this.U.rotate(Math.PI, 0, 0, 1);\n        this.U.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\n        this.U.translate(0, 0, megaminxRadius);\n        this.L.rotate((72 * Math.PI) / 180, 0, 0, 1);\n        this.L.rotate(Math.PI, 0, 0, 1);\n        this.L.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\n        this.L.translate(0, 0, megaminxRadius);\n        this.R.rotate((72 * Math.PI) / 180, 0, 0, 1);\n        this.R.rotate(Math.PI / 5, 0, 0, 1);\n        this.R.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\n        this.R.translate(0, 0, megaminxRadius);\n        this.dr.rotate((72 * Math.PI) / 180, 0, 0, 1);\n        this.dr.rotate(-Math.PI / 5, 0, 0, 1);\n        this.dr.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\n        this.dr.translate(0, 0, megaminxRadius);\n        this.dl.rotate((72 * Math.PI) / 180, 0, 0, 1);\n        this.dl.rotate((-3 * Math.PI) / 5, 0, 0, 1);\n        this.dl.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\n        this.dl.translate(0, 0, megaminxRadius);\n        this.BL.rotate(Math.PI / 5, 0, 0, 1);\n        this.BL.rotate((-116.57 * Math.PI) / 180, 1, 0, 0);\n        this.BL.translate(0, 0, megaminxRadius);\n        this.BR.rotate(-Math.PI / 5, 0, 0, 1);\n        this.BR.rotate((-116.57 * Math.PI) / 180, 1, 0, 0);\n        this.BR.translate(0, 0, megaminxRadius);\n        this.bl.rotate((3 * Math.PI) / 5, 0, 0, 1);\n        this.bl.rotate((-116.57 * Math.PI) / 180, 1, 0, 0);\n        this.bl.translate(0, 0, megaminxRadius);\n        this.d.rotate((5 * Math.PI) / 5, 0, 0, 1);\n        this.d.rotate((-116.57 * Math.PI) / 180, 1, 0, 0);\n        this.d.translate(0, 0, megaminxRadius);\n        this.br.rotate((7 * Math.PI) / 5, 0, 0, 1);\n        this.br.rotate((-116.57 * Math.PI) / 180, 1, 0, 0);\n        this.br.translate(0, 0, megaminxRadius);\n        this.stickers = [\n            this.U,\n            this.F,\n            this.R,\n            this.dr,\n            this.dl,\n            this.L,\n            this.d,\n            this.br,\n            this.BR,\n            this.BL,\n            this.bl,\n            this.b,\n        ];\n        this.faces = {\n            U: this.U,\n            F: this.F,\n            R: this.R,\n            dr: this.dr,\n            dl: this.dl,\n            L: this.L,\n            d: this.d,\n            br: this.br,\n            BR: this.BR,\n            BL: this.BL,\n            bl: this.bl,\n            b: this.b,\n        };\n        this.group = new Group(this.stickers);\n    }\n    setColors(colors) {\n        let { U, R, F, d, L, b, dr, dl, br, BR, BL, bl } = colors;\n        this.setFaceColors(this.U, U);\n        this.setFaceColors(this.R, R);\n        this.setFaceColors(this.F, F);\n        this.setFaceColors(this.d, d);\n        this.setFaceColors(this.L, L);\n        this.setFaceColors(this.b, b);\n        this.setFaceColors(this.dr, dr);\n        this.setFaceColors(this.dl, dl);\n        this.setFaceColors(this.BR, BR);\n        this.setFaceColors(this.BL, BL);\n        this.setFaceColors(this.bl, bl);\n        this.setFaceColors(this.br, br);\n    }\n    setFaceColors(faceStickers, colors) {\n        faceStickers.faces.forEach((f, i) => {\n            if (colors && colors[i]) {\n                f.color = colors[i];\n            }\n            else {\n                f.color = BLACK;\n            }\n        });\n    }\n}\n","import { Face } from \"./face\";\nimport { Geometry } from \"./geometry\";\nimport { Vector3 } from \"../math/vector\";\n/**\n * Makes a (size*size) grid of colored planes for the\n * rubiks cube stickers. Indexed from the top\n * left to bottom right. See Below\n *\n * ```\n *    0 1 2\n *    3 4 5\n *    6 7 8\n * ```\n *\n * @param length length of the grid\n * @param size number of elements to segment grid into\n * @param color\n */\nexport function makeGrid(length, size, color) {\n    const halfLength = length / 2;\n    const elementWidth = length / size;\n    const halfElementWidth = elementWidth / 2;\n    let stickers = [];\n    for (let i = 0; i < size; i++) {\n        let vOffset = -(-halfLength + halfElementWidth + elementWidth * i);\n        stickers = stickers.concat(makeRow(length, size, color, vOffset));\n    }\n    return stickers;\n}\n/**\n * Makes a row of planes for the rubiks cube stickers.\n * indexed from left to right\n *\n *     0 1 2\n *\n * @param length length of the row horizontally\n * @param size number of elements to segment row into\n * @param color color\n * @param vOffset vertical offset. places vertices of row vertically offset by this amount from x axis\n */\nexport function makeRow(length, size, color, vOffset = 0) {\n    const halfLength = length / 2;\n    const elementWidth = length / size;\n    const halfElementWidth = elementWidth / 2;\n    let stickers = [];\n    for (let i = 0; i < size; i++) {\n        let hOffset = -halfLength + halfElementWidth + elementWidth * i;\n        let vertices = [\n            Vector3.fromValues(-halfElementWidth + hOffset, halfElementWidth + vOffset, 0),\n            Vector3.fromValues(halfElementWidth + hOffset, halfElementWidth + vOffset, 0),\n            Vector3.fromValues(halfElementWidth + hOffset, -halfElementWidth + vOffset, 0),\n            Vector3.fromValues(-halfElementWidth + hOffset, -halfElementWidth + vOffset, 0),\n        ];\n        let faces = [new Face([0, 1, 2, 3], vertices, color)];\n        stickers.push(new Geometry(vertices, faces));\n    }\n    return stickers;\n}\n","import { YELLOW, RED, BLUE, GREEN, ORANGE, BLACK } from \"./../colors\";\nimport { Group } from \"./../../geometry/group\";\nimport { makeGrid, makeRow } from \"./../../geometry/grid\";\nimport { calculateCentroid } from \"../../math/utils\";\nimport { Vector3 } from \"../../math/vector\";\nexport class RubiksCubeTopLayer {\n    constructor(size, rotationAngle = Math.PI / 4) {\n        this.size = size;\n        this.cubeWidth = 1.45;\n        this.halfCubeWidth = this.cubeWidth / 2;\n        this.stickerWidth = this.cubeWidth / size;\n        this.halfStickerWidth = this.stickerWidth / 2;\n        this.cubeWidth = this.stickerWidth * size;\n        this.U = new Group(makeGrid(this.cubeWidth, this.size, YELLOW));\n        this.R = new Group(makeRow(this.cubeWidth, this.size, RED));\n        this.F = new Group(makeRow(this.cubeWidth, this.size, BLUE));\n        this.B = new Group(makeRow(this.cubeWidth, this.size, GREEN));\n        this.L = new Group(makeRow(this.cubeWidth, this.size, ORANGE));\n        const borderOffset = this.halfCubeWidth + this.halfStickerWidth;\n        this.B.translate(0, borderOffset, 0);\n        this.B.rotate(Math.PI, 0, 0, 1);\n        this.F.translate(0, -borderOffset, 0);\n        this.R.translate(borderOffset, 0, 0);\n        this.R.rotate(Math.PI / 2, 0, 0, 1);\n        this.L.translate(-borderOffset, 0, 0);\n        this.L.rotate(-Math.PI / 2, 0, 0, 1);\n        this.rotateBorder(this.F.objects, rotationAngle);\n        this.rotateBorder(this.R.objects, rotationAngle);\n        this.rotateBorder(this.B.objects, rotationAngle);\n        this.rotateBorder(this.L.objects, rotationAngle);\n        this.stickers = [this.U, this.R, this.F, this.B, this.L];\n        this.group = new Group(this.stickers);\n        this.faces = {\n            U: this.U,\n            R: this.R,\n            F: this.F,\n            L: this.L,\n            B: this.B,\n        };\n    }\n    setFaceColors(faceStickers, colors) {\n        faceStickers.objects.forEach((g, i) => {\n            if (colors && colors[i]) {\n                g.faces[0].color = colors[i];\n            }\n            else {\n                g.faces[0].color = BLACK;\n            }\n        });\n    }\n    setColors(colors) {\n        let { U, R, F, L, B } = colors;\n        this.setFaceColors(this.U, U);\n        this.setFaceColors(this.R, R);\n        this.setFaceColors(this.F, F);\n        this.setFaceColors(this.L, L);\n        this.setFaceColors(this.B, B);\n    }\n    /**\n     * given a row of stickers centered at 0,0,0\n     * rotates each vertex of each sticker around\n     * the top of the sticker.\n     */\n    rotateBorder(stickers, radians) {\n        stickers.forEach((sticker) => {\n            sticker.vertices = sticker.vertices.map((vertex) => {\n                return vertex.rotateX(Vector3.fromValues(0, this.halfStickerWidth, 0), radians);\n            });\n            sticker.centroid = calculateCentroid(sticker.vertices);\n        });\n    }\n}\n","import { YELLOW, RED, BLUE, WHITE, ORANGE, GREEN, BLACK } from \"./../colors\";\nimport { Group } from \"./../../geometry/group\";\nimport { makeGrid } from \"../../geometry/grid\";\nexport class RubiksCubeNet {\n    constructor(size) {\n        const cubeWidth = 1;\n        this.size = size;\n        const U = makeGrid(cubeWidth, size, YELLOW);\n        const R = makeGrid(cubeWidth, size, RED);\n        const F = makeGrid(cubeWidth, size, BLUE);\n        const D = makeGrid(cubeWidth, size, WHITE);\n        const L = makeGrid(cubeWidth, size, ORANGE);\n        const B = makeGrid(cubeWidth, size, GREEN);\n        this.U = new Group(U);\n        this.U.translate(0, cubeWidth, 0);\n        this.R = new Group(R);\n        this.R.translate(cubeWidth, 0, 0);\n        this.F = new Group(F);\n        this.D = new Group(D);\n        this.D.translate(0, -cubeWidth, 0);\n        this.L = new Group(L);\n        this.L.translate(-cubeWidth, 0, 0);\n        this.B = new Group(B);\n        this.B.translate(2 * cubeWidth, 0, 0);\n        this.stickers = [this.U, this.R, this.F, this.D, this.L, this.B];\n        this.faces = {\n            U: this.U,\n            R: this.R,\n            F: this.F,\n            D: this.D,\n            L: this.L,\n            B: this.B,\n        };\n        this.group = new Group(this.stickers);\n        this.group.translate(-cubeWidth / 4, 0, 0);\n        this.group.scale(0.5, 0.5, 0.5);\n    }\n    setFaceColors(faceStickers, colors) {\n        faceStickers.objects.forEach((g, i) => {\n            if (colors && colors[i]) {\n                g.faces[0].color = colors[i];\n            }\n            else {\n                g.faces[0].color = BLACK;\n            }\n        });\n    }\n    setColors(colors) {\n        let { U, R, F, D, L, B } = colors;\n        this.setFaceColors(this.U, U);\n        this.setFaceColors(this.R, R);\n        this.setFaceColors(this.F, F);\n        this.setFaceColors(this.D, D);\n        this.setFaceColors(this.L, L);\n        this.setFaceColors(this.B, B);\n    }\n}\n","import { YELLOW, RED, BLUE, WHITE, ORANGE, GREEN, BLACK } from \"./../colors\";\nimport { Group } from \"../../geometry/group\";\nimport { makeGrid } from \"../../geometry/grid\";\nexport class RubiksCube {\n    constructor(size) {\n        this.size = size;\n        const cubeWidth = 1.25;\n        const halfWidth = cubeWidth / 2;\n        this.U = new Group(makeGrid(cubeWidth, size, YELLOW));\n        this.R = new Group(makeGrid(cubeWidth, size, RED));\n        this.F = new Group(makeGrid(cubeWidth, size, BLUE));\n        this.D = new Group(makeGrid(cubeWidth, size, WHITE));\n        this.L = new Group(makeGrid(cubeWidth, size, ORANGE));\n        this.B = new Group(makeGrid(cubeWidth, size, GREEN));\n        this.U.rotate(-Math.PI / 2, 0, 1, 0);\n        this.U.rotate(-Math.PI / 2, 1, 0, 0);\n        this.U.translate(0, 0, halfWidth);\n        this.R.translate(0, 0, halfWidth);\n        this.F.rotate(-Math.PI / 2, 0, 1, 0);\n        this.F.translate(0, 0, halfWidth);\n        this.D.rotate(-Math.PI / 2, 0, 1, 0);\n        this.D.rotate(Math.PI / 2, 1, 0, 0);\n        this.D.translate(0, 0, halfWidth);\n        this.L.rotate(-Math.PI, 0, 1, 0);\n        this.L.translate(0, 0, halfWidth);\n        this.B.rotate(Math.PI / 2, 0, 1, 0);\n        this.B.translate(0, 0, halfWidth);\n        this.stickers = [this.U, this.R, this.F, this.D, this.L, this.B];\n        this.faces = {\n            U: this.U,\n            R: this.R,\n            F: this.F,\n            D: this.D,\n            L: this.L,\n            B: this.B,\n        };\n        this.group = new Group(this.stickers);\n    }\n    setFaceColors(faceStickers, colors) {\n        faceStickers.objects.forEach((g, i) => {\n            if (colors && colors[i]) {\n                g.faces[0].color = colors[i];\n            }\n            else {\n                g.faces[0].color = BLACK;\n            }\n        });\n    }\n    setColors(colors) {\n        let { U, R, F, D, L, B } = colors;\n        this.setFaceColors(this.U, U);\n        this.setFaceColors(this.R, R);\n        this.setFaceColors(this.F, F);\n        this.setFaceColors(this.D, D);\n        this.setFaceColors(this.L, L);\n        this.setFaceColors(this.B, B);\n    }\n}\n","import { calculateCentroid } from \"../math/utils\";\nimport { Object3D } from \"./object3d\";\nexport class Arrow extends Object3D {\n    constructor(p1, p2) {\n        super();\n        this.p1 = p1;\n        this.p2 = p2;\n        this.centroid = calculateCentroid([p1, p2]);\n    }\n}\n","export function applyTransformations(vertex, transforms) {\n    let v = vertex.clone();\n    transforms.forEach((m, i) => {\n        v.transformMat4(m);\n    });\n    return v;\n}\n","import { Arrow } from \"./../geometry/arrow\";\nimport { Geometry } from \"../geometry/geometry\";\nimport { Group } from \"../geometry/group\";\nimport { applyTransformations } from \"./utils\";\n/**\n * Renderer class to take scene geometry and render it to 2d\n * polygon coordinates.\n *\n * 1. Takes a scene and camera\n * 2. converts the scene 3d geometry to 2d screen geometry based on the camera\n * 3. tries to render each face in order from furthest from camera to closest\n * 4. finally, draws the lines (arrows) over top of everything\n *\n * Implementers need just implement\n *   - drawPolygon - a method that draws polygons on some 2d graphics area\n *   - drawArrow - a method that draws an arrow\n *   - onBeforeRender - do any prep work necessary before rendering a frame\n *   - onComplete - handle any final logic\n */\nexport class PolygonRenderer {\n    constructor() {\n        this.polygons = [];\n        this.arrows = [];\n    }\n    render(scene, camera) {\n        this.polygons = [];\n        scene.objects.forEach((object) => {\n            this.renderObject3D(object, camera, []);\n        });\n        this.onBeforeRender();\n        this.renderPolygons();\n        this.renderArrows();\n        this.onComplete();\n    }\n    renderPolygons() {\n        this.polygons.sort((a, b) => {\n            return a.centroid.z - b.centroid.z;\n        });\n        this.polygons.forEach((p) => this.drawPolygon(p));\n    }\n    renderArrows() {\n        this.arrows.forEach(({ p1, p2, uid }) => {\n            this.drawArrow(p1, p2, uid);\n        });\n    }\n    renderObject3D(object, camera, transformations) {\n        if (object instanceof Geometry) {\n            this.renderGeometry(object, camera, transformations);\n        }\n        else if (object instanceof Arrow) {\n            this.renderArrow(object, camera, transformations);\n        }\n        else if (object instanceof Group) {\n            let group = object;\n            // let sorted = this.sortObjects(group.objects, camera, [\n            //   group.matrix,\n            //   ...transformations,\n            // ]);\n            group.objects.forEach((object) => {\n                this.renderObject3D(object, camera, [group.matrix, ...transformations]);\n            });\n        }\n    }\n    renderGeometry(object, camera, transformations) {\n        // this.sortFaces(object.faces, object, transformations);\n        object.faces.forEach((face) => {\n            let points = [];\n            face.indices\n                .map((index) => object.vertices[index])\n                .forEach((vertex) => {\n                let objectToScreen = [\n                    object.matrix,\n                    ...transformations,\n                    camera.matrix,\n                ];\n                let screenPoint = applyTransformations(vertex, objectToScreen);\n                // Need to flip y to look correct on svg viewbox\n                screenPoint.multiply(1, -1, 1);\n                points.push(screenPoint);\n            });\n            this.addPolygon(points, face, object, transformations);\n        });\n    }\n    renderArrow(object, camera, transformations) {\n        let objectToScreen = [object.matrix, ...transformations, camera.matrix];\n        let p1Screen = applyTransformations(object.p1, objectToScreen);\n        let p2Screen = applyTransformations(object.p2, objectToScreen);\n        this.arrows.push({ p1: p1Screen, p2: p2Screen, uid: object.uid });\n    }\n    addPolygon(points, face, object, transformations) {\n        this.polygons.push({\n            points,\n            face,\n            object,\n            centroid: applyTransformations(face.centroid, [\n                object.matrix,\n                ...transformations,\n            ]),\n        });\n    }\n    sortObjects(objects, camera, transformations) {\n        let sorted = [...objects];\n        sorted.sort((a, b) => {\n            let aToWorld = [a.matrix, ...transformations];\n            let bToWorld = [b.matrix, ...transformations];\n            let aCentroid = applyTransformations(a.centroid, aToWorld);\n            let bCentroid = applyTransformations(b.centroid, bToWorld);\n            // TODO actually use camera, currently only sorting by Z\n            return aCentroid.z - bCentroid.z;\n        });\n        return sorted;\n    }\n}\n","import { BLACK } from \"../puzzles/colors\";\nexport function createSVGElement(width, height, minx, miny, svgWidth, svgHeight) {\n    const svgElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    svgElement.setAttributeNS(null, \"width\", width.toString());\n    svgElement.setAttributeNS(null, \"height\", height.toString());\n    svgElement.setAttributeNS(null, \"viewBox\", `${minx} ${miny} ${svgWidth} ${svgHeight}`);\n    svgElement.setAttributeNS(null, \"id\", \"sr-visualizer\");\n    return svgElement;\n}\nexport function createPolygonElement(points, color, strokeWidth) {\n    const polygon = document.createElementNS(\"http://www.w3.org/2000/svg\", \"polygon\");\n    updatePolygonElement(polygon, points, color, strokeWidth);\n    return polygon;\n}\nexport function createArrowLineElement(start, end, color, strokeWidth) {\n    const line = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n    let strokeColor = color ? color.value : BLACK.value;\n    line.setAttributeNS(null, \"x1\", start.x.toString());\n    line.setAttributeNS(null, \"y1\", (-start.y).toString());\n    line.setAttributeNS(null, \"x2\", end.x.toString());\n    line.setAttributeNS(null, \"y2\", (-end.y).toString());\n    line.setAttributeNS(null, \"stroke\", strokeColor);\n    line.setAttributeNS(null, \"marker-end\", \"url(#arrowhead)\");\n    if (strokeWidth) {\n        line.setAttributeNS(null, \"stroke-width\", strokeWidth);\n    }\n    return line;\n}\nexport function updatePolygonElement(polygon, points, color, strokeWidth) {\n    const pointsAttribute = makePointsAttributeValue(points);\n    const colorValue = color ? color.value : \"black\";\n    const strokeValue = (color && color.stroke) || \"#000000\";\n    polygon.setAttributeNS(null, \"points\", pointsAttribute);\n    polygon.setAttributeNS(null, \"fill\", colorValue);\n    if (strokeWidth) {\n        polygon.setAttributeNS(null, \"stroke\", strokeValue);\n        polygon.setAttributeNS(null, \"stroke-width\", strokeWidth);\n    }\n    polygon.setAttributeNS(null, \"stroke-linejoin\", \"round\");\n}\nexport function clearSVG(svg) {\n    while (svg.hasChildNodes()) {\n        svg.removeChild(svg.lastChild);\n    }\n}\nexport function createMarkers(color) {\n    const defs = document.createElementNS(\"http://www.w3.org/2000/svg\", \"defs\");\n    const arrowHeadMarker = document.createElementNS(\"http://www.w3.org/2000/svg\", \"marker\");\n    arrowHeadMarker.setAttributeNS(null, \"id\", \"arrowhead\");\n    arrowHeadMarker.setAttributeNS(null, \"markerWidth\", \"4\");\n    arrowHeadMarker.setAttributeNS(null, \"markerHeight\", \"3.5\");\n    arrowHeadMarker.setAttributeNS(null, \"refX\", \"3\");\n    arrowHeadMarker.setAttributeNS(null, \"refY\", \"1.75\");\n    arrowHeadMarker.setAttributeNS(null, \"orient\", \"auto\");\n    const arrowHeadPolygon = document.createElementNS(\"http://www.w3.org/2000/svg\", \"polygon\");\n    arrowHeadPolygon.setAttributeNS(null, \"points\", \"0 0, 4 1.75, 0 3.5\");\n    arrowHeadPolygon.setAttributeNS(null, \"fill\", color.value);\n    defs.appendChild(arrowHeadMarker);\n    arrowHeadMarker.appendChild(arrowHeadPolygon);\n    return defs;\n}\nfunction makePointsAttributeValue(points) {\n    return points.reduce((pointString, point) => {\n        return `${pointString ? pointString + \" \" : \"\"}${point.x}, ${point.y}`;\n    }, \"\");\n}\n","import { BLACK } from \"./../puzzles/colors\";\nimport { PolygonRenderer } from \"./polygonRenderer\";\nimport { createSVGElement, createPolygonElement, updatePolygonElement, createArrowLineElement, createMarkers, } from \"../svg/svg\";\n/**\n * Renderer to draw puzzles using html svg elements\n */\nexport class HtmlSvgRenderer extends PolygonRenderer {\n    /**\n     * Creates an SVG renderer. This will create it's own html `<svg>` element. it's\n     * the user's job to add this element to the page.\n     *\n     * @example\n     * ```\n     * const renderer = new HtmlSvgRenderer(width, height, minx, miny, svgWidth, svgHeight)\n     * document.getElementById('my-element').appendChild(renderer.domElement);\n     * ```\n     *\n     * @param width svg element width in pixels\n     * @param height svg element height in pixels\n     * @param minx min x for the svg element viewbox\n     * @param miny min x for the svg element viewbox\n     * @param svgWidth svg viewbox width\n     * @param svgHeight svg viewbox height\n     */\n    constructor(width, height, minx, miny, svgWidth, svgHeight, arrowColor) {\n        super();\n        this.strokeWidth = \"0.035\";\n        this.arrowStrokeWidth = \"0.03\";\n        this.polygons = [];\n        this.lines = [];\n        this.uidToPolygon = {};\n        this.uidToLine = {};\n        this.arrowColor = arrowColor || BLACK;\n        this.domElement = document.createElement(\"div\");\n        this.domElement.className = \"svg-renderer\";\n        this.svgElement = createSVGElement(width, height, minx, miny, svgWidth, svgHeight);\n        const markers = createMarkers(this.arrowColor);\n        this.svgElement.appendChild(markers);\n        this.domElement.appendChild(this.svgElement);\n    }\n    onBeforeRender() { }\n    drawPolygon({ points, face, object }) {\n        if (!this.uidToPolygon[face.uid]) {\n            // Create new polygon for a face that hasn't been rendered\n            this.uidToPolygon[face.uid] = createPolygonElement(points, face.color || object.color, this.strokeWidth);\n        }\n        else {\n            // Just update existing polygon element\n            const polygon = this.uidToPolygon[face.uid];\n            updatePolygonElement(polygon, points, face.color || object.color, this.strokeWidth);\n        }\n        this.svgElement.appendChild(this.uidToPolygon[face.uid]);\n    }\n    drawArrow(p1Screen, p2Screen, uid) {\n        let arrow;\n        if (!this.uidToLine[uid]) {\n            arrow = createArrowLineElement(p1Screen, p2Screen, this.arrowColor, this.arrowStrokeWidth);\n            this.uidToLine[uid] = arrow;\n        }\n        else {\n            arrow = this.uidToLine[uid];\n            arrow.setAttributeNS(null, \"x1\", p1Screen[0].toString());\n            arrow.setAttributeNS(null, \"y1\", (-p1Screen[1]).toString());\n            arrow.setAttributeNS(null, \"x2\", p2Screen[0].toString());\n            arrow.setAttributeNS(null, \"y2\", (-p2Screen[1]).toString());\n        }\n        this.svgElement.appendChild(this.uidToLine[uid]);\n    }\n    onComplete() { }\n}\n","import { BLACK } from \"../puzzles/colors\";\nimport { PolygonRenderer } from \"./polygonRenderer\";\nexport class HtmlCanvasRenderer extends PolygonRenderer {\n    constructor(width, height, lineWidth = 5, arrowColor = BLACK) {\n        super();\n        this.width = width;\n        this.height = height;\n        this.lineWidth = lineWidth;\n        this.arrowColor = arrowColor;\n        this.domElement = document.createElement(\"div\");\n        this.domElement.className = \"canvas-renderer\";\n        this.canvasElement = document.createElement(\"canvas\");\n        this.domElement.appendChild(this.canvasElement);\n        this.canvasElement.width = width;\n        this.canvasElement.height = height;\n        this.ctx = this.canvasElement.getContext(\"2d\");\n    }\n    /**\n     * Visualizer point values will be in range (-.9, .9)\n     * Convert these values to canvas points (0, imgSize)\n     * using linear interpolation\n     *\n     * really the camera matrix should be set up properly\n     * so we don't have to do this...\n     */\n    convertRange(n, range) {\n        return ((n - -0.9) / (0.9 - -0.9)) * range;\n    }\n    onBeforeRender() {\n        this.ctx.clearRect(0, 0, this.width, this.height);\n    }\n    drawPolygon(polygon) {\n        var _a, _b;\n        this.ctx.lineWidth = this.lineWidth;\n        this.ctx.lineJoin = \"round\";\n        this.ctx.fillStyle = ((_b = (_a = polygon === null || polygon === void 0 ? void 0 : polygon.face) === null || _a === void 0 ? void 0 : _a.color) === null || _b === void 0 ? void 0 : _b.value) || \"#000000\";\n        this.ctx.strokeStyle = \"#000000\";\n        this.ctx.moveTo(this.convertRange(polygon.points[0].x, this.width), this.convertRange(polygon.points[0].y, this.height));\n        this.ctx.beginPath();\n        for (let i = 0; i <= polygon.points.length; i++) {\n            let point = polygon.points[(i + 1) % polygon.points.length];\n            this.ctx.lineTo(this.convertRange(point.x, this.width), this.convertRange(point.y, this.height));\n        }\n        this.ctx.closePath();\n        this.ctx.fill();\n        this.ctx.stroke();\n    }\n    drawArrow(p1, p2, uid) {\n        const toX = this.convertRange(p2.x, this.width);\n        const toY = this.convertRange(-p2.y, this.height);\n        const fromX = this.convertRange(p1.x, this.width);\n        const fromY = this.convertRange(-p1.y, this.height);\n        const headlen = 20; // length of head in pixels\n        const dx = toX - fromX;\n        const dy = toY - fromY;\n        const angle = Math.atan2(dy, dx);\n        this.ctx.strokeStyle = this.arrowColor.value;\n        this.ctx.beginPath();\n        this.ctx.moveTo(fromX, fromY);\n        this.ctx.lineTo(toX, toY);\n        this.ctx.lineTo(toX - headlen * Math.cos(angle - Math.PI / 6), toY - headlen * Math.sin(angle - Math.PI / 6));\n        this.ctx.moveTo(toX, toY);\n        this.ctx.lineTo(toX - headlen * Math.cos(angle + Math.PI / 6), toY - headlen * Math.sin(angle + Math.PI / 6));\n        this.ctx.stroke();\n    }\n    setLineWidth(lineWidth) {\n        this.lineWidth = lineWidth;\n    }\n    onComplete() { }\n}\n","import { Matrix4 } from \"../math/matrix\";\nexport class Camera {\n    constructor() {\n        this.matrix = Matrix4.perspective(Math.PI / 2, 1, 0.1, 1000);\n        this.matrix.translate(0, 0, -5);\n        this.matrix.scale(4, 4, 1);\n    }\n}\n","export class Scene {\n    constructor() {\n        this.objects = [];\n    }\n    add(geometry) {\n        this.objects.push(geometry);\n    }\n    clear() {\n        this.objects = [];\n    }\n}\n","export var VisualizerType;\n(function (VisualizerType) {\n    VisualizerType[\"CUBE\"] = \"cube\";\n    VisualizerType[\"CUBE_NET\"] = \"cube-net\";\n    VisualizerType[\"CUBE_TOP\"] = \"cube-top\";\n    VisualizerType[\"MEGAMINX\"] = \"megaminx\";\n    VisualizerType[\"MEGAMINX_NET\"] = \"megaminx-net\";\n    VisualizerType[\"MEGAMINX_TOP\"] = \"megaminx-top\";\n    VisualizerType[\"PYRAMINX\"] = \"pyraminx\";\n    VisualizerType[\"PYRAMINX_NET\"] = \"pyraminx-net\";\n    VisualizerType[\"SKEWB\"] = \"skewb\";\n    VisualizerType[\"SKEWB_NET\"] = \"skewb-net\";\n    VisualizerType[\"SQUARE1\"] = \"square1\";\n    VisualizerType[\"SQUARE1_NET\"] = \"square1-net\";\n})(VisualizerType || (VisualizerType = {}));\n","import { VisualizerType } from \"./enum\";\nimport { RED, YELLOW, BLUE, WHITE, ORANGE, GREEN, PINK, LIGHT_YELLOW, GREY, LIGHT_GREEN, PURPLE, DARK_BLUE, } from \"./../puzzles/colors\";\nimport { DEFAULT_SQ1_SCHEME } from \"../puzzles/square1/constants\";\nexport const defaultCubeOptions = {\n    size: 3,\n    scheme: {\n        U: YELLOW,\n        R: RED,\n        F: BLUE,\n        D: WHITE,\n        L: ORANGE,\n        B: GREEN,\n    },\n    rotations: [\n        {\n            x: 0,\n            y: 45,\n            z: 0,\n        },\n        {\n            x: 34,\n            y: 0,\n            z: 0,\n        },\n    ],\n};\nexport const defaultMegaminxOptions = {\n    size: 2,\n    scheme: {\n        U: WHITE,\n        F: RED,\n        R: BLUE,\n        dr: PINK,\n        dl: LIGHT_YELLOW,\n        L: GREEN,\n        d: GREY,\n        br: LIGHT_GREEN,\n        BR: YELLOW,\n        BL: PURPLE,\n        bl: DARK_BLUE,\n        b: ORANGE,\n    },\n};\nexport const defaultPyraminxOptions = {\n    size: 3,\n    scheme: {\n        left: BLUE,\n        right: GREEN,\n        top: YELLOW,\n        back: RED,\n    },\n    rotations: [\n        {\n            x: 0,\n            y: 0,\n            z: 60,\n        },\n        {\n            x: -60,\n            y: 0,\n            z: 0,\n        },\n    ],\n};\nexport const defaultSkewbOptions = {\n    scheme: {\n        top: YELLOW,\n        front: BLUE,\n        right: RED,\n        back: GREEN,\n        left: ORANGE,\n        bottom: WHITE,\n    },\n    rotations: [\n        {\n            x: 0,\n            y: 45,\n            z: 0,\n        },\n        {\n            x: 34,\n            y: 0,\n            z: 0,\n        },\n    ],\n};\nexport const defaultSquare1Options = {\n    scheme: DEFAULT_SQ1_SCHEME,\n    rotations: [\n        {\n            x: 0,\n            y: 0,\n            z: -34,\n        },\n        {\n            x: -56,\n            y: 0,\n            z: 0,\n        },\n    ],\n};\nexport function getDefaultOptions(type) {\n    switch (type) {\n        case VisualizerType.CUBE:\n            return defaultCubeOptions;\n        case VisualizerType.CUBE_NET:\n            return Object.assign(Object.assign({}, defaultCubeOptions), { rotations: null });\n        case VisualizerType.CUBE_TOP:\n            return Object.assign(Object.assign({}, defaultCubeOptions), { rotations: null });\n        case VisualizerType.MEGAMINX:\n        case VisualizerType.MEGAMINX_NET:\n        case VisualizerType.MEGAMINX_TOP:\n            return defaultMegaminxOptions;\n        case VisualizerType.PYRAMINX:\n            return defaultPyraminxOptions;\n        case VisualizerType.PYRAMINX_NET:\n            return Object.assign(Object.assign({}, defaultPyraminxOptions), { rotations: null });\n        case VisualizerType.SKEWB:\n            return defaultSkewbOptions;\n        case VisualizerType.SKEWB_NET:\n            return Object.assign(Object.assign({}, defaultSkewbOptions), { rotations: null });\n        case VisualizerType.SQUARE1:\n            return defaultSquare1Options;\n        case VisualizerType.SQUARE1_NET:\n            return Object.assign(Object.assign({}, defaultSquare1Options), { rotations: null });\n        default:\n            throw new Error(`Could not get default options for puzzle ${type}`);\n    }\n}\n","import { BLACK } from \"../puzzles/colors\";\nexport function validatePuzzleOptions(options) {\n    if (options.alg && typeof options.alg !== \"string\") {\n        console.warn(`Inavlid alg ${options.alg}. alg must be a string`);\n        options.alg = \"\";\n    }\n    if (options.case && typeof options.case !== \"string\") {\n        console.warn(`Inavlid case ${options.case}. case must be a string`);\n        options.case = \"\";\n    }\n    if (options.scheme) {\n        if (typeof options.scheme !== \"object\" || Array.isArray(options.scheme)) {\n            console.warn(`Invalid scheme ${options.scheme}. scheme must be an object`);\n            options.scheme = {};\n        }\n        else {\n            Object.keys(options.scheme).forEach((face) => {\n                const faceColor = options.scheme[face];\n                if (faceColor == null ||\n                    typeof faceColor !== \"object\" ||\n                    !faceColor.value) {\n                    console.warn(`Invalid scheme color ${faceColor}. must be an type IColor`);\n                    options.scheme[face] = BLACK;\n                }\n            });\n        }\n    }\n    if (options.mask) {\n        if (typeof options.mask !== \"object\" || Array.isArray(options.mask)) {\n            console.warn(`Invalid mask ${options.mask}. scheme must be an object`);\n            options.mask = {};\n        }\n        else {\n            Object.keys(options.mask).forEach((face) => {\n                const maskValues = options.mask[face];\n                if (!Array.isArray(maskValues)) {\n                    console.warn(`Invalid mask ${maskValues}. must be an array`);\n                    options.mask[face] = [];\n                }\n                else {\n                    for (let i = 0; i < maskValues.length; i++) {\n                        if (!Number.isInteger(maskValues[i])) {\n                            console.warn(`Invalid mask value ${maskValues[i]}. must be a number`);\n                            options.mask[face] = [];\n                            break;\n                        }\n                    }\n                }\n            });\n        }\n    }\n    if (options.stickerColors) {\n        if (typeof options.stickerColors !== \"object\" ||\n            Array.isArray(options.stickerColors)) {\n            console.warn(`Invalid stickerColors ${options.stickerColors}. stickerColors must be an object`);\n            options.stickerColors = {};\n        }\n        else {\n            Object.keys(options.stickerColors).forEach((face) => {\n                const faceColors = options.stickerColors[face];\n                if (!Array.isArray(faceColors)) {\n                    console.warn(`Invalid colors ${faceColors}. must be an array`);\n                    options.stickerColors[face] = [];\n                }\n                else {\n                    for (let i = 0; i < faceColors.length; i++) {\n                        if (!validColor(faceColors[i])) {\n                            options.stickerColors[face] = [];\n                            break;\n                        }\n                    }\n                }\n            });\n        }\n    }\n    if (options.rotations) {\n        if (!Array.isArray(options.rotations)) {\n            console.warn(`invalid rotations ${options.rotations}, must be an array`);\n            options.rotations = [];\n        }\n        else {\n            for (let i = 0; i < options.rotations.length; i++) {\n                if (!validRotation(options.rotations[i])) {\n                    options.rotations = [];\n                    break;\n                }\n            }\n        }\n    }\n    if (options.scale && !Number.isFinite(options.scale)) {\n        console.warn(`invalid scale ${options.scale}, must be a finite number`);\n        options.scale = 1;\n    }\n    if (options.translation && !validTranslation(options.translation)) {\n        options.translation = { x: 0, y: 0, z: 0 };\n    }\n    if (options.arrows) {\n        if (!Array.isArray(options.arrows)) {\n            console.warn(`invalid arrows, must be an array`);\n            options.arrows = [];\n        }\n        else {\n            for (let i = 0; i < options.arrows.length; i++) {\n                if (!validArrow(options.arrows[i])) {\n                    options.arrows = [];\n                    break;\n                }\n            }\n        }\n    }\n}\nexport function validColor(c) {\n    if (typeof c !== \"object\") {\n        console.warn(`invalid color ${c}, must be type object`);\n        return false;\n    }\n    if (!c.value || typeof c.value !== \"string\") {\n        console.warn(`invalid color value ${c.value}, must be type string`);\n        return false;\n    }\n    if (c.stroke && typeof c.stroke !== \"string\") {\n        console.warn(`invalid color stroke ${c.stroke}, must be type string`);\n        return false;\n    }\n    return true;\n}\nfunction validRotation(r) {\n    if (!r || typeof r !== \"object\") {\n        console.warn(`invalid rotation ${r}, must be an object`);\n        return false;\n    }\n    if (r.x && !Number.isFinite(r.x)) {\n        console.warn(`invalid x rotation ${r.x}, must be a number`);\n        return false;\n    }\n    if (r.y && !Number.isFinite(r.y)) {\n        console.warn(`invalid y rotation ${r.y}, must be a number`);\n        return false;\n    }\n    if (r.z && !Number.isFinite(r.z)) {\n        console.warn(`invalid z rotation ${r.z}, must be a number`);\n        return false;\n    }\n    return true;\n}\nfunction validTranslation(r) {\n    if (typeof r !== \"object\" || Array.isArray(r)) {\n        console.warn(`invalid translation ${r}, must be an object`);\n        return false;\n    }\n    if (r.x && !Number.isFinite(r.x)) {\n        console.warn(`invalid x translation ${r.x}, must be a number`);\n        return false;\n    }\n    if (r.y && !Number.isFinite(r.y)) {\n        console.warn(`invalid y translation ${r.y}, must be a number`);\n        return false;\n    }\n    if (r.z && !Number.isFinite(r.z)) {\n        console.warn(`invalid z translation ${r.z}, must be a number`);\n        return false;\n    }\n    return true;\n}\nfunction validArrow(a) {\n    if (typeof a !== \"object\") {\n        console.warn(`invalid arrow ${a}, must be an object`);\n        return false;\n    }\n    if (typeof a.end !== \"object\" || typeof a.start !== \"object\") {\n        console.warn(`invalid arrow ${a}, must have start and end`);\n        return false;\n    }\n    if (typeof a.start.face !== \"string\" || !Number.isInteger(a.start.sticker)) {\n        console.warn(`invalid arrow start ${a.start}`);\n        return false;\n    }\n    if (typeof a.end.face !== \"string\" || !Number.isInteger(a.end.sticker)) {\n        console.warn(`invalid arrow end ${a.end}`);\n        return false;\n    }\n    return true;\n}\n","import { WHITE, RED, BLUE, GREEN, BLACK, YELLOW, PURPLE } from \"./colors\";\nimport { DividedPentagon } from \"./../geometry/dividedPentagon\";\nimport { degreesToRadians, dodecahedronInRadius } from \"../math/utils\";\nimport { Group } from \"../geometry/group\";\nconst OPTIMAL_LAYER_WIDTH = {\n    2: 0.3,\n    3: 0.17,\n    4: 0.121,\n};\nfunction getLayerWidth(length, layers) {\n    return OPTIMAL_LAYER_WIDTH[layers] || length / (layers * 1.9);\n}\nexport class MegaminxTop {\n    constructor() {\n        this.createFaces();\n        this.removeHiddenStickers();\n    }\n    createFaces() {\n        const layers = 2;\n        const length = 0.75;\n        const layerWidth = getLayerWidth(length, layers);\n        const megaminxRadius = dodecahedronInRadius(length);\n        this.U = new DividedPentagon(WHITE, layers, length, layerWidth);\n        this.F = new DividedPentagon(RED, layers, length, layerWidth);\n        this.R = new DividedPentagon(BLUE, layers, length, layerWidth);\n        this.L = new DividedPentagon(GREEN, layers, length, layerWidth);\n        this.BR = new DividedPentagon(YELLOW, layers, length, layerWidth);\n        this.BL = new DividedPentagon(PURPLE, layers, length, layerWidth);\n        this.F.translate(0, 0, megaminxRadius);\n        this.U.rotate(Math.PI, 0, 0, 1);\n        this.U.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\n        this.U.translate(0, 0, megaminxRadius);\n        this.L.rotate((72 * Math.PI) / 180, 0, 0, 1);\n        this.L.rotate(Math.PI, 0, 0, 1);\n        this.L.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\n        this.L.translate(0, 0, megaminxRadius);\n        this.R.rotate((72 * Math.PI) / 180, 0, 0, 1);\n        this.R.rotate(Math.PI / 5, 0, 0, 1);\n        this.R.rotate(((180 - 116.57) * Math.PI) / 180, 1, 0, 0);\n        this.R.translate(0, 0, megaminxRadius);\n        this.BL.rotate(Math.PI / 5, 0, 0, 1);\n        this.BL.rotate((-116.57 * Math.PI) / 180, 1, 0, 0);\n        this.BL.translate(0, 0, megaminxRadius);\n        this.BR.rotate(-Math.PI / 5, 0, 0, 1);\n        this.BR.rotate((-116.57 * Math.PI) / 180, 1, 0, 0);\n        this.BR.translate(0, 0, megaminxRadius);\n        this.faces = {\n            U: this.U,\n            F: this.F,\n            R: this.R,\n            dr: this.BR,\n            dl: this.BL,\n            L: this.L,\n        };\n        this.group = new Group([this.U, this.F, this.R, this.BR, this.BL, this.L]);\n        this.group.rotate(degreesToRadians(63), 1, 0, 0);\n    }\n    setColors(colors) {\n        let { U, R, F, L, BR, BL } = colors;\n        this.createFaces();\n        // If length is larger than we expect for\n        // a side of the puzzle, assume we're receiving\n        // colors for the entire face of the puzzle. and\n        // just take out the the colors for visible stickers\n        // if (R.length > 3) {\n        //   R = R.slice(2, 5);\n        //   F = F.slice(2, 5);\n        //   L = L.slice(2, 5);\n        //   BR = BR.slice(2, 5);\n        //   BL = BL.slice(2, 5);\n        // }\n        // this.U.faces[1].color = BLACK;\n        // this.R.faces[1].color = BLACK;\n        // this.F.faces[1].color = BLACK;\n        // this.L.faces[1].color = BLACK;\n        // this.BR.faces[1].color = BLACK;\n        // this.BL.faces[1].color = BLACK;\n        this.setFaceColors(this.U, U);\n        this.setFaceColors(this.R, R);\n        this.setFaceColors(this.F, F);\n        this.setFaceColors(this.L, L);\n        this.setFaceColors(this.BR, BR);\n        this.setFaceColors(this.BL, BL);\n        this.removeHiddenStickers();\n    }\n    setFaceColors(faceStickers, colors) {\n        faceStickers.faces.forEach((f, i) => {\n            if (colors && colors[i]) {\n                f.color = colors[i];\n            }\n            else {\n                f.color = BLACK;\n            }\n        });\n    }\n    /**\n     * hide stickers that aren't in the top layer\n     * so only the top of the megaminx is shown\n     */\n    removeHiddenStickers() {\n        this.F.faces = this.F.faces.slice(2, 5);\n        this.BL.faces = this.BL.faces.slice(8, 11);\n        this.L.faces = this.L.faces.slice(4, 7);\n        this.R.faces = [this.R.faces[1], this.R.faces[2], this.R.faces[10]];\n        this.BR.faces = this.BR.faces.slice(6, 9);\n    }\n}\n","import { MegaminxTop } from \"./../puzzles/megaminxTop\";\nimport { RubiksCubeTopLayer } from \"./../puzzles/rubiksCube/rubiksCubeTop\";\nimport { Square1Net } from \"./../puzzles/square1/square1Net\";\nimport { Square1Simualtor } from \"./../simulator/square1/square1Simulator\";\nimport { Square1 } from \"./../puzzles/square1/square1\";\nimport { SkewbNet } from \"./../puzzles/skewbNet\";\nimport { SkewbSimulator } from \"./../simulator/skewb/skewbSimulator\";\nimport { Skewb } from \"./../puzzles/skewb\";\nimport { PyraminxSimulator } from \"./../simulator/pyraminx/pyraminxSimulator\";\nimport { PyraminxNet } from \"./../puzzles/pyraminxNet\";\nimport { MegaminxNet } from \"./../puzzles/megaminxNet\";\nimport { Megaminx } from \"./../puzzles/megaminx\";\nimport { MegaminxSimulator } from \"./../simulator/megaminx/megaminxSimulator\";\nimport { RubiksCubeNet } from \"./../puzzles/rubiksCube/rubiksCubeNet\";\nimport { RubiksCube } from \"../puzzles/rubiksCube/rubiksCube\";\nimport { RubiksCubeSimulator } from \"../simulator/rubiksCube/rubiksCubeSimulator\";\nimport { Pyraminx } from \"../puzzles/pyraminx\";\nimport { VisualizerType } from \"./enum\";\n/**\n * Since puzzle geometry doesn't change for any instance of \"Visuzlier\"\n * we can cache the geometry generated to avoid generating it on each time\n * we render a puzzle\n */\nconst geometryCache = {\n    [VisualizerType.CUBE]: {},\n    [VisualizerType.CUBE_NET]: {},\n    [VisualizerType.CUBE_TOP]: {},\n    [VisualizerType.MEGAMINX]: {},\n    [VisualizerType.MEGAMINX_NET]: {},\n    [VisualizerType.MEGAMINX_TOP]: {},\n    [VisualizerType.PYRAMINX]: {},\n    [VisualizerType.PYRAMINX_NET]: {},\n    [VisualizerType.SKEWB]: {},\n    [VisualizerType.SKEWB_NET]: {},\n    [VisualizerType.SQUARE1]: {},\n    [VisualizerType.SQUARE1_NET]: {},\n};\n/**\n * Creates puzzle geometry for a given puzzle type.\n * Will initialize the geometry on puzzle options\n * passed in\n *\n * @param type Type of the puzzle {@link VisualizerType} (cube, skewb, etc...)\n * @param options  Puzzle options {@link PuzzleOptions}\n */\nexport function getPuzzleGeometry(type, options) {\n    switch (type) {\n        case VisualizerType.CUBE:\n            return createCube(options);\n        case VisualizerType.CUBE_NET:\n            return createCubeNet(options);\n        case VisualizerType.CUBE_TOP:\n            return createCubeTop(options);\n        case VisualizerType.MEGAMINX:\n            return createMegaminx(options);\n        case VisualizerType.MEGAMINX_NET:\n            return createMegaminxNet(options);\n        case VisualizerType.MEGAMINX_TOP:\n            return createMegaminxTop(options);\n        case VisualizerType.PYRAMINX:\n            return createPyraminx(options);\n        case VisualizerType.PYRAMINX_NET:\n            return createPyraminxNet(options);\n        case VisualizerType.SKEWB:\n            return createSkewb(options);\n        case VisualizerType.SKEWB_NET:\n            return createSkewbNet(options);\n        case VisualizerType.SQUARE1:\n            return createSquare1(options);\n        case VisualizerType.SQUARE1_NET:\n            return createSquare1Net(options);\n    }\n}\n/**\n * Returns a puzzle simulator for the type of puzzle\n *\n * @param type\n * @param options\n */\nexport function getPuzzleSimulator(type, options) {\n    switch (type) {\n        case VisualizerType.CUBE:\n        case VisualizerType.CUBE_NET:\n        case VisualizerType.CUBE_TOP:\n            return new RubiksCubeSimulator(options.size);\n        case VisualizerType.MEGAMINX:\n        case VisualizerType.MEGAMINX_NET:\n        case VisualizerType.MEGAMINX_TOP:\n            return new MegaminxSimulator();\n        case VisualizerType.PYRAMINX:\n        case VisualizerType.PYRAMINX_NET:\n            return new PyraminxSimulator();\n        case VisualizerType.SKEWB:\n        case VisualizerType.SKEWB_NET:\n            return new SkewbSimulator();\n        case VisualizerType.SQUARE1:\n        case VisualizerType.SQUARE1_NET:\n            return initSquare1Simulator(options);\n    }\n}\nexport function createCube(options = {}) {\n    if (!geometryCache[VisualizerType.CUBE][options.size]) {\n        geometryCache[VisualizerType.CUBE][options.size] = new RubiksCube(options.size);\n    }\n    return geometryCache[VisualizerType.CUBE][options.size];\n}\nexport function createCubeNet(options = {}) {\n    if (!geometryCache[VisualizerType.CUBE_NET][options.size]) {\n        geometryCache[VisualizerType.CUBE_NET][options.size] = new RubiksCubeNet(options.size);\n    }\n    return geometryCache[VisualizerType.CUBE_NET][options.size];\n}\nexport function createCubeTop(options = {}) {\n    if (!geometryCache[VisualizerType.CUBE_TOP][options.size]) {\n        geometryCache[VisualizerType.CUBE_TOP][options.size] = new RubiksCubeTopLayer(options.size);\n    }\n    return geometryCache[VisualizerType.CUBE_TOP][options.size];\n}\nexport function createMegaminx(options = {}) {\n    if (!geometryCache[VisualizerType.MEGAMINX][options.size]) {\n        geometryCache[VisualizerType.MEGAMINX][options.size] = new Megaminx(options.size);\n    }\n    return geometryCache[VisualizerType.MEGAMINX][options.size];\n}\nexport function createMegaminxNet(options = {}) {\n    if (!geometryCache[VisualizerType.MEGAMINX_NET][options.size]) {\n        geometryCache[VisualizerType.MEGAMINX_NET][options.size] = new MegaminxNet(options.size);\n    }\n    return geometryCache[VisualizerType.MEGAMINX_NET][options.size];\n}\nexport function createMegaminxTop(options = {}) {\n    if (!geometryCache[VisualizerType.MEGAMINX_TOP][2]) {\n        // megaminx top size not supported, so just cache by size 2\n        geometryCache[VisualizerType.MEGAMINX_TOP][2] = new MegaminxTop();\n    }\n    return geometryCache[VisualizerType.MEGAMINX_TOP][2];\n}\nexport function createPyraminx(options = {}) {\n    if (!geometryCache[VisualizerType.PYRAMINX][options.size]) {\n        geometryCache[VisualizerType.PYRAMINX][options.size] = new Pyraminx(options.size);\n    }\n    return geometryCache[VisualizerType.PYRAMINX][options.size];\n}\nexport function createPyraminxNet(options = {}) {\n    if (!geometryCache[VisualizerType.PYRAMINX_NET][options.size]) {\n        geometryCache[VisualizerType.PYRAMINX_NET][options.size] = new PyraminxNet(options.size);\n    }\n    return geometryCache[VisualizerType.PYRAMINX_NET][options.size];\n}\nexport function createSkewb(options = {}) {\n    if (!geometryCache[VisualizerType.SKEWB][1]) {\n        // Skewb size not supported, so just cache by size 1\n        geometryCache[VisualizerType.SKEWB][1] = new Skewb();\n    }\n    return geometryCache[VisualizerType.SKEWB][1];\n}\nexport function createSkewbNet(options = {}) {\n    if (!geometryCache[VisualizerType.SKEWB_NET][1]) {\n        // Skewb size not supported, so just cache by size 1\n        geometryCache[VisualizerType.SKEWB_NET][1] = new SkewbNet();\n    }\n    return geometryCache[VisualizerType.SKEWB_NET][1];\n}\nexport function createSquare1(options = {}) {\n    const simulator = initSquare1Simulator(options);\n    const geometry = new Square1(simulator.topLayer, simulator.bottomLayer, simulator.middleRotated);\n    return geometry;\n}\nexport function createSquare1Net(options = {}) {\n    const simulator = initSquare1Simulator(options);\n    const geometry = new Square1Net(simulator.topLayer, simulator.bottomLayer, simulator.middleRotated);\n    return geometry;\n}\nfunction initSquare1Simulator(options) {\n    const simulator = new Square1Simualtor(options.scheme);\n    if (options.case) {\n        simulator.case(options.case);\n    }\n    else if (options.alg) {\n        simulator.alg(options.alg);\n    }\n    return simulator;\n}\n","/**\n * Credit to logic https://github.com/toji/gl-matrix/blob/master/src/quat.js\n */\nexport class Quaternion {\n    constructor(a, b, c, d) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n    }\n    static fromEuler(x, y, z) {\n        let halfToRad = Math.PI / 360;\n        x *= halfToRad;\n        z *= halfToRad;\n        y *= halfToRad;\n        let sx = Math.sin(x);\n        let cx = Math.cos(x);\n        let sy = Math.sin(y);\n        let cy = Math.cos(y);\n        let sz = Math.sin(z);\n        let cz = Math.cos(z);\n        let a = sx * cy * cz - cx * sy * sz;\n        let b = cx * sy * cz + sx * cy * sz;\n        let c = cx * cy * sz - sx * sy * cz;\n        let d = cx * cy * cz + sx * sy * sz;\n        return new Quaternion(a, b, c, d);\n    }\n}\n","import { Square1 } from \"./../puzzles/square1/square1\";\nimport { Geometry } from \"./../geometry/geometry\";\nimport { Arrow } from \"./../geometry/arrow\";\nimport { getDefaultOptions } from \"./options\";\nimport { MASK_COLOR } from \"./../puzzles/colors\";\nimport { VisualizerType } from \"./enum\";\nimport { validatePuzzleOptions, } from \"./interface\";\nimport { Scene } from \"../rendering/scene\";\nimport { Camera } from \"./../rendering/camera\";\nimport { applyTransformations } from \"../rendering/utils\";\nimport { Group } from \"../geometry/group\";\nimport { getPuzzleGeometry, getPuzzleSimulator } from \"./puzzleCreator\";\nimport { Matrix4 } from \"../math/matrix\";\nimport { Quaternion } from \"../math/quaternion\";\n/**\n * Applies a color scheme to simulator values\n *\n * @param faceValues face values from the simulator\n * @param scheme color scheme to\n */\nfunction applyColorScheme(faceValues, scheme) {\n    return Object.keys(faceValues).reduce((colors, face) => {\n        colors[face] = faceValues[face].map((value) => scheme[value] || MASK_COLOR);\n        return colors;\n    }, {});\n}\nfunction isSquare1(type) {\n    return type === VisualizerType.SQUARE1 || type === VisualizerType.SQUARE1_NET;\n}\nfunction isPyraminx(type) {\n    return (type === VisualizerType.PYRAMINX || type === VisualizerType.PYRAMINX_NET);\n}\nfunction isMegaminx(type) {\n    return (type === VisualizerType.MEGAMINX ||\n        type === VisualizerType.MEGAMINX_NET ||\n        type === VisualizerType.MEGAMINX_TOP);\n}\n/**\n * Return true if we can apply simulator colors. Currently\n * we don't simulate n-layered megaminx/pyraminx.\n */\nfunction canApplySimulatorColors(type, size) {\n    if (isPyraminx(type)) {\n        return size === 3;\n    }\n    if (isMegaminx(type)) {\n        return size === 2;\n    }\n    return true;\n}\nfunction createArrow(a, puzzle, group) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    // Get the face the arrow is pointing to\n    let startFace = puzzle.faces[a.start.face];\n    let endFace = puzzle.faces[a.end.face];\n    if (!startFace || !endFace) {\n        throw new Error(`Invalid arrow definition ${JSON.stringify(a)}`);\n    }\n    // Transform from sticker coordinates to group coordinates\n    let startTransformations = [\n        startFace.matrix,\n        puzzle.group.matrix,\n        group.matrix,\n    ];\n    let endTransformations = [endFace.matrix, puzzle.group.matrix, group.matrix];\n    let start;\n    let end;\n    // Get the stickers on the face\n    if (startFace instanceof Geometry && endFace instanceof Geometry) {\n        start = (_a = startFace.faces[a.start.sticker]) === null || _a === void 0 ? void 0 : _a.centroid;\n        end = (_b = endFace.faces[a.end.sticker]) === null || _b === void 0 ? void 0 : _b.centroid;\n    }\n    else {\n        if (puzzle instanceof Square1) {\n            start = (_c = startFace.objects[a.start.sticker]) === null || _c === void 0 ? void 0 : _c.faces[0].centroid;\n            end = (_d = endFace.objects[a.end.sticker]) === null || _d === void 0 ? void 0 : _d.faces[0].centroid;\n        }\n        else {\n            start = (_e = startFace.objects[a.start.sticker]) === null || _e === void 0 ? void 0 : _e.centroid;\n            end = (_f = endFace.objects[a.end.sticker]) === null || _f === void 0 ? void 0 : _f.centroid;\n        }\n        startTransformations.unshift((_g = startFace.objects[a.start.sticker]) === null || _g === void 0 ? void 0 : _g.matrix);\n        endTransformations.unshift((_h = endFace.objects[a.end.sticker]) === null || _h === void 0 ? void 0 : _h.matrix);\n    }\n    if (!start || !end) {\n        throw new Error(`Invalid arrow definition ${JSON.stringify(a)}`);\n    }\n    let p1 = applyTransformations(start, startTransformations);\n    let p2 = applyTransformations(end, endTransformations);\n    return new Arrow(p1, p2);\n}\n/**\n * Encapsulates logic for setting up a puzzle environment for rendering\n * images. Sets up puzzle geometry, applies any algorithm or masking\n * if necessary, and renders the puzzle\n */\nexport class Visualizer {\n    constructor(renderer, type, options = {}) {\n        this.type = type;\n        this.camera = new Camera();\n        this.scene = new Scene();\n        this.group = new Group();\n        this.scene.add(this.group);\n        this.renderer = renderer;\n        this.initPuzzleOptions(options);\n        this.puzzleGeometry = getPuzzleGeometry(this.type, this.options);\n        this.simulator = getPuzzleSimulator(this.type, this.options);\n        this.buildGroupMatrix();\n        this.applyColors();\n        this.addArrows();\n        this.group.addObject(this.puzzleGeometry.group);\n        this.render();\n    }\n    applyColors() {\n        const hasCustomColors = this.options.stickerColors && !isSquare1(this.type);\n        const canUseSimulator = canApplySimulatorColors(this.type, this.options.size);\n        if (hasCustomColors) {\n            this.puzzleGeometry.setColors(this.options.stickerColors);\n        }\n        else if (canUseSimulator) {\n            this.applySimulatorColors();\n        }\n        else {\n            // Apply scheme to puzzle geomety manually, for puzzles\n            // not supported by simulators (megaminx != 2 pyraminx != 3)\n            const faces = this.puzzleGeometry.faces;\n            Object.keys(faces).forEach((face) => {\n                const stickers = faces[face];\n                const faceColor = this.options.scheme[face];\n                if (stickers instanceof Geometry) {\n                    stickers.faces.forEach((f) => (f.color = faceColor));\n                }\n                else if (stickers instanceof Group) {\n                    stickers.objects.forEach((o) => (o.color = faceColor));\n                }\n            });\n        }\n    }\n    applySimulatorColors() {\n        if (this.options.mask)\n            this.applyMask(this.options);\n        if (this.options.alg || this.options.case)\n            this.applyAlgorithm();\n        const faceValues = this.simulator.getValues();\n        const faceColors = applyColorScheme(faceValues, this.options.scheme);\n        this.puzzleGeometry.setColors(faceColors);\n    }\n    applyAlgorithm() {\n        if (isSquare1(this.type)) {\n            // puzzle factory applies algorithm to square 1 when greating the puzzle geometry\n            return;\n        }\n        if (this.options.case) {\n            this.simulator.case(this.options.case);\n        }\n        else if (this.options.alg) {\n            this.simulator.alg(this.options.alg);\n        }\n    }\n    applyMask(options) {\n        Object.keys(options.mask).forEach((maskedFace) => {\n            options.mask[maskedFace].forEach((index) => this.simulator.setValue(maskedFace, index, \"mask\"));\n        });\n    }\n    /**\n     * build the group matrix for the puzzle. This sets up the\n     * rotation, scale, and translation for the resulting rendered\n     * image.\n     */\n    buildGroupMatrix() {\n        this.group.matrix = new Matrix4();\n        // Rotate the group matrix\n        if (this.options.rotations) {\n            this.options.rotations.forEach((rotation) => {\n                const { x = 0, y = 0, z = 0 } = rotation;\n                let rotationMatrix = Matrix4.fromQuaternion(Quaternion.fromEuler(x, y, z));\n                Matrix4.multiply(this.group.matrix, rotationMatrix, this.group.matrix);\n            });\n        }\n        // Scale the group matrix\n        if (this.options.scale) {\n            let scale = this.options.scale;\n            this.group.matrix.scale(scale, scale, scale);\n        }\n        // Translate the group matrix\n        if (this.options.translation) {\n            const { x = 0, y = 0, z = 0 } = this.options.translation;\n            let translationMatrix = Matrix4.fromTranslation(x, y, z);\n            Matrix4.multiply(this.group.matrix, translationMatrix, this.group.matrix);\n        }\n    }\n    addArrows() {\n        if (!this.options.arrows) {\n            return;\n        }\n        this.options.arrows.forEach((arrow) => {\n            try {\n                this.scene.add(createArrow(arrow, this.puzzleGeometry, this.group));\n            }\n            catch (e) {\n                console.error(e);\n                console.warn(`Invalid arrow ${JSON.stringify(arrow)}`);\n            }\n        });\n    }\n    initPuzzleOptions(options) {\n        this.options = Object.assign(Object.assign({}, getDefaultOptions(this.type)), options);\n        validatePuzzleOptions(this.options);\n    }\n    applyOptionsToPuzzle() {\n        this.simulator.reset();\n        this.buildGroupMatrix();\n        this.applyColors();\n        this.addArrows();\n    }\n    setPuzzleOptions(options) {\n        this.initPuzzleOptions(options);\n        // Handle square1 geometry separately, since it\n        // changes, unlike the other puzzles\n        if (isSquare1(this.type)) {\n            this.puzzleGeometry = getPuzzleGeometry(this.type, this.options);\n            this.group.setObjects([this.puzzleGeometry.group]);\n        }\n        this.applyOptionsToPuzzle();\n    }\n    render() {\n        this.renderer.render(this.scene, this.camera);\n    }\n}\n","import { BLACK, GREY } from \"./../puzzles/colors\";\nimport { Visualizer } from \"./visualizer\";\nimport { HtmlSvgRenderer } from \"../rendering/htmlSvgRenderer\";\nimport { validColor } from \"./interface\";\nconst defaultOptions = {\n    width: 500,\n    height: 500,\n    minx: -0.9,\n    miny: -0.9,\n    svgWidth: 1.8,\n    svgHeight: 1.8,\n    strokeWidth: 0.02,\n    arrowColor: GREY,\n    arrowStrokeWidth: 0.03,\n};\n/**\n * Visualize puzzles with svg in a DOM\n */\nexport function SVG(element, type, options = {}) {\n    return new SvgVisualizer(element, type, options);\n}\nexport class SvgVisualizer extends Visualizer {\n    constructor(element, type, options = {}) {\n        options = Object.assign(Object.assign({}, defaultOptions), options);\n        if (typeof element === \"string\") {\n            element = document.querySelector(element);\n            if (element === null) {\n                throw new Error(`Could not find visuzlier element by query selector: ${element}`);\n            }\n        }\n        const renderer = new HtmlSvgRenderer(options.width, options.height, options.minx, options.miny, options.svgWidth, options.svgHeight, options.arrowColor);\n        renderer.strokeWidth = \"\" + options.strokeWidth;\n        element.appendChild(renderer.domElement);\n        super(renderer, type, options.puzzle);\n        this.svgOptions = options;\n    }\n    /**\n     * Set the stroke width for the svg elements rendered and re draw the puzzle.\n     *\n     * @param strokeWidth - value to set the stroke width to. It depends on the svg options and puzzle size,\n     *                      but good values are around .01 - .06\n     */\n    setStrokeWidth(strokeWidth) {\n        this.svgOptions.strokeWidth = strokeWidth;\n        this.renderer.strokeWidth =\n            \"\" + this.svgOptions.strokeWidth;\n        this.render();\n    }\n    /**\n     * Dynamically update the svg element options\n     *\n     * @param options - options for the svg element that is being rendered to\n     */\n    setSvgOptions(options) {\n        this.svgOptions = Object.assign(Object.assign({}, defaultOptions), options);\n        validateSvgOptions(this.svgOptions);\n        const renderer = this.renderer;\n        const svgElement = renderer.svgElement;\n        renderer.strokeWidth = \"\" + this.svgOptions.strokeWidth;\n        renderer.arrowStrokeWidth = \"\" + this.svgOptions.arrowStrokeWidth;\n        svgElement.setAttributeNS(null, \"width\", this.svgOptions.width.toString());\n        svgElement.setAttributeNS(null, \"height\", this.svgOptions.width.toString());\n        svgElement.setAttributeNS(null, \"viewBox\", `${this.svgOptions.minx} ${this.svgOptions.miny} ${this.svgOptions.svgWidth} ${this.svgOptions.svgHeight}`);\n        this.render();\n    }\n}\nfunction validateSvgOptions(options) {\n    if (!Number.isInteger(options.width)) {\n        console.warn(`invalid svg width ${options.width}. Must be a whole number`);\n        options.width = defaultOptions.width;\n    }\n    if (!Number.isInteger(options.height)) {\n        console.warn(`invalid svg height ${options.height}. Must be a whole number`);\n        options.width = defaultOptions.height;\n    }\n    if (!Number.isFinite(options.minx)) {\n        console.warn(`invalid svg minx ${options.minx}`);\n        options.minx = defaultOptions.minx;\n    }\n    if (!Number.isFinite(options.miny)) {\n        console.warn(`invalid svg miny ${options.miny}`);\n        options.minx = defaultOptions.miny;\n    }\n    if (!Number.isFinite(options.svgWidth)) {\n        console.warn(`invalid svgWidth ${options.svgWidth}`);\n        options.minx = defaultOptions.svgWidth;\n    }\n    if (!Number.isFinite(options.svgHeight)) {\n        console.warn(`invalid svgHeight ${options.svgHeight}`);\n        options.minx = defaultOptions.svgHeight;\n    }\n    if (!Number.isFinite(options.strokeWidth)) {\n        console.warn(`invalid strokeWidth ${options.strokeWidth}`);\n        options.minx = defaultOptions.strokeWidth;\n    }\n    if (!Number.isFinite(options.arrowStrokeWidth)) {\n        console.warn(`invalid arrowStrokeWidth ${options.arrowStrokeWidth}`);\n        options.minx = defaultOptions.arrowStrokeWidth;\n    }\n    if (options.arrowColor && !validColor(options.arrowColor)) {\n        options.arrowColor = BLACK;\n    }\n}\n","import { GREY } from \"./../puzzles/colors\";\nimport { SVG } from \"./svg\";\nconst defaultOptions = {\n    width: 500,\n    height: 500,\n    minx: -0.9,\n    miny: -0.9,\n    svgWidth: 1.8,\n    svgHeight: 1.8,\n    strokeWidth: 0.02,\n    arrowColor: GREY,\n    arrowStrokeWidth: 0.03,\n};\n/**\n * Creates PNG element\n */\nexport function PNG(container, type, options = {}) {\n    if (typeof container === \"string\") {\n        container = document.querySelector(container);\n        if (container === null) {\n            throw new Error(`Could not find visuzlier element by query selector: ${container}`);\n        }\n    }\n    let element = document.createElement(\"div\");\n    options = Object.assign(Object.assign({}, defaultOptions), options);\n    SVG(element, type, options);\n    setTimeout(() => {\n        let svgElement = element.querySelector(\"svg\");\n        let targetImage = document.createElement(\"img\");\n        container.appendChild(targetImage);\n        let canvas = document.createElement(\"canvas\");\n        let ctx = canvas.getContext(\"2d\");\n        let loader = new Image();\n        loader.width = canvas.width = targetImage.width = options.width;\n        loader.height = canvas.height = targetImage.height = options.height;\n        loader.onload = function () {\n            ctx.drawImage(loader, 0, 0, loader.width, loader.height);\n            targetImage.src = canvas.toDataURL();\n        };\n        var svgAsXML = new XMLSerializer().serializeToString(svgElement);\n        loader.src = `data:image/svg+xml,${encodeURIComponent(svgAsXML)}`;\n    });\n}\n","import { Visualizer } from \".\";\nimport { HtmlCanvasRenderer } from \"../rendering/htmlCanvasRenderer\";\nimport { GREY } from \"../puzzles/colors\";\nconst defaultOptions = {\n    width: 500,\n    height: 500,\n    lineWidth: 5,\n    arrowColor: GREY,\n};\n/**\n * Visualize puzzles with canvas\n */\nexport function Canvas(element, type, options = {}) {\n    return new CanvasVisualizer(element, type, options);\n}\nexport class CanvasVisualizer extends Visualizer {\n    constructor(element, type, options) {\n        options = Object.assign(Object.assign({}, defaultOptions), options);\n        if (typeof element === \"string\") {\n            element = document.querySelector(element);\n            if (element === null) {\n                throw new Error(`Could not find visuzlier element by query selector: ${element}`);\n            }\n        }\n        const renderer = new HtmlCanvasRenderer(options.width, options.height, options.lineWidth, options.arrowColor);\n        element.appendChild(renderer.domElement);\n        super(renderer, type, options.puzzle);\n    }\n}\n","export const Masks = {\n    CUBE_3: {\n        LAST_LAYER: {\n            F: [3, 4, 5, 6, 7, 8],\n            B: [3, 4, 5, 6, 7, 8],\n            R: [3, 4, 5, 6, 7, 8],\n            L: [3, 4, 5, 6, 7, 8],\n            D: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        },\n        F2L: {\n            F: [0, 1, 2],\n            B: [0, 1, 2],\n            R: [0, 1, 2],\n            L: [0, 1, 2],\n            U: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        },\n        FIRST_LAYER: {\n            F: [0, 1, 2, 3, 4, 5],\n            B: [0, 1, 2, 3, 4, 5],\n            R: [0, 1, 2, 3, 4, 5],\n            L: [0, 1, 2, 3, 4, 5],\n            U: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        },\n        OLL: {\n            R: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n            F: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n            D: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n            L: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n            B: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        },\n        CORNERS_LAST_LAYER: {\n            U: [1, 3, 5, 7],\n            F: [1, 3, 4, 5, 6, 7, 8],\n            B: [1, 3, 4, 5, 6, 7, 8],\n            R: [1, 3, 4, 5, 6, 7, 8],\n            L: [1, 3, 4, 5, 6, 7, 8],\n            D: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        },\n        EDGES_LAST_LAYER: {\n            U: [0, 2, 6, 8],\n            F: [0, 2, 3, 4, 5, 6, 7, 8],\n            B: [0, 2, 3, 4, 5, 6, 7, 8],\n            R: [0, 2, 3, 4, 5, 6, 7, 8],\n            L: [0, 2, 3, 4, 5, 6, 7, 8],\n            D: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        },\n    },\n    MEGA_3: {\n        OLL: {\n            F: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            R: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            L: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            BR: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            BL: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            d: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            b: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            dl: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            dr: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            bl: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            br: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        },\n    },\n};\n","import { TurnType } from \"./algorithms/algorithm\";\nimport { parseCubeAlgorithm } from \"./algorithms/cube\";\nimport { Square1Simualtor } from \"./simulator/square1/square1Simulator\";\nimport { SkewbSimulator } from \"./simulator/skewb/skewbSimulator\";\nimport { PyraminxSimulator } from \"./simulator/pyraminx/pyraminxSimulator\";\nimport { MegaminxSimulator } from \"./simulator/megaminx/megaminxSimulator\";\nimport { RubiksCubeSimulator } from \"./simulator/rubiksCube/rubiksCubeSimulator\";\nimport { Square1Net } from \"./puzzles/square1/square1Net\";\nimport { Square1 } from \"./puzzles/square1/square1\";\nimport { SkewbNet } from \"./puzzles/skewbNet\";\nimport { Skewb } from \"./puzzles/skewb\";\nimport { PyraminxNet } from \"./puzzles/pyraminxNet\";\nimport { Pyraminx } from \"./puzzles/pyraminx\";\nimport { MegaminxNet } from \"./puzzles/megaminxNet\";\nimport { Megaminx } from \"./puzzles/megaminx\";\nimport { RubiksCubeTopLayer } from \"./puzzles/rubiksCube/rubiksCubeTop\";\nimport { RubiksCubeNet } from \"./puzzles/rubiksCube/rubiksCubeNet\";\nimport { RubiksCube } from \"./puzzles/rubiksCube/rubiksCube\";\nimport { HtmlSvgRenderer } from \"./rendering/htmlSvgRenderer\";\nimport { HtmlCanvasRenderer } from \"./rendering/htmlCanvasRenderer\";\nimport { PolygonRenderer } from \"./rendering/polygonRenderer\";\nimport { Camera } from \"./rendering/camera\";\nimport { Scene } from \"./rendering/scene\";\nimport { parseMegaminxAlgorithm } from \"./algorithms/megaminx\";\nimport { parsePyraminxAlgorithm } from \"./algorithms/pyraminx\";\nimport { parseSkewbAlgorithm } from \"./algorithms/skewb\";\nimport { parseSquare1Algorithm } from \"./algorithms/square1\";\nimport * as Colors_1 from \"./puzzles/colors\";\nexport { Colors_1 as Colors };\nexport * from \"./visualizer\";\nexport * from \"./rendering/renderer\";\nexport const Rendering = {\n    Scene,\n    Camera,\n    HtmlSvgRenderer,\n    HtmlCanvasRenderer,\n    PolygonRenderer,\n};\nexport const PuzzleGeometry = {\n    RubiksCube,\n    RubiksCubeNet,\n    RubiksCubeTopLayer,\n    Megaminx,\n    MegaminxNet,\n    Pyraminx,\n    PyraminxNet,\n    Skewb,\n    SkewbNet,\n    Square1,\n    Square1Net,\n};\nexport const Simulator = {\n    RubiksCubeSimulator,\n    MegaminxSimulator,\n    PyraminxSimulator,\n    SkewbSimulator,\n    Square1Simualtor,\n};\nexport const Algorithm = {\n    TurnType,\n    parseCubeAlgorithm: parseCubeAlgorithm,\n    parseMegaminxAlgorithm: parseMegaminxAlgorithm,\n    parsePyraminxAlgorithm: parsePyraminxAlgorithm,\n    parseSkewbAlgorithm: parseSkewbAlgorithm,\n    parseSquare1Algorithm: parseSquare1Algorithm,\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(170);\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"sourceRoot":""}