{"version":3,"sources":["webpack://srVisualizer/webpack/universalModuleDefinition","webpack://srVisualizer/./src/utils/arrays.ts","webpack://srVisualizer/./src/simulator/simulator.ts","webpack://srVisualizer/./src/simulator/skewb/skewbSimulator.ts","webpack://srVisualizer/./src/puzzles/colors.ts","webpack://srVisualizer/./src/simulator/megaminx/constants.ts","webpack://srVisualizer/./src/simulator/megaminx/megaminxSimulator.ts","webpack://srVisualizer/./node_modules/gl-matrix/esm/common.js","webpack://srVisualizer/./node_modules/gl-matrix/esm/vec3.js","webpack://srVisualizer/./node_modules/gl-matrix/esm/mat4.js","webpack://srVisualizer/./src/geometry/object3d.ts","webpack://srVisualizer/./src/geometry/group.ts","webpack://srVisualizer/./src/math/utils.ts","webpack://srVisualizer/./src/geometry/face.ts","webpack://srVisualizer/./src/geometry/geometry.ts","webpack://srVisualizer/./src/geometry/dividedPentagon.ts","webpack://srVisualizer/./src/puzzles/megaminx.ts","webpack://srVisualizer/./src/rendering/scene.ts","webpack://srVisualizer/./src/rendering/customSvgRenderer.ts","webpack://srVisualizer/./src/svg/svg.ts","webpack://srVisualizer/./src/geometry/plane.ts","webpack://srVisualizer/./src/math/constants.ts","webpack://srVisualizer/./src/geometry/triangle.ts","webpack://srVisualizer/./src/puzzles/skewb.ts","webpack://srVisualizer/./src/puzzles/skewbNet.ts","webpack://srVisualizer/./src/index.ts","webpack://srVisualizer/./src/rendering/camera.ts","webpack://srVisualizer/webpack/bootstrap","webpack://srVisualizer/webpack/startup","webpack://srVisualizer/webpack/runtime/define property getters","webpack://srVisualizer/webpack/runtime/hasOwnProperty shorthand","webpack://srVisualizer/webpack/runtime/make namespace object"],"names":["root","factory","exports","module","define","amd","this","chunkArray","array","chunkSize","newSize","Math","ceil","length","Array","fill","map","_","index","slice","fillArray","value","Simulator","stickers","Map","faces","turns","label","has","size","toString","stickerIds","reduce","nextSticker","stickerId","set","push","faceId","changes","reverse","get","movingSticker","replacedSticker","cached","forEach","change","entries","entry","next","id","done","values","key","center","face","topLeft","topRight","bottomLeft","bottomRight","YELLOW","RED","BLUE","WHITE","ORANGE","GREEN","PURPLE","GREY","DARK_BLUE","LIGHT_YELLOW","LIGHT_GREEN","PINK","MEGAMINX_FACES","makeFaceTurnDefinitions","out","ARRAY_TYPE","Float32Array","create","translate","a","v","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","x","y","z","scale","random","PI","hypot","i","arguments","sqrt","Object3D","matrix","centroid","vector","rad","axis","s","c","t","b00","b01","b02","b10","b11","b12","b20","b21","b22","len","sin","cos","color","Group","objects","super","setObjects","object","degreesToRadians","degrees","polarToCartesian","radius","theta","calculateCentroid","vertices","cx","cy","cz","vertex","Face","indices","filter","includes","Geometry","DividedPentagon","layers","layerWidth","outRadius","pentagonOutRadius","radiusDiff","width","aSquared","angleRadians","cSquared","abs","layerWidthToRadiusDiff","verticies","r","layerVerticies","faceVerticies","firstLayerFace","totalPoints","currentPoint","layerPoints","downMap","downMapping","prevLayer","layerVertexNumbers","currentLayer","currentLayerPoint","f2isCorner","f1","f2","f3","shift","f4","indexOf","makeFaces","layer","mapping","previousPoints","vertexNumbers","segmentPoints","p1","p2","segments","pow","lineSegmentLength","points","unshift","b","lastPoint","concat","first","last","pop","OPTIMAL_LAYER_WIDTH","2","3","4","Megaminx","megaminxRadius","getLayerWidth","U","F","R","dr","dl","L","d","br","BR","BL","bl","rotate","sticker","group","colors","n","numStickers","setFaceColors","faceStickers","f","Scene","geometry","CustomSVGRenderer","height","minx","miny","svgWidth","svgHeight","strokeWidth","polygons","domElement","document","createElement","className","svgElement","createElementNS","setAttributeNS","createSVGElement","appendChild","scene","camera","svg","hasChildNodes","removeChild","lastChild","clearSVG","renderObject3D","renderPolygons","sort","p","polygon","transformations","renderGeometry","sortObjects","objectToScreen","applyTransformations","screenPoint","pointsAttribute","pointString","point","makePointsAttributeValue","colorValue","createPolygonElement","addPolygon","aToWorld","bToWorld","aCentroid","bCentroid","transforms","m","w","Plane","atan","Triangle","Skewb","centerWidth","cubeWidth","halfWidth","red","makeStickers","yellow","blue","orange","green","white","B","D","triangles","triangle","u","l","console","log","SkewbNet","rubiksCube","cubeNet","cubeTop","skewb","skewbNet","megaminx","pyraminx","pyraminxNet","megaminxNet","square1","square1Net","renderer","fovy","aspect","near","far","nf","tan","skewbSim","faceName","addFace","addTurn","doTurn","top","front","right","bottom","back","left","getValues","svgwidth","svgheight","planewidth","getInputs","m1","parseFloat","getElementById","m2","m3","m4","m5","m6","m7","m8","m9","m10","m11","m12","m13","m14","m15","m16","m00","m01","m02","m03","m20","m21","m22","m23","m30","m31","m32","m33","renderDemo","skewbFaceColors","setColors","add","g","render","svgStep","puzzle","addEventListener","event","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","definition","o","Object","defineProperty","enumerable","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAsB,aAAID,IAE1BD,EAAmB,aAAIC,IARzB,CASGK,MAAM,WACT,M,wCCEO,SAASC,EAAWC,EAAOC,GAC9B,MAAMC,EAAUC,KAAKC,KAAKJ,EAAMK,OAASJ,GACzC,OAAO,IAAIK,MAAMJ,GACZK,KAAK,MACLC,KAAI,CAACC,EAAGC,IAAUV,EAAMW,MAAMD,EAAQT,GAAYS,EAAQ,GAAKT,KAQjE,SAASW,EAAUP,EAAQQ,GAC9B,OAAO,IAAIP,MAAMD,GAAQE,KAAKM,G,kECtB3B,MAAMC,EACT,cACIhB,KAAKiB,SAAW,IAAIC,IACpBlB,KAAKmB,MAAQ,IAAID,IACjBlB,KAAKoB,MAAQ,IAAIF,IAiBrB,QAAQD,EAAUI,GACd,GAAIA,GAASrB,KAAKmB,MAAMG,IAAID,GACxB,KAAM,QAAQA,mBAERA,IACNA,GAASrB,KAAKmB,MAAMI,KAAO,GAAGC,YAGlC,MAAMC,EAAaR,EAASS,QAAO,CAACD,EAAYE,KAC5C,MAAMC,GAAa5B,KAAKiB,SAASM,KAAO,GAAGC,WAG3C,OAFAxB,KAAKiB,SAASY,IAAID,EAAWD,GAC7BF,EAAWK,KAAKF,GACTH,IACR,IAGH,OADAzB,KAAKmB,MAAMU,IAAIR,EAAOI,GACf,CACHM,OAAQV,EACRI,cAeR,QAAQO,EAASX,GACb,GAAIA,GAASrB,KAAKoB,MAAME,IAAID,GACxB,KAAM,QAAQA,mBAMlB,OAJUA,IACNA,GAASrB,KAAKoB,MAAMG,KAAO,GAAGC,YAElCxB,KAAKoB,MAAMS,IAAIR,EAAOW,GACfX,EAQX,OAAOA,EAAOY,GAAU,GACpB,MAAMD,EAAUhC,KAAKoB,MAAMc,IAAIb,GAC/B,IAAKW,EACD,KAAM,gBAAgBX,IAE1B,IAAIc,EAAgBF,EAAU,EAAI,EAC9BG,EAAkBH,EAAU,EAAI,EAChCI,EAAS,GACbL,EAAQM,SAAQC,IAEZF,EAAOE,EAAOH,IAAoBpC,KAAKiB,SAASiB,IAAIK,EAAOH,IAI3DpC,KAAKiB,SAASY,IAAIU,EAAOH,GAAkBC,EAAOE,EAAOJ,KAAmBnC,KAAKiB,SAASiB,IAAIK,EAAOJ,QAO7G,WACI,MAAMhB,EAAQnB,KAAKmB,MAAMqB,UACzB,IAAIC,EAAQtB,EAAMuB,OAClB,EAAG,CACC,MAAMjB,EAAagB,EAAM1B,MAAM,GAC/B,IAAIA,EAAQf,KAAKiB,SAASiB,IAAIT,EAAW,IACzC,IAAK,IAAIkB,KAAMlB,EACX,GAAIV,GAASf,KAAKiB,SAASiB,IAAIS,GAC3B,OAAO,EAEfF,EAAQtB,EAAMuB,cACRD,EAAMG,MAChB,OAAO,EAEX,YACI,IAAIC,EAAS,GAIb,OAHA7C,KAAKmB,MAAMmB,SAAQ,CAACb,EAAYqB,KAC5BD,EAAOC,GAAOrB,EAAWf,KAAIiC,GAAM3C,KAAKiB,SAASiB,IAAIS,QAElDE,GCFf,MAAME,EAAUC,GAASA,EAAK,GACxBC,EAAWD,GAASA,EAAK,GACzBE,EAAYF,GAASA,EAAK,GAC1BG,EAAcH,GAASA,EAAK,GAC5BI,EAAeJ,GAASA,EAAK,GClHtBK,EAAS,CAAEtC,MAAO,WAClBuC,EAAM,CAAEvC,MAAO,WACfwC,EAAO,CAAExC,MAAO,WAChByC,EAAQ,CAAEzC,MAAO,WACjB0C,EAAS,CAAE1C,MAAO,WAClB2C,EAAQ,CAAE3C,MAAO,WAEjB4C,EAAS,CAAE5C,MAAO,UAClB6C,EAAO,CAAE7C,MAAO,QAChB8C,EAAY,CAAE9C,MAAO,YACrB+C,EAAe,CAAE/C,MAAO,WACxBgD,EAAc,CAAEhD,MAAO,aACvBiD,EAAO,CAAEjD,MAAO,WCbhBkD,EAAiB,CAE1B,IACA,IACA,IACA,KACA,KACA,IAEA,IACA,KACA,KACA,KACA,KACA,KCifJ,SAASC,EAAwBlB,GAC7B,MAAO,CAEH,CAACA,EAAK,GAAIA,EAAK,IACf,CAACA,EAAK,GAAIA,EAAK,IACf,CAACA,EAAK,GAAIA,EAAK,IACf,CAACA,EAAK,GAAIA,EAAK,IACf,CAACA,EAAK,GAAIA,EAAK,IAEf,CAACA,EAAK,GAAIA,EAAK,KACf,CAACA,EAAK,IAAKA,EAAK,IAChB,CAACA,EAAK,GAAIA,EAAK,IACf,CAACA,EAAK,GAAIA,EAAK,IACf,CAACA,EAAK,GAAIA,EAAK,KCvgBhB,ICQDmB,EDPKC,EAAqC,oBAAjBC,aAA+BA,aAAe7D,MEMtE,SAAS8D,IACd,IAAIH,EAAM,IAAI,EAAoB,IAqBlC,OAnBI,GAAuBE,eACzBF,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,GAGZA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,EA+aF,SAASI,EAAUJ,EAAKK,EAAGC,GAChC,IAGIC,EAAKC,EAAKC,EAAKC,EACfC,EAAKC,EAAKC,EAAKC,EACfC,EAAKC,EAAKC,EAAKC,EALfC,EAAIb,EAAE,GACNc,EAAId,EAAE,GACNe,EAAIf,EAAE,GAyCV,OApCID,IAAML,GACRA,EAAI,IAAMK,EAAE,GAAKc,EAAId,EAAE,GAAKe,EAAIf,EAAE,GAAKgB,EAAIhB,EAAE,IAC7CL,EAAI,IAAMK,EAAE,GAAKc,EAAId,EAAE,GAAKe,EAAIf,EAAE,GAAKgB,EAAIhB,EAAE,IAC7CL,EAAI,IAAMK,EAAE,GAAKc,EAAId,EAAE,GAAKe,EAAIf,EAAE,IAAMgB,EAAIhB,EAAE,IAC9CL,EAAI,IAAMK,EAAE,GAAKc,EAAId,EAAE,GAAKe,EAAIf,EAAE,IAAMgB,EAAIhB,EAAE,MAE9CE,EAAMF,EAAE,GACRG,EAAMH,EAAE,GACRI,EAAMJ,EAAE,GACRK,EAAML,EAAE,GACRM,EAAMN,EAAE,GACRO,EAAMP,EAAE,GACRQ,EAAMR,EAAE,GACRS,EAAMT,EAAE,GACRU,EAAMV,EAAE,GACRW,EAAMX,EAAE,GACRY,EAAMZ,EAAE,IACRa,EAAMb,EAAE,IACRL,EAAI,GAAKO,EACTP,EAAI,GAAKQ,EACTR,EAAI,GAAKS,EACTT,EAAI,GAAKU,EACTV,EAAI,GAAKW,EACTX,EAAI,GAAKY,EACTZ,EAAI,GAAKa,EACTb,EAAI,GAAKc,EACTd,EAAI,GAAKe,EACTf,EAAI,GAAKgB,EACThB,EAAI,IAAMiB,EACVjB,EAAI,IAAMkB,EACVlB,EAAI,IAAMO,EAAMY,EAAIR,EAAMS,EAAIL,EAAMM,EAAIhB,EAAE,IAC1CL,EAAI,IAAMQ,EAAMW,EAAIP,EAAMQ,EAAIJ,EAAMK,EAAIhB,EAAE,IAC1CL,EAAI,IAAMS,EAAMU,EAAIN,EAAMO,EAAIH,EAAMI,EAAIhB,EAAE,IAC1CL,EAAI,IAAMU,EAAMS,EAAIL,EAAMM,EAAIF,EAAMG,EAAIhB,EAAE,KAGrCL,EAWF,SAASsB,EAAMtB,EAAKK,EAAGC,GAC5B,IAAIa,EAAIb,EAAE,GACNc,EAAId,EAAE,GACNe,EAAIf,EAAE,GAiBV,OAhBAN,EAAI,GAAKK,EAAE,GAAKc,EAChBnB,EAAI,GAAKK,EAAE,GAAKc,EAChBnB,EAAI,GAAKK,EAAE,GAAKc,EAChBnB,EAAI,GAAKK,EAAE,GAAKc,EAChBnB,EAAI,GAAKK,EAAE,GAAKe,EAChBpB,EAAI,GAAKK,EAAE,GAAKe,EAChBpB,EAAI,GAAKK,EAAE,GAAKe,EAChBpB,EAAI,GAAKK,EAAE,GAAKe,EAChBpB,EAAI,GAAKK,EAAE,GAAKgB,EAChBrB,EAAI,GAAKK,EAAE,GAAKgB,EAChBrB,EAAI,IAAMK,EAAE,IAAMgB,EAClBrB,EAAI,IAAMK,EAAE,IAAMgB,EAClBrB,EAAI,IAAMK,EAAE,IACZL,EAAI,IAAMK,EAAE,IACZL,EAAI,IAAMK,EAAE,IACZL,EAAI,IAAMK,EAAE,IACLL,EFrhBW9D,KAAKqF,OAUZrF,KAAKsF,GAuBbtF,KAAKuF,QAAOvF,KAAKuF,MAAQ,WAI5B,IAHA,IAAIL,EAAI,EACJM,EAAIC,UAAUvF,OAEXsF,KACLN,GAAKO,UAAUD,GAAKC,UAAUD,GAGhC,OAAOxF,KAAK0F,KAAKR,KG/CZ,MAAMS,EACT,cACIhG,KAAKiG,OAAS,IACdjG,KAAKkG,SAAW,CAAC,EAAG,EAAG,GAE3B,UAAUC,GACN,EAAenG,KAAKiG,OAAQjG,KAAKiG,OAAQE,GAE7C,OAAOC,EAAKC,ID+hBT,SAAgBlC,EAAKK,EAAG4B,EAAKC,GAClC,IAIIC,EAAGC,EAAGC,EACN9B,EAAKC,EAAKC,EAAKC,EACfC,EAAKC,EAAKC,EAAKC,EACfC,EAAKC,EAAKC,EAAKC,EACfoB,EAAKC,EAAKC,EACVC,EAAKC,EAAKC,EACVC,EAAKC,EAAKC,EAVV3B,EAAIe,EAAK,GACTd,EAAIc,EAAK,GACTb,EAAIa,EAAK,GACTa,EAAM7G,KAAKuF,MAAMN,EAAGC,EAAGC,GASvB0B,EFhjBe,OEqjBnB5B,GADA4B,EAAM,EAAIA,EAEV3B,GAAK2B,EACL1B,GAAK0B,EACLZ,EAAIjG,KAAK8G,IAAIf,GAEbI,EAAI,GADJD,EAAIlG,KAAK+G,IAAIhB,IAEb1B,EAAMF,EAAE,GACRG,EAAMH,EAAE,GACRI,EAAMJ,EAAE,GACRK,EAAML,EAAE,GACRM,EAAMN,EAAE,GACRO,EAAMP,EAAE,GACRQ,EAAMR,EAAE,GACRS,EAAMT,EAAE,GACRU,EAAMV,EAAE,GACRW,EAAMX,EAAE,GACRY,EAAMZ,EAAE,IACRa,EAAMb,EAAE,IAERiC,EAAMnB,EAAIA,EAAIkB,EAAID,EAClBG,EAAMnB,EAAID,EAAIkB,EAAIhB,EAAIc,EACtBK,EAAMnB,EAAIF,EAAIkB,EAAIjB,EAAIe,EACtBM,EAAMtB,EAAIC,EAAIiB,EAAIhB,EAAIc,EACtBO,EAAMtB,EAAIA,EAAIiB,EAAID,EAClBO,EAAMtB,EAAID,EAAIiB,EAAIlB,EAAIgB,EACtBS,EAAMzB,EAAIE,EAAIgB,EAAIjB,EAAIe,EACtBU,EAAMzB,EAAIC,EAAIgB,EAAIlB,EAAIgB,EACtBW,EAAMzB,EAAIA,EAAIgB,EAAID,EAElBpC,EAAI,GAAKO,EAAM+B,EAAM3B,EAAM4B,EAAMxB,EAAMyB,EACvCxC,EAAI,GAAKQ,EAAM8B,EAAM1B,EAAM2B,EAAMvB,EAAMwB,EACvCxC,EAAI,GAAKS,EAAM6B,EAAMzB,EAAM0B,EAAMtB,EAAMuB,EACvCxC,EAAI,GAAKU,EAAM4B,EAAMxB,EAAMyB,EAAMrB,EAAMsB,EACvCxC,EAAI,GAAKO,EAAMkC,EAAM9B,EAAM+B,EAAM3B,EAAM4B,EACvC3C,EAAI,GAAKQ,EAAMiC,EAAM7B,EAAM8B,EAAM1B,EAAM2B,EACvC3C,EAAI,GAAKS,EAAMgC,EAAM5B,EAAM6B,EAAMzB,EAAM0B,EACvC3C,EAAI,GAAKU,EAAM+B,EAAM3B,EAAM4B,EAAMxB,EAAMyB,EACvC3C,EAAI,GAAKO,EAAMqC,EAAMjC,EAAMkC,EAAM9B,EAAM+B,EACvC9C,EAAI,GAAKQ,EAAMoC,EAAMhC,EAAMiC,EAAM7B,EAAM8B,EACvC9C,EAAI,IAAMS,EAAMmC,EAAM/B,EAAMgC,EAAM5B,EAAM6B,EACxC9C,EAAI,IAAMU,EAAMkC,EAAM9B,EAAM+B,EAAM3B,EAAM4B,EAEpCzC,IAAML,IAERA,EAAI,IAAMK,EAAE,IACZL,EAAI,IAAMK,EAAE,IACZL,EAAI,IAAMK,EAAE,IACZL,EAAI,IAAMK,EAAE,MC/lBR,CAAYxE,KAAKiG,OAAQjG,KAAKiG,OAAQG,EAAKC,GAE/C,MAAM5B,GACF,EAAWzE,KAAKiG,OAAQjG,KAAKiG,OAAQxB,GAEzC,SAAS4C,GACLrH,KAAKqH,MAAQA,GCfd,MAAMC,UAActB,EACvB,YAAYuB,EAAU,IAClBC,QACAxH,KAAKyH,WAAWF,GAEpB,WAAWA,GACPvH,KAAKuH,QAAUA,EAEnB,UAAUG,GACN1H,KAAKuH,QAAQzF,KAAK4F,GAEtB,YAAYvB,GACRnG,KAAKkG,SAAWC,GHiBjB,SAAS,EAAM3B,GACpB,IAAIL,EAAM,IAAI,EAAoB,GAIlC,OAHAA,EAAI,GAAKK,EAAE,GACXL,EAAI,GAAKK,EAAE,GACXL,EAAI,GAAKK,EAAE,GACJL,EIlCF,SAASwD,EAAiBC,GAC7B,OAAQvH,KAAKsF,GAAKiC,EAAW,IAE1B,SAASC,EAAiBC,EAAQC,GAGrC,MAAO,CAFGD,EAASzH,KAAK+G,IAAIW,GAClBD,EAASzH,KAAK8G,IAAIY,IA2BzB,SAASC,EAAkBC,GAC9B,IAAIC,EAAK,EAAGC,EAAK,EAAGC,EAAK,EASzB,OARAH,EAAS3F,SAAQ+F,IACbH,GAAMG,EAAO,GACbF,GAAME,EAAO,GACbD,GAAMC,EAAO,MAEjBH,GAAMD,EAAS1H,OACf4H,GAAMF,EAAS1H,OACf6H,GAAMH,EAAS1H,OACR,EAAW,CAAC2H,EAAIC,EAAIC,IJ9BzBjE,EAAM,IAAI,EAAoB,GAE9B,GAAuBE,eACzBF,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,GKdN,MAAMmE,EAMT,YAAYC,EAASN,EAAUZ,GAC3BrH,KAAKuI,QAAUA,EACfvI,KAAKqH,MAAQA,EACTY,GACAjI,KAAKgI,kBAAkBC,GAM/B,kBAAkBA,GACdjI,KAAKkG,SAAW8B,EAEhBC,EAASO,QAAO,CAAC/D,EAAGoB,IAAM7F,KAAKuI,QAAQE,SAAS5C,OCrBjD,MAAM6C,UAAiB1C,EAC1B,YAAYiC,EAAU9G,GAClBqG,QACAxH,KAAKiI,SAAWA,EAChBjI,KAAKmB,MAAQA,EACbnB,KAAKkG,SAAW8B,EAAkBhI,KAAKiI,WCJxC,MAAMU,UAAwBD,EAOjC,YAAYrB,EAAOuB,EAAS,EAAGrI,EAAS,IAAKsI,EAAa,IAEtD,MAAMC,EHWP,SAA2BvI,GAC9B,OAAOA,GAAU,EAAIF,KAAK8G,IAAI9G,KAAKsF,GAAK,IGZlBoD,CAAkBxI,GAC9ByI,EAUd,SAAgCC,GAC5B,MAAMC,EAAWD,EAAQA,EACnBE,EAAe,GAAK9I,KAAKsF,GAAK,IAE9ByD,EAAW,EAAIF,EAAY,EAAIA,EAAW7I,KAAK+G,IAAI+B,GAEzD,OADa,EAAI9I,KAAK0F,KAAK1F,KAAKgJ,IAAIH,EAAWE,IAfxBE,CAAuBT,GAEpCZ,EAwId,SAAuBW,EAAQd,EAAQkB,EAAYH,GAC/C,IAAIU,EAAY,GAChB,IAAK,IAAI1D,EAAI,EAAGA,EAAI+C,EAAQ/C,IAAK,CAC7B,MAAM2D,EAAI1B,EAAUkB,EAAanD,EACjC0D,EAAY,IAAIA,KAAcE,EAAe5D,EAAG2D,EAAGX,IAEvD,OAAOU,EA9IcG,CAAcd,EADPE,EAAaE,GAAcJ,EAAS,GACJI,EAAYH,GACpErB,MAAMS,EA4Cd,SAAmBW,EAAQvB,EAAOY,GAC9B,IAAI9G,EAAQ,GACZ,MAAMwI,EAAiB,IAAIrB,EAAK,CAAC,EAAG,EAAG,EAAG,EAAG,GAAIL,EAAUZ,GAC3DlG,EAAMW,KAAK6H,GACX,IAAIC,EAAc,EACdC,EAAe,EACnB,IAAK,IAAIhE,EAAI,EAAGA,EAAI+C,EAAQ/C,IAAK,CAC7B,MAAMiE,EAAc,EAAS,GAAJjE,EACzB+D,GAAeE,EACf,MAAMC,EAAUC,EAAYnE,GACtBoE,EAAYC,EAAmBrE,EAAI,GACnCsE,EAAeD,EAAmBrE,GACxC,KAAOgE,EAAeD,GAAa,CAC/B,MAAMQ,EAAoBP,GAAgBI,EAAUA,EAAU1J,OAAS,GAAK,GAE5E,GADmB,GAAuBuJ,EAAc,IAAO,EAC/C,CACZD,IACA,SAEJ,MAAMQ,GAAcD,EAAoB,IAAMN,EAAc,IAAO,EACnE,IAAIQ,EAAKT,EACLU,EAAKJ,GAAcC,EAAoB,GAAKD,EAAa5J,QACzDiK,EAAKH,EACHE,EAAK,EACLR,EAAQU,QACVC,EAAKL,EACHN,EAAQU,QACRR,GAAWA,EAAUU,QAAQH,GAAM,EAAIP,EAAU1J,QAAU0J,EAAU1J,QAC3EsJ,IACA1I,EAAMW,KAAK,IAAIwG,EAAK,CAACgC,EAAIC,EAAIC,EAAIE,GAAKzC,EAAUZ,KAGxD,OAAOlG,EA5EayJ,CAAUhC,EAAQvB,EAAOY,KAmBjD,SAAS+B,EAAYa,GACjB,GAAIA,EAAQ,EACR,MAAO,GAEX,IAAIC,EAAU,GACd,MAAMhB,EAAc,EAAmB,IAAbe,EAAQ,GAClC,IAAIE,EAAiB,GAAKF,EAAQ,IAAMA,EAAQ,GAChD,IAAK,IAAIhF,EAAI,EAAGA,EAAIiE,EAAajE,IAC7BiF,EAAQhJ,KAAK+D,EAAIkF,GACblF,GAAKiE,EAAc,IAAO,GAC1BgB,EAAQhJ,KAAK+D,EAAIkF,GAKzB,OAFAD,EAAQhJ,KAAKgJ,EAAQL,SACrBK,EAAQhJ,KAAKgJ,EAAQL,SACdK,EAEX,SAASZ,EAAmBW,GACxB,IAAIE,EAAiB,EAAIF,EAAQA,EAC7BG,EAAgB,GACpB,IAAK,IAAInF,EAAI,EAAGiE,EAAc,EAAa,GAARe,EAAahF,EAAIiE,EAAajE,IAC7DmF,EAAclJ,KAAK+D,EAAIkF,GAE3B,OAAOC,EA2CX,SAASC,EAAcC,EAAIC,EAAIC,EAAUvC,GACrC,GAAiB,IAAbuC,EACA,MAAO,CAAC,CAACF,EAAG,GAAIA,EAAG,GAAI,GAAI,CAACC,EAAG,GAAIA,EAAG,GAAI,IAE9C,MAAM5K,EHhGH,SAA2B2K,EAAIC,GAClC,OAAO9K,KAAK0F,KAAK1F,KAAKgL,IAAIF,EAAG,GAAKD,EAAG,GAAI,GAAK7K,KAAKgL,IAAIF,EAAG,GAAKD,EAAG,GAAI,IG+FvDI,CAAkBJ,EAAIC,GACrC,IAAII,EAAS,GACb,IAAK,IAAI1F,EAAIuF,EAAUvF,EAAI,EAAGA,IAAK,CAE/B,IAAIrB,EAAI,CACJ0G,EAAG,IAAOC,EAAG,GAAKD,EAAG,IAAM,EAAYrC,EAAahD,EACpDqF,EAAG,IAAOC,EAAG,GAAKD,EAAG,IAAM,EAAYrC,EAAahD,EACpD,GAEJ0F,EAAOC,QAAQhH,GAEf,IAAIiH,EAAI,CACJN,EAAG,IAAOD,EAAG,GAAKC,EAAG,IAAM,EAAYtC,EAAahD,EACpDsF,EAAG,IAAOD,EAAG,GAAKC,EAAG,IAAM,EAAYtC,EAAahD,EACpD,GAEJ0F,EAAOzJ,KAAK2J,GAIhB,OAFAF,EAAOC,QAAQ,CAACN,EAAG,GAAIA,EAAG,GAAI,IAC9BK,EAAOzJ,KAAK,CAACqJ,EAAG,GAAIA,EAAG,GAAI,IACpBI,EAEX,SAAS9B,EAAeoB,EAAO/C,EAAQe,GACnC,IAAIU,EAAY,GAChB,IAAK,IAAI1D,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,MACMpB,EAAIoD,EAAiBC,EADb,GAAO,EAAIzH,KAAKsF,IAAM,EAAItF,KAAKsF,GAAK,IAElD,GAAI4D,EAAUhJ,OAAS,EAAG,CACtB,MAAMmL,EAAYnC,EAAUA,EAAUhJ,OAAS,GACzCgL,EAASN,EAAc,CAACS,EAAU,GAAIA,EAAU,IAAKjH,EAAGoG,EAAOhC,GACrE0C,EAAOd,QACPlB,EAAYA,EAAUoC,OAAOJ,QAG7BhC,EAAUzH,KAAK,CAAC2C,EAAE,GAAIA,EAAE,GAAI,IAIpC,MAAMmH,EAAQrC,EAAU,GAClBsC,EAAOtC,EAAUA,EAAUhJ,OAAS,GACpCgL,EAASN,EAAc,CAACY,EAAK,GAAIA,EAAK,IAAK,CAACD,EAAM,GAAIA,EAAM,IAAKf,EAAOhC,GAI9E,OAHA0C,EAAOO,MACPP,EAAOd,QACPlB,EAAYA,EAAUoC,OAAOJ,GACtBhC,EChJX,MAAMwC,EAAsB,CACxBC,EAAG,GACHC,EAAG,IACHC,EAAG,MAKA,MAAMC,EACT,YAAYvD,EAAS,GACjB5I,KAAK4I,OAASA,EACd,MAAMrI,EAAS,IACT6L,EJcH,KAAe/L,KAAK0F,KAAK,IAAW,IAAY1F,KAAK0F,KAAK,IIbvD8C,EARd,SAAuBtI,EAAQqI,GAC3B,OAAOmD,EAAoBnD,IAOUrI,KAPqB,IAATqI,GAO1ByD,CAAc9L,EAAQqI,GAEzC5I,KAAKsM,EAAI,IAAI3D,EAAgBnF,EAAOoF,EAAQrI,EAAQsI,GACpD7I,KAAKuM,EAAI,IAAI5D,EAAgBrF,EAAKsF,EAAQrI,EAAQsI,GAClD7I,KAAKwM,EAAI,IAAI7D,EAAgBpF,EAAMqF,EAAQrI,EAAQsI,GACnD7I,KAAKyM,GAAK,IAAI9D,EAAgB3E,EAAM4E,EAAQrI,EAAQsI,GACpD7I,KAAK0M,GAAK,IAAI/D,EAAgB7E,EAAc8E,EAAQrI,EAAQsI,GAC5D7I,KAAK2M,EAAI,IAAIhE,EAAgBjF,EAAOkF,EAAQrI,EAAQsI,GAEpD7I,KAAK4M,EAAI,IAAIjE,EAAgB/E,EAAMgF,EAAQrI,EAAQsI,GACnD7I,KAAK6M,GAAK,IAAIlE,EAAgB5E,EAAa6E,EAAQrI,EAAQsI,GAC3D7I,KAAK8M,GAAK,IAAInE,EAAgBtF,EAAQuF,EAAQrI,EAAQsI,GACtD7I,KAAK+M,GAAK,IAAIpE,EAAgBhF,EAAQiF,EAAQrI,EAAQsI,GACtD7I,KAAKgN,GAAK,IAAIrE,EAAgB9E,EAAW+E,EAAQrI,EAAQsI,GACzD7I,KAAKyL,EAAI,IAAI9C,EAAgBlF,EAAQmF,EAAQrI,EAAQsI,GACrD7I,KAAKuM,EAAEhI,UAAU,CAAC,EAAG,EAAG6H,IACxBpM,KAAKyL,EAAEwB,OAAO5M,KAAKsF,GAAI,CAAC,EAAG,EAAG,IAC9B3F,KAAKyL,EAAEwB,OAAO5M,KAAKsF,GAAI,CAAC,EAAG,EAAG,IAC9B3F,KAAKyL,EAAElH,UAAU,CAAC,EAAG,EAAG6H,IACxBpM,KAAKsM,EAAEW,OAAO5M,KAAKsF,GAAI,CAAC,EAAG,EAAG,IAC9B3F,KAAKsM,EAAEW,QAAQ,IAAM,QAAU5M,KAAKsF,GAAK,IAAK,CAAC,EAAG,EAAG,IACrD3F,KAAKsM,EAAE/H,UAAU,CAAC,EAAG,EAAG6H,IACxBpM,KAAK2M,EAAEM,OAAO,GAAK5M,KAAKsF,GAAK,IAAK,CAAC,EAAG,EAAG,IACzC3F,KAAK2M,EAAEM,OAAO5M,KAAKsF,GAAI,CAAC,EAAG,EAAG,IAC9B3F,KAAK2M,EAAEM,QAAQ,IAAM,QAAU5M,KAAKsF,GAAK,IAAK,CAAC,EAAG,EAAG,IACrD3F,KAAK2M,EAAEpI,UAAU,CAAC,EAAG,EAAG6H,IACxBpM,KAAKwM,EAAES,OAAO,GAAK5M,KAAKsF,GAAK,IAAK,CAAC,EAAG,EAAG,IACzC3F,KAAKwM,EAAES,OAAO5M,KAAKsF,GAAK,EAAG,CAAC,EAAG,EAAG,IAClC3F,KAAKwM,EAAES,QAAQ,IAAM,QAAU5M,KAAKsF,GAAK,IAAK,CAAC,EAAG,EAAG,IACrD3F,KAAKwM,EAAEjI,UAAU,CAAC,EAAG,EAAG6H,IACxBpM,KAAKyM,GAAGQ,OAAO,GAAK5M,KAAKsF,GAAK,IAAK,CAAC,EAAG,EAAG,IAC1C3F,KAAKyM,GAAGQ,QAAQ5M,KAAKsF,GAAK,EAAG,CAAC,EAAG,EAAG,IACpC3F,KAAKyM,GAAGQ,QAAQ,IAAM,QAAU5M,KAAKsF,GAAK,IAAK,CAAC,EAAG,EAAG,IACtD3F,KAAKyM,GAAGlI,UAAU,CAAC,EAAG,EAAG6H,IACzBpM,KAAK0M,GAAGO,OAAO,GAAK5M,KAAKsF,GAAK,IAAK,CAAC,EAAG,EAAG,IAC1C3F,KAAK0M,GAAGO,QAAQ,EAAI5M,KAAKsF,GAAK,EAAG,CAAC,EAAG,EAAG,IACxC3F,KAAK0M,GAAGO,QAAQ,IAAM,QAAU5M,KAAKsF,GAAK,IAAK,CAAC,EAAG,EAAG,IACtD3F,KAAK0M,GAAGnI,UAAU,CAAC,EAAG,EAAG6H,IACzBpM,KAAK+M,GAAGE,OAAO5M,KAAKsF,GAAK,EAAG,CAAC,EAAG,EAAG,IACnC3F,KAAK+M,GAAGE,QAAQ,OAAS5M,KAAKsF,GAAK,IAAK,CAAC,EAAG,EAAG,IAC/C3F,KAAK+M,GAAGxI,UAAU,CAAC,EAAG,EAAG6H,IACzBpM,KAAK8M,GAAGG,QAAQ5M,KAAKsF,GAAK,EAAG,CAAC,EAAG,EAAG,IACpC3F,KAAK8M,GAAGG,QAAQ,OAAS5M,KAAKsF,GAAK,IAAK,CAAC,EAAG,EAAG,IAC/C3F,KAAK8M,GAAGvI,UAAU,CAAC,EAAG,EAAG6H,IACzBpM,KAAKgN,GAAGC,OAAO,EAAI5M,KAAKsF,GAAK,EAAG,CAAC,EAAG,EAAG,IACvC3F,KAAKgN,GAAGC,QAAQ,OAAS5M,KAAKsF,GAAK,IAAK,CAAC,EAAG,EAAG,IAC/C3F,KAAKgN,GAAGzI,UAAU,CAAC,EAAG,EAAG6H,IACzBpM,KAAK4M,EAAEK,OAAO,EAAI5M,KAAKsF,GAAK,EAAG,CAAC,EAAG,EAAG,IACtC3F,KAAK4M,EAAEK,QAAQ,OAAS5M,KAAKsF,GAAK,IAAK,CAAC,EAAG,EAAG,IAC9C3F,KAAK4M,EAAErI,UAAU,CAAC,EAAG,EAAG6H,IACxBpM,KAAK6M,GAAGI,OAAO,EAAI5M,KAAKsF,GAAK,EAAG,CAAC,EAAG,EAAG,IACvC3F,KAAK6M,GAAGI,QAAQ,OAAS5M,KAAKsF,GAAK,IAAK,CAAC,EAAG,EAAG,IAC/C3F,KAAK6M,GAAGtI,UAAU,CAAC,EAAG,EAAG6H,IACzBpM,KAAKiB,SAAW,CACZjB,KAAKsM,EAAGtM,KAAKuM,EAAGvM,KAAKwM,EAAGxM,KAAKyM,GAAIzM,KAAK0M,GAAI1M,KAAK2M,EAC/C3M,KAAK4M,EAAG5M,KAAK6M,GAAI7M,KAAK8M,GAAI9M,KAAK+M,GAAI/M,KAAKgN,GAAIhN,KAAKyL,GAErDzL,KAAKiB,SAASqB,SAAQ4K,IAClBA,EAAQ/L,MAAM,GAAGkG,MAAQ,CAAEtG,MAAO,WAEtCf,KAAKmN,MAAQ,IAAI7F,EAAMtH,KAAKiB,UAEhC,UAAUmM,GACN,MAAMC,EAAIrN,KAAK4I,OACT0E,EAAe,EAAID,EAAIA,EAAK,EAAIA,EAAK,EAC3C,IAAKf,EAAGE,EAAGD,EAAGE,EAAIC,EAAIC,EAAGC,EAAGC,EAAIC,EAAIC,EAAIC,EAAIvB,GAAKxL,EAAWmN,EAAQE,GACpEtN,KAAKuN,cAAcvN,KAAKsM,EAAGA,GAC3BtM,KAAKuN,cAAcvN,KAAKwM,EAAGA,GAC3BxM,KAAKuN,cAAcvN,KAAKuM,EAAGA,GAC3BvM,KAAKuN,cAAcvN,KAAK4M,EAAGA,GAC3B5M,KAAKuN,cAAcvN,KAAK2M,EAAGA,GAC3B3M,KAAKuN,cAAcvN,KAAKyL,EAAGA,GAC3BzL,KAAKuN,cAAcvN,KAAKyM,GAAIA,GAC5BzM,KAAKuN,cAAcvN,KAAK0M,GAAIA,GAC5B1M,KAAKuN,cAAcvN,KAAK6M,GAAIA,GAC5B7M,KAAKuN,cAAcvN,KAAK8M,GAAIA,GAC5B9M,KAAKuN,cAAcvN,KAAK+M,GAAIA,GAC5B/M,KAAKuN,cAAcvN,KAAKgN,GAAIA,GAEhC,cAAcQ,EAAcJ,GACxBI,EAAarM,MAAMmB,SAAQ,CAACmL,EAAG5H,KACvBuH,GAAUA,EAAOvH,KACjB4H,EAAEpG,MAAQ+F,EAAOvH,QCpG1B,MAAM6H,EACT,cACI1N,KAAKuH,QAAU,GAEnB,IAAIoG,GACA3N,KAAKuH,QAAQzF,KAAK6L,ICDnB,MAAMC,EACT,YAAY3E,EAAO4E,EAAQC,EAAMC,EAAMC,EAAUC,GAC7CjO,KAAKkO,YAAc,QACnBlO,KAAKmO,SAAW,GAChBnO,KAAKoO,WAAaC,SAASC,cAAc,OACzCtO,KAAKoO,WAAWG,UAAY,eAC5BvO,KAAKwO,WCVN,SAA0BvF,EAAO4E,EAAQC,EAAMC,EAAMC,EAAUC,GAClE,MAAMO,EAAaH,SAASI,gBAAgB,6BAA8B,OAK1E,OAJAD,EAAWE,eAAe,KAAM,QAASzF,EAAMzH,YAC/CgN,EAAWE,eAAe,KAAM,SAAUb,EAAOrM,YACjDgN,EAAWE,eAAe,KAAM,UAAW,GAAGZ,KAAQC,KAAQC,KAAYC,KAC1EO,EAAWE,eAAe,KAAM,KAAM,iBAC/BF,EDIeG,CAAiB1F,EAAO4E,EAAQC,EAAMC,EAAMC,EAAUC,GACxEjO,KAAKoO,WAAWQ,YAAY5O,KAAKwO,YAErC,OAAOK,EAAOC,GACV9O,KAAKmO,SAAW,GCOjB,SAAkBY,GACrB,KAAOA,EAAIC,iBACPD,EAAIE,YAAYF,EAAIG,WDRpBC,CAASnP,KAAKwO,YAEdK,EAAMtH,QAAQjF,SAAQoF,IAClB1H,KAAKoP,eAAe1H,EAAQoH,EAAQ,OAExC9O,KAAKqP,iBAET,iBACIrP,KAAKmO,SAASmB,MAAK,CAAC9K,EAAGiH,IACZjH,EAAE0B,SAAS,GAAKuF,EAAEvF,SAAS,KAEtClG,KAAKmO,SAAS7L,SAAQiN,GAAKvP,KAAKwO,WAAWI,YAAYW,EAAEC,WAE7D,WAAWA,GACPxP,KAAKmO,SAASrM,KAAK0N,GAEvB,eAAe9H,EAAQoH,EAAQW,GAC3B,GAAI/H,aAAkBgB,EAClB1I,KAAK0P,eAAehI,EAAQoH,EAAQW,QAEnC,GAAI/H,aAAkBJ,EAAO,CAC9B,IAAI6F,EAAQzF,EACZ1H,KAAK2P,YAAYxC,EAAM5F,QAASuH,EAAQ,CAAC3B,EAAMlH,UAAWwJ,IAC1DtC,EAAM5F,QAAQjF,SAAQoF,IAClB1H,KAAKoP,eAAe1H,EAAQoH,EAAQ,CAAC3B,EAAMlH,UAAWwJ,QAIlE,eAAe/H,EAAQoH,EAAQW,GAE3B/H,EAAOvG,MAAMmB,SAAQU,IACjB,IAAIuI,EAAS,GACbvI,EAAKuF,QACA7H,KAAIE,GAAS8G,EAAOO,SAASrH,KAC7B0B,SAAQ+F,IACT,IAAIuH,EAAiB,CAAClI,EAAOzB,UAAWwJ,EAAiBX,EAAO7I,QAC5DxB,EAAIzE,KAAK6P,qBAAqBxH,EAAQuH,GAEtCE,EVkFb,SAAkB3L,EAAKK,EAAGiH,GAI/B,OAHAtH,EAAI,GAAKK,EAAE,GAAKiH,EAAE,GAClBtH,EAAI,GAAKK,EAAE,GAAKiH,EAAE,GAClBtH,EAAI,GAAKK,EAAE,GAAKiH,EAAE,GACXtH,EUtFyB,CAAcM,EAAGA,EAAG,CAAC,GAAI,EAAG,IAC9C8G,EAAOzJ,KAAKgO,MAEhB,MAAMN,EChDX,SAA8BjE,EAAQlE,EAAO6G,GAChD,MAAMsB,EAAUnB,SAASI,gBAAgB,6BAA8B,WACjEsB,EAgBV,SAAkCxE,GAC9B,OAAOA,EAAO7J,QAAO,CAACsO,EAAaC,IACxB,GAAGD,EAAcA,EAAc,IAAM,KAAKC,EAAM,OAAOA,EAAM,MACrE,IAnBqBC,CAAyB3E,GAC3C4E,EAAa9I,EAAQA,EAAMtG,MAAQ,QAQzC,OAPAyO,EAAQd,eAAe,KAAM,SAAUqB,GACvCP,EAAQd,eAAe,KAAM,OAAQyB,GACjCjC,IACAsB,EAAQd,eAAe,KAAM,SAAU,WACvCc,EAAQd,eAAe,KAAM,eAAgBR,IAEjDsB,EAAQd,eAAe,KAAM,kBAAmB,SACzCc,EDqCiBY,CAAqB7E,EAAQvI,EAAKqE,OAASK,EAAOL,MAAOrH,KAAKkO,aAC9ElO,KAAKqQ,WAAW,CACZb,UACAtJ,SAAUlG,KAAK6P,qBAAqB7M,EAAKkD,SAAU,CAACwB,EAAOzB,UAAWwJ,SAIlF,UAAUtO,EAAOuG,EAAQ+H,GACrBtO,EAAMmO,MAAK,CAAC9K,EAAGiH,KACX,IAAI6E,EAAW,CAAC5I,EAAOzB,UAAWwJ,GAC9Bc,EAAW,CAAC7I,EAAOzB,UAAWwJ,GAC9Be,EAAYxQ,KAAK6P,qBAAqBrL,EAAE0B,SAAUoK,GAClDG,EAAYzQ,KAAK6P,qBAAqBpE,EAAEvF,SAAUqK,GAEtD,OAAOC,EAAU,GAAKC,EAAU,MAGxC,YAAYlJ,EAASuH,EAAQW,GACzBlI,EAAQ+H,MAAK,CAAC9K,EAAGiH,KACb,IAAI6E,EAAW,CAAC9L,EAAEyB,UAAWwJ,GACzBc,EAAW,CAAC9E,EAAExF,UAAWwJ,GACzBe,EAAYxQ,KAAK6P,qBAAqBrL,EAAE0B,SAAUoK,GAClDG,EAAYzQ,KAAK6P,qBAAqBpE,EAAEvF,SAAUqK,GAEtD,OAAOC,EAAU,GAAKC,EAAU,MAGxC,qBAAqBpI,EAAQqI,GACzB,OAAOA,EAAWhP,QAAO,CAAC+C,EAAG+B,IV2Y9B,SAAuBrC,EAAKK,EAAGmM,GACpC,IAAIrL,EAAId,EAAE,GACNe,EAAIf,EAAE,GACNgB,EAAIhB,EAAE,GACNoM,EAAID,EAAE,GAAKrL,EAAIqL,EAAE,GAAKpL,EAAIoL,EAAE,IAAMnL,EAAImL,EAAE,IAK5C,OAJAC,EAAIA,GAAK,EACTzM,EAAI,IAAMwM,EAAE,GAAKrL,EAAIqL,EAAE,GAAKpL,EAAIoL,EAAE,GAAKnL,EAAImL,EAAE,KAAOC,EACpDzM,EAAI,IAAMwM,EAAE,GAAKrL,EAAIqL,EAAE,GAAKpL,EAAIoL,EAAE,GAAKnL,EAAImL,EAAE,KAAOC,EACpDzM,EAAI,IAAMwM,EAAE,GAAKrL,EAAIqL,EAAE,GAAKpL,EAAIoL,EAAE,IAAMnL,EAAImL,EAAE,KAAOC,EAC9CzM,EUnZU,CAAmBM,EAAGA,EAAG+B,IACjC,EAAW6B,KEnFf,MAAMwI,UAAcnI,EACvB,YAAYO,EAAO4E,EAAQxG,GACvB,IAAIY,EAAW,CACX,EAAW,CAAC,EAAG,EAAG,IAClB,EAAW,CAACgB,EAAO,EAAG,IACtB,EAAW,CAACA,GAAQ4E,EAAQ,IAC5B,EAAW,CAAC,GAAIA,EAAQ,KAK5BrG,MAAMS,EAHM,CACR,IAAIK,EAAK,CAAC,EAAG,EAAG,EAAG,GAAIL,EAAUZ,MCXvBhH,KAAK0F,KAAK,GACL1F,KAAKyQ,KAAKnJ,EAAiB,KACxBA,EAAiB,IACjBA,EAAiB,ICDxC,MAAMoJ,UAAiBrI,EAC1B,YAAYlE,EAAGiH,EAAGlF,EAAGc,GACjB,IAAIkC,EAAY,CACZ/E,EAAGiH,EAAGlF,GAKViB,MAAM+B,EAHM,CACR,IAAIjB,EAAK,CAAC,EAAG,EAAG,GAAIiB,EAAWlC,MCJpC,MAAM2J,EACT,cACI,MACMC,EAAc5Q,KAAK0F,KAAkC,EAA7B1F,KAAKgL,IAAI6F,KAAe,IAChDC,EAAYD,KACZE,EAAM,IAAI9J,EAAMtH,KAAKqR,aAAa/N,EAAK2N,IACvCK,EAAS,IAAIhK,EAAMtH,KAAKqR,aAAahO,EAAQ4N,EAAa,CAAC,EAAG,EAAG,KACjEM,EAAO,IAAIjK,EAAMtH,KAAKqR,aAAa9N,EAAM0N,EAAa,CAAC,EAAG,EAAG,KAC7DO,EAAS,IAAIlK,EAAMtH,KAAKqR,aAAa5N,EAAQwN,IAC7CQ,EAAQ,IAAInK,EAAMtH,KAAKqR,aAAa3N,EAAOuN,EAAa,CAAC,EAAG,EAAG,KAC/DS,EAAQ,IAAIpK,EAAMtH,KAAKqR,aAAa7N,EAAOyN,EAAa,CAAC,EAAG,EAAG,KACrEjR,KAAKsM,EAAIgF,EACTtR,KAAKwM,EAAI4E,EACTpR,KAAKuM,EAAIgF,EACTvR,KAAK2M,EAAI6E,EACTxR,KAAK2R,EAAIF,EACTzR,KAAK4R,EAAIF,EACTN,EAAI7M,UAAU,CAAC,EAAG,EAAG4M,IACrBC,EAAInE,OAAO5M,KAAKsF,GAAI,CAAC,EAAG,EAAG,IAC3ByL,EAAInE,OAAO5M,KAAKsF,GAAK,EAAG,CAAC,EAAG,EAAG,IAC/B6L,EAAOvE,QAAQ5M,KAAKsF,GAAK,EAAG,CAAC,EAAG,EAAG,IACnC6L,EAAOjN,UAAU,CAAC,EAAG,GAAG,OACxBgN,EAAKtE,QAAQ5M,KAAKsF,GAAK,EAAG,CAAC,EAAG,EAAG,IACjC4L,EAAKhN,UAAU,EAAC,KAAY,EAAG,IAC/BkN,EAAMlN,UAAU,CAAC4M,EAAW,EAAG,IAC/BM,EAAMxE,OAAO5M,KAAKsF,GAAI,CAAC,EAAG,EAAG,IAC7B8L,EAAMxE,QAAQ5M,KAAKsF,GAAK,EAAG,CAAC,EAAG,EAAG,IAClC2L,EAAOrE,OAAO5M,KAAKsF,GAAI,CAAC,EAAG,EAAG,IAC9B2L,EAAO/M,UAAU,CAAC,EAAG4M,EAAW,IAChCO,EAAMnN,UAAU,CAAC,GAAG,KAAY,IAChCmN,EAAMzE,OAAO5M,KAAKsF,GAAI,CAAC,EAAG,EAAG,IAC7B3F,KAAKiB,SAAW,CAACmQ,EAAKE,EAAQC,EAAMC,EAAQC,EAAOC,GACnD1R,KAAKmN,MAAQ,IAAI7F,EAAMtH,KAAKiB,UAC5BjB,KAAKmN,MAAMF,OAAO,WAAa,CAAC,EAAG,EAAG,IACtCjN,KAAKmN,MAAMF,OAAO,QAAU,CAAC,EAAG,EAAG,IAEvC,aAAa5F,EAAO4B,EAAO5C,GACvB,MAAMtD,EAAS,IAAI8N,EAAM5H,EAAOA,EAAO5B,GACnChB,GACAtD,EAAOkK,OAAO5M,KAAKsF,GAAK,EAAGU,GAE/BtD,EAAOkK,OAAO5M,KAAKsF,GAAK,EAAG,CAAC,EAAG,EAAG,IAClC5C,EAAOwB,UAAU,EAAE0E,EAAQ,EAAGA,EAAQ,EAAG,IACzC,MAAM4I,EAAY,GAClB,IAAK,IAAIhM,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,MAAMiM,EAAW,IAAIf,EAAS,EAAE9H,EAAQ,EAAGA,EAAQ,EAAG,GAAI,CAAC,EAAGA,EAAO,GAAI,CAACA,EAAQ,EAAGA,EAAQ,EAAG,GAAI5B,GAChGhB,GACAyL,EAAS7E,OAAO5M,KAAKsF,GAAK,EAAGU,GAEjCyL,EAAS7E,OAAO5M,KAAKsF,GAAK,EAAIE,EAAG,CAAC,EAAG,EAAG,IACxCiM,EAAS7E,OAAO5M,KAAKsF,GAAK,EAAG,CAAC,EAAG,EAAG,IACpCkM,EAAU/P,KAAKgQ,GAEnB,MAAO,CAAC/O,KAAW8O,GAEvB,UAAUzE,GAEN,IAAK2E,EAAGvI,EAAGiE,EAAGb,EAAGoF,EAAGvG,GAAKxL,EAAWmN,EADhB,GAEpB6E,QAAQC,IAAIH,EAAGvI,EAAGiE,EAAGb,EAAGoF,EAAGvG,GAC3BzL,KAAKuN,cAAcvN,KAAKsM,EAAGyF,GAC3B/R,KAAKuN,cAAcvN,KAAKwM,EAAGhD,GAC3BxJ,KAAKuN,cAAcvN,KAAKuM,EAAGkB,GAC3BzN,KAAKuN,cAAcvN,KAAK4R,EAAGhF,GAC3B5M,KAAKuN,cAAcvN,KAAK2M,EAAGqF,GAC3BhS,KAAKuN,cAAcvN,KAAK2R,EAAGlG,GAE/B,cAAc+B,EAAcJ,GACxBI,EAAajG,QAAQ,GAAGpG,MAAM,GAAGkG,MAAQ+F,EAAO,GAChDI,EAAajG,QAAQ,GAAGpG,MAAM,GAAGkG,MAAQ+F,EAAO,GAChDI,EAAajG,QAAQ,GAAGpG,MAAM,GAAGkG,MAAQ+F,EAAO,GAChDI,EAAajG,QAAQ,GAAGpG,MAAM,GAAGkG,MAAQ+F,EAAO,GAChDI,EAAajG,QAAQ,GAAGpG,MAAM,GAAGkG,MAAQ+F,EAAO,ICvEjD,MAAM+E,EACT,cACI,MACMlB,EAAc5Q,KAAK0F,KAAkC,EAA7B1F,KAAKgL,IAAI6F,GAAe,IAChDE,EAAM,IAAI9J,EAAMtH,KAAKqR,aAAa/N,EAAK2N,EAAa,EAFxC,EAEqD,EAAG,KACpEK,EAAS,IAAIhK,EAAMtH,KAAKqR,aAAahO,EAAQ4N,EAAa,CAAC,EAAe,EAAG,KAC7EM,EAAO,IAAIjK,EAAMtH,KAAKqR,aAAa9N,EAAM0N,EAAa,CAAC,GAJ3C,EAI0D,KACtEO,EAAS,IAAIlK,EAAMtH,KAAKqR,aAAa5N,EAAQwN,EAAa,CAL9C,EAK0D,EAAG,KACzEQ,EAAQ,IAAInK,EAAMtH,KAAKqR,aAAa3N,EAAOuN,EAAa,CAAC,EAN7C,EAM2D,KACvES,EAAQ,IAAIpK,EAAMtH,KAAKqR,aAAa7N,EAAOyN,EAAa,CAAC,EAAG,EAAG,KACrEjR,KAAKsM,EAAImF,EACTzR,KAAKwM,EAAIgF,EACTxR,KAAKuM,EAAImF,EACT1R,KAAK2M,EAAIyE,EACTpR,KAAK2R,EAAIL,EACTtR,KAAK4R,EAAIL,EACTvR,KAAKiB,SAAW,CAACmQ,EAAKE,EAAQC,EAAMC,EAAQC,EAAOC,GACnD1R,KAAKmN,MAAQ,IAAI7F,EAAMtH,KAAKiB,UAC5BjB,KAAKmN,MAAM5I,UAAU,EAhBH,EAgBiB,EAAG,EAAG,IACzCvE,KAAKmN,MAAM1H,MAAM,CAAC,GAAI,GAAI,KAE9B,aAAa4B,EAAO4B,EAAO1E,GACvB,MAAMxB,EAAS,IAAI8N,EAAM5H,EAAOA,EAAO5B,GACvCtE,EAAOwB,UAAUA,GACjBxB,EAAOkK,OAAO5M,KAAKsF,GAAK,EAAG,CAAC,EAAG,EAAG,IAClC5C,EAAOwB,UAAU,EAAE0E,EAAQ,EAAGA,EAAQ,EAAG,IACzC,MAAM4I,EAAY,GAClB,IAAK,IAAIhM,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,MAAMiM,EAAW,IAAIf,EAAS,EAAE9H,EAAQ,EAAGA,EAAQ,EAAG,GAAI,CAAC,EAAGA,EAAO,GAAI,CAACA,EAAQ,EAAGA,EAAQ,EAAG,GAAI5B,GACpGyK,EAASvN,UAAUA,GACnBuN,EAAS7E,QAAQ5M,KAAKsF,GAAK,EAAIE,EAAG,CAAC,EAAG,EAAG,IACzCiM,EAAS7E,OAAO5M,KAAKsF,GAAK,EAAG,CAAC,EAAG,EAAG,IACpCkM,EAAU/P,KAAKgQ,GAEnB,MAAO,CAAC/O,KAAW8O,GAEvB,UAAUzE,GAEN,IAAK2E,EAAGvI,EAAGiE,EAAGb,EAAGoF,EAAGvG,GAAKxL,EAAWmN,EADhB,GAEpB6E,QAAQC,IAAIH,EAAGvI,EAAGiE,EAAGb,EAAGoF,EAAGvG,GAC3BzL,KAAKuN,cAAcvN,KAAKsM,EAAGyF,GAC3B/R,KAAKuN,cAAcvN,KAAKwM,EAAGhD,GAC3BxJ,KAAKuN,cAAcvN,KAAKuM,EAAGkB,GAC3BzN,KAAKuN,cAAcvN,KAAK4R,EAAGhF,GAC3B5M,KAAKuN,cAAcvN,KAAK2M,EAAGqF,GAC3BhS,KAAKuN,cAAcvN,KAAK2R,EAAGlG,GAE/B,cAAc+B,EAAcJ,GACxBI,EAAajG,QAAQ,GAAGpG,MAAM,GAAGkG,MAAQ+F,EAAO,GAChDI,EAAajG,QAAQ,GAAGpG,MAAM,GAAGkG,MAAQ+F,EAAO,GAChDI,EAAajG,QAAQ,GAAGpG,MAAM,GAAGkG,MAAQ+F,EAAO,GAChDI,EAAajG,QAAQ,GAAGpG,MAAM,GAAGkG,MAAQ+F,EAAO,GAChDI,EAAajG,QAAQ,GAAGpG,MAAM,GAAGkG,MAAQ+F,EAAO,IC/CxD,IAEIgF,EACAC,EACAC,EACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAlE,GAdAC,GAAS,ICTN,MACH,cACI9O,KAAKiG,OAAS,IjBw1Cf,SAAqB9B,EAAK6O,EAAMC,EAAQC,EAAMC,GACnD,IACIC,EADA3F,EAAI,EAAMpN,KAAKgT,IAAIL,EAAO,GAE9B7O,EAAI,GAAKsJ,EiB11CwC,EjB21CjDtJ,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAKsJ,EACTtJ,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,KAAO,EACXA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EAGRiP,EAAK,GAAI,MACTjP,EAAI,IAAM,OAAeiP,EACzBjP,EAAI,IAAM,IAAiBiP,EiB52CvB,CAAiBpT,KAAKiG,OAAQ5F,KAAKsF,GAAK,GACxC,EAAe3F,KAAKiG,OAAQjG,KAAKiG,OAAQ,CAAC,EAAG,GAAI,IACjD,EAAWjG,KAAKiG,OAAQjG,KAAKiG,OAAQ,CAAC,EAAG,EAAG,MDsBhDqN,IAHU,InBjBP,cAAgCtS,EACnC,cACIwG,QACAvD,EAAe3B,SAAQiR,IACnBvT,KAAKwT,QAAQ1S,EAAU,GAAIyS,GAAWA,MAE1C,MAAMjH,EAAItM,KAAKmB,MAAMe,IAAI,KACnBsK,EAAIxM,KAAKmB,MAAMe,IAAI,KACnBqK,EAAIvM,KAAKmB,MAAMe,IAAI,KACnBuK,EAAKzM,KAAKmB,MAAMe,IAAI,MACpBwK,EAAK1M,KAAKmB,MAAMe,IAAI,MACpByK,EAAI3M,KAAKmB,MAAMe,IAAI,KACnB0K,EAAI5M,KAAKmB,MAAMe,IAAI,KACnB2K,EAAK7M,KAAKmB,MAAMe,IAAI,MACpB4K,EAAK9M,KAAKmB,MAAMe,IAAI,MACpB6K,EAAK/M,KAAKmB,MAAMe,IAAI,MACpB8K,EAAKhN,KAAKmB,MAAMe,IAAI,MACpBuJ,EAAIzL,KAAKmB,MAAMe,IAAI,KAEzBlC,KAAKyT,QAAQ,CACT,CAAClH,EAAE,GAAID,EAAE,IACT,CAACC,EAAE,GAAID,EAAE,IACT,CAACC,EAAE,IAAKD,EAAE,IACV,CAACA,EAAE,GAAIQ,EAAG,KACV,CAACR,EAAE,GAAIQ,EAAG,IACV,CAACR,EAAE,GAAIQ,EAAG,IACV,CAACA,EAAG,IAAKD,EAAG,IACZ,CAACC,EAAG,GAAID,EAAG,IACX,CAACC,EAAG,GAAID,EAAG,IACX,CAACA,EAAG,GAAIJ,EAAG,IACX,CAACI,EAAG,GAAIJ,EAAG,IACX,CAACI,EAAG,GAAIJ,EAAG,KACX,CAACA,EAAG,GAAIF,EAAE,IACV,CAACE,EAAG,GAAIF,EAAE,IACV,CAACE,EAAG,IAAKF,EAAE,QACRrI,EAAwBsI,IAC5B,KAEHxM,KAAKyT,QAAQ,CACT,CAACnH,EAAE,GAAIE,EAAE,IACT,CAACF,EAAE,GAAIE,EAAE,IACT,CAACF,EAAE,GAAIE,EAAE,IACT,CAACA,EAAE,GAAIC,EAAG,IACV,CAACD,EAAE,GAAIC,EAAG,IACV,CAACD,EAAE,GAAIC,EAAG,IACV,CAACA,EAAG,GAAIC,EAAG,IACX,CAACD,EAAG,GAAIC,EAAG,IACX,CAACD,EAAG,GAAIC,EAAG,IACX,CAACA,EAAG,GAAIC,EAAE,IACV,CAACD,EAAG,GAAIC,EAAE,IACV,CAACD,EAAG,GAAIC,EAAE,IACV,CAACA,EAAE,GAAIL,EAAE,IACT,CAACK,EAAE,GAAIL,EAAE,IACT,CAACK,EAAE,GAAIL,EAAE,OACNpI,EAAwBqI,IAC5B,KAEHvM,KAAKyT,QAAQ,CACT,CAAClH,EAAE,GAAII,EAAE,IACT,CAACJ,EAAE,GAAII,EAAE,IACT,CAACJ,EAAE,GAAII,EAAE,IACT,CAACA,EAAE,GAAII,EAAG,IACV,CAACJ,EAAE,GAAII,EAAG,IACV,CAACJ,EAAE,GAAII,EAAG,KACV,CAACA,EAAG,GAAID,EAAG,IACX,CAACC,EAAG,GAAID,EAAG,IACX,CAACC,EAAG,IAAKD,EAAG,IACZ,CAACA,EAAG,GAAIN,EAAE,KACV,CAACM,EAAG,GAAIN,EAAE,IACV,CAACM,EAAG,GAAIN,EAAE,IACV,CAACA,EAAE,IAAKD,EAAE,IACV,CAACC,EAAE,GAAID,EAAE,IACT,CAACC,EAAE,GAAID,EAAE,OACNrI,EAAwBoI,IAC5B,KAEHtM,KAAKyT,QAAQ,CACT,CAAClH,EAAE,GAAIG,EAAG,IACV,CAACH,EAAE,GAAIG,EAAG,IACV,CAACH,EAAE,GAAIG,EAAG,IACV,CAACA,EAAG,GAAIM,EAAG,IACX,CAACN,EAAG,GAAIM,EAAG,IACX,CAACN,EAAG,GAAIM,EAAG,KACX,CAACA,EAAG,GAAID,EAAG,IACX,CAACC,EAAG,GAAID,EAAG,IACX,CAACC,EAAG,IAAKD,EAAG,IACZ,CAACA,EAAG,GAAIT,EAAE,KACV,CAACS,EAAG,GAAIT,EAAE,IACV,CAACS,EAAG,GAAIT,EAAE,IACV,CAACA,EAAE,IAAKC,EAAE,IACV,CAACD,EAAE,GAAIC,EAAE,IACT,CAACD,EAAE,GAAIC,EAAE,OACNrI,EAAwByI,IAC5B,KAEH3M,KAAKyT,QAAQ,CACT,CAACnH,EAAE,GAAIS,EAAG,KACV,CAACT,EAAE,GAAIS,EAAG,IACV,CAACT,EAAE,GAAIS,EAAG,IACV,CAACA,EAAG,IAAKtB,EAAE,IACX,CAACsB,EAAG,GAAItB,EAAE,IACV,CAACsB,EAAG,GAAItB,EAAE,KACV,CAACA,EAAE,GAAIoB,EAAG,IACV,CAACpB,EAAE,GAAIoB,EAAG,IACV,CAACpB,EAAE,IAAKoB,EAAG,IACX,CAACA,EAAG,GAAIL,EAAE,IACV,CAACK,EAAG,GAAIL,EAAE,IACV,CAACK,EAAG,GAAIL,EAAE,KACV,CAACA,EAAE,GAAIF,EAAE,IACT,CAACE,EAAE,GAAIF,EAAE,IACT,CAACE,EAAE,IAAKF,EAAE,OACPpI,EAAwB4I,IAC5B,MAEH9M,KAAKyT,QAAQ,CACT,CAACnH,EAAE,GAAIK,EAAE,IACT,CAACL,EAAE,GAAIK,EAAE,IACT,CAACL,EAAE,IAAKK,EAAE,IACV,CAACA,EAAE,GAAIK,EAAG,KACV,CAACL,EAAE,GAAIK,EAAG,IACV,CAACL,EAAE,GAAIK,EAAG,IACV,CAACA,EAAG,IAAKvB,EAAE,IACX,CAACuB,EAAG,GAAIvB,EAAE,IACV,CAACuB,EAAG,GAAIvB,EAAE,IACV,CAACA,EAAE,GAAIqB,EAAG,IACV,CAACrB,EAAE,GAAIqB,EAAG,IACV,CAACrB,EAAE,GAAIqB,EAAG,IACV,CAACA,EAAG,GAAIR,EAAE,IACV,CAACQ,EAAG,GAAIR,EAAE,IACV,CAACQ,EAAG,GAAIR,EAAE,QACPpI,EAAwB6I,IAC5B,MAEH/M,KAAKyT,QAAQ,CACT,CAAClH,EAAE,GAAIC,EAAE,IACT,CAACD,EAAE,GAAIC,EAAE,IACT,CAACD,EAAE,IAAKC,EAAE,IACV,CAACA,EAAE,GAAIK,EAAG,IACV,CAACL,EAAE,GAAIK,EAAG,IACV,CAACL,EAAE,GAAIK,EAAG,KACV,CAACA,EAAG,GAAID,EAAE,IACV,CAACC,EAAG,GAAID,EAAE,IACV,CAACC,EAAG,IAAKD,EAAE,IACX,CAACA,EAAE,GAAIF,EAAG,KACV,CAACE,EAAE,GAAIF,EAAG,IACV,CAACE,EAAE,GAAIF,EAAG,IACV,CAACA,EAAG,IAAKH,EAAE,IACX,CAACG,EAAG,GAAIH,EAAE,IACV,CAACG,EAAG,GAAIH,EAAE,QACPrI,EAAwBuI,IAC5B,MAEHzM,KAAKyT,QAAQ,CACT,CAAClH,EAAE,GAAIE,EAAG,IACV,CAACF,EAAE,GAAIE,EAAG,IACV,CAACF,EAAE,GAAIE,EAAG,IACV,CAACA,EAAG,GAAIG,EAAE,IACV,CAACH,EAAG,GAAIG,EAAE,IACV,CAACH,EAAG,GAAIG,EAAE,KACV,CAACA,EAAE,GAAII,EAAG,IACV,CAACJ,EAAE,GAAII,EAAG,IACV,CAACJ,EAAE,IAAKI,EAAG,IACX,CAACA,EAAG,GAAIL,EAAE,KACV,CAACK,EAAG,GAAIL,EAAE,IACV,CAACK,EAAG,GAAIL,EAAE,IACV,CAACA,EAAE,IAAKJ,EAAE,IACV,CAACI,EAAE,GAAIJ,EAAE,IACT,CAACI,EAAE,GAAIJ,EAAE,OACNrI,EAAwBwI,IAC5B,MAEH1M,KAAKyT,QAAQ,CACT,CAAC5G,EAAG,IAAKpB,EAAE,IACX,CAACoB,EAAG,GAAIpB,EAAE,IACV,CAACoB,EAAG,GAAIpB,EAAE,IACV,CAACA,EAAE,GAAIuB,EAAG,IACV,CAACvB,EAAE,GAAIuB,EAAG,IACV,CAACvB,EAAE,GAAIuB,EAAG,IACV,CAACA,EAAG,GAAIN,EAAG,IACX,CAACM,EAAG,GAAIN,EAAG,IACX,CAACM,EAAG,GAAIN,EAAG,KACX,CAACA,EAAG,GAAID,EAAG,IACX,CAACC,EAAG,GAAID,EAAG,IACX,CAACC,EAAG,IAAKD,EAAG,IACZ,CAACA,EAAG,GAAII,EAAG,KACX,CAACJ,EAAG,GAAII,EAAG,IACX,CAACJ,EAAG,GAAII,EAAG,OACR3I,EAAwB0I,IAC5B,KAEH5M,KAAKyT,QAAQ,CACT,CAAChI,EAAE,IAAKmB,EAAE,IACV,CAACnB,EAAE,GAAImB,EAAE,IACT,CAACnB,EAAE,GAAImB,EAAE,IACT,CAACA,EAAE,GAAIH,EAAG,IACV,CAACG,EAAE,GAAIH,EAAG,IACV,CAACG,EAAE,GAAIH,EAAG,KACV,CAACA,EAAG,GAAID,EAAE,IACV,CAACC,EAAG,GAAID,EAAE,IACV,CAACC,EAAG,IAAKD,EAAE,IACX,CAACA,EAAE,GAAIM,EAAG,KACV,CAACN,EAAE,GAAIM,EAAG,IACV,CAACN,EAAE,GAAIM,EAAG,IACV,CAACA,EAAG,IAAKrB,EAAE,KACX,CAACqB,EAAG,GAAIrB,EAAE,IACV,CAACqB,EAAG,GAAIrB,EAAE,OACPvH,EAAwB2I,IAC5B,MAEH7M,KAAKyT,QAAQ,CACT,CAAC1G,EAAG,GAAIJ,EAAE,IACV,CAACI,EAAG,GAAIJ,EAAE,IACV,CAACI,EAAG,GAAIJ,EAAE,KACV,CAACA,EAAE,GAAID,EAAG,IACV,CAACC,EAAE,GAAID,EAAG,IACV,CAACC,EAAE,IAAKD,EAAG,IACX,CAACA,EAAG,GAAIE,EAAE,KACV,CAACF,EAAG,GAAIE,EAAE,IACV,CAACF,EAAG,GAAIE,EAAE,IACV,CAACA,EAAE,IAAKnB,EAAE,IACV,CAACmB,EAAE,GAAInB,EAAE,IACT,CAACmB,EAAE,GAAInB,EAAE,IACT,CAACA,EAAE,GAAIsB,EAAG,IACV,CAACtB,EAAE,GAAIsB,EAAG,IACV,CAACtB,EAAE,GAAIsB,EAAG,OACP7I,EAAwB8I,IAC5B,MAEHhN,KAAKyT,QAAQ,CACT,CAAC5G,EAAG,GAAIC,EAAG,IACX,CAACD,EAAG,GAAIC,EAAG,IACX,CAACD,EAAG,GAAIC,EAAG,IACX,CAACA,EAAG,GAAIC,EAAG,IACX,CAACD,EAAG,GAAIC,EAAG,IACX,CAACD,EAAG,GAAIC,EAAG,IACX,CAACA,EAAG,GAAIC,EAAG,IACX,CAACD,EAAG,GAAIC,EAAG,IACX,CAACD,EAAG,GAAIC,EAAG,IACX,CAACA,EAAG,GAAIJ,EAAE,IACV,CAACI,EAAG,GAAIJ,EAAE,IACV,CAACI,EAAG,GAAIJ,EAAE,IACV,CAACA,EAAE,GAAIC,EAAG,IACV,CAACD,EAAE,GAAIC,EAAG,IACV,CAACD,EAAE,GAAIC,EAAG,OACP3I,EAAwBuH,IAC5B,KAGHzL,KAAKyT,QAAQ,CAET,CAAClH,EAAE,GAAIC,EAAE,IACT,CAACD,EAAE,GAAIC,EAAE,IACT,CAACD,EAAE,GAAIC,EAAE,IACT,CAACD,EAAE,GAAIC,EAAE,IACT,CAACD,EAAE,GAAIC,EAAE,IACT,CAACD,EAAE,GAAIC,EAAE,IACT,CAACD,EAAE,GAAIC,EAAE,IACT,CAACD,EAAE,IAAKC,EAAE,IACV,CAACA,EAAE,GAAIM,EAAG,IACV,CAACN,EAAE,GAAIM,EAAG,IACV,CAACN,EAAE,GAAIM,EAAG,KACV,CAACN,EAAE,GAAIM,EAAG,IACV,CAACN,EAAE,GAAIM,EAAG,IACV,CAACN,EAAE,GAAIM,EAAG,IACV,CAACN,EAAE,GAAIM,EAAG,IACV,CAACN,EAAE,GAAIM,EAAG,IACV,CAACA,EAAG,GAAIC,EAAG,IACX,CAACD,EAAG,GAAIC,EAAG,IACX,CAACD,EAAG,IAAKC,EAAG,IACZ,CAACD,EAAG,GAAIC,EAAG,IACX,CAACD,EAAG,GAAIC,EAAG,IACX,CAACD,EAAG,GAAIC,EAAG,IACX,CAACD,EAAG,GAAIC,EAAG,IACX,CAACD,EAAG,GAAIC,EAAG,IACX,CAACA,EAAG,GAAIJ,EAAE,IACV,CAACI,EAAG,GAAIJ,EAAE,IACV,CAACI,EAAG,GAAIJ,EAAE,IACV,CAACI,EAAG,GAAIJ,EAAE,IACV,CAACI,EAAG,GAAIJ,EAAE,KACV,CAACI,EAAG,GAAIJ,EAAE,IACV,CAACI,EAAG,GAAIJ,EAAE,IACV,CAACI,EAAG,GAAIJ,EAAE,IACV,CAACA,EAAE,GAAIJ,EAAE,IACT,CAACI,EAAE,GAAIJ,EAAE,IACT,CAACI,EAAE,GAAIJ,EAAE,IACT,CAACI,EAAE,GAAIJ,EAAE,IACT,CAACI,EAAE,IAAKJ,EAAE,IACV,CAACI,EAAE,GAAIJ,EAAE,IACT,CAACI,EAAE,GAAIJ,EAAE,KACT,CAACI,EAAE,GAAIJ,EAAE,IAET,CAACE,EAAG,GAAII,EAAG,IACX,CAACJ,EAAG,GAAII,EAAG,IACX,CAACJ,EAAG,GAAII,EAAG,IACX,CAACJ,EAAG,GAAII,EAAG,IACX,CAACJ,EAAG,GAAII,EAAG,KACX,CAACJ,EAAG,GAAII,EAAG,IACX,CAACJ,EAAG,GAAII,EAAG,IACX,CAACJ,EAAG,GAAII,EAAG,IACX,CAACJ,EAAG,GAAII,EAAG,IACX,CAACJ,EAAG,GAAII,EAAG,IACX,CAACJ,EAAG,IAAKI,EAAG,IACZ,CAACA,EAAG,GAAIpB,EAAE,IACV,CAACoB,EAAG,GAAIpB,EAAE,IACV,CAACoB,EAAG,GAAIpB,EAAE,IACV,CAACoB,EAAG,GAAIpB,EAAE,IACV,CAACoB,EAAG,GAAIpB,EAAE,IACV,CAACoB,EAAG,GAAIpB,EAAE,IACV,CAACoB,EAAG,GAAIpB,EAAE,IACV,CAACoB,EAAG,GAAIpB,EAAE,IACV,CAACoB,EAAG,GAAIpB,EAAE,KACV,CAACoB,EAAG,GAAIpB,EAAE,IACV,CAACoB,EAAG,IAAKpB,EAAE,IACX,CAACA,EAAE,GAAIuB,EAAG,IACV,CAACvB,EAAE,GAAIuB,EAAG,IACV,CAACvB,EAAE,GAAIuB,EAAG,IACV,CAACvB,EAAE,GAAIuB,EAAG,IACV,CAACvB,EAAE,GAAIuB,EAAG,IACV,CAACvB,EAAE,GAAIuB,EAAG,IACV,CAACvB,EAAE,GAAIuB,EAAG,IACV,CAACvB,EAAE,GAAIuB,EAAG,IACV,CAACvB,EAAE,GAAIuB,EAAG,KACV,CAACvB,EAAE,GAAIuB,EAAG,IACV,CAACvB,EAAE,IAAKuB,EAAG,IACX,CAACA,EAAG,GAAIN,EAAG,IACX,CAACM,EAAG,GAAIN,EAAG,IACX,CAACM,EAAG,GAAIN,EAAG,IACX,CAACM,EAAG,GAAIN,EAAG,IACX,CAACM,EAAG,GAAIN,EAAG,IACX,CAACM,EAAG,GAAIN,EAAG,IACX,CAACM,EAAG,GAAIN,EAAG,KACX,CAACM,EAAG,GAAIN,EAAG,IACX,CAACM,EAAG,GAAIN,EAAG,IACX,CAACM,EAAG,GAAIN,EAAG,IACX,CAACM,EAAG,IAAKN,EAAG,IACZ,CAACA,EAAG,GAAID,EAAG,IACX,CAACC,EAAG,GAAID,EAAG,IACX,CAACC,EAAG,GAAID,EAAG,KACX,CAACC,EAAG,GAAID,EAAG,IACX,CAACC,EAAG,GAAID,EAAG,IACX,CAACC,EAAG,GAAID,EAAG,IACX,CAACC,EAAG,GAAID,EAAG,IACX,CAACC,EAAG,GAAID,EAAG,IACX,CAACC,EAAG,GAAID,EAAG,IACX,CAACC,EAAG,GAAID,EAAG,IACX,CAACC,EAAG,IAAKD,EAAG,OACTvI,EAAwB0I,IAC5B,OAEH5M,KAAKyT,QAAQ,CAET,CAAClH,EAAE,GAAID,EAAE,IACT,CAACC,EAAE,GAAID,EAAE,IACT,CAACC,EAAE,GAAID,EAAE,IACT,CAACC,EAAE,GAAID,EAAE,IACT,CAACC,EAAE,IAAKD,EAAE,IACV,CAACC,EAAE,GAAID,EAAE,IACT,CAACC,EAAE,GAAID,EAAE,IACT,CAACC,EAAE,GAAID,EAAE,IACT,CAACA,EAAE,GAAIS,EAAG,IACV,CAACT,EAAE,GAAIS,EAAG,IACV,CAACT,EAAE,GAAIS,EAAG,KACV,CAACT,EAAE,GAAIS,EAAG,IACV,CAACT,EAAE,GAAIS,EAAG,IACV,CAACT,EAAE,GAAIS,EAAG,IACV,CAACT,EAAE,GAAIS,EAAG,IACV,CAACT,EAAE,GAAIS,EAAG,IACV,CAACA,EAAG,GAAIC,EAAG,IACX,CAACD,EAAG,GAAIC,EAAG,IACX,CAACD,EAAG,IAAKC,EAAG,IACZ,CAACD,EAAG,GAAIC,EAAG,IACX,CAACD,EAAG,GAAIC,EAAG,IACX,CAACD,EAAG,GAAIC,EAAG,IACX,CAACD,EAAG,GAAIC,EAAG,IACX,CAACD,EAAG,GAAIC,EAAG,IACX,CAACA,EAAG,GAAIN,EAAG,IACX,CAACM,EAAG,GAAIN,EAAG,IACX,CAACM,EAAG,GAAIN,EAAG,IACX,CAACM,EAAG,GAAIN,EAAG,IACX,CAACM,EAAG,GAAIN,EAAG,KACX,CAACM,EAAG,GAAIN,EAAG,IACX,CAACM,EAAG,GAAIN,EAAG,IACX,CAACM,EAAG,GAAIN,EAAG,IACX,CAACA,EAAG,GAAIH,EAAE,IACV,CAACG,EAAG,GAAIH,EAAE,IACV,CAACG,EAAG,GAAIH,EAAE,IACV,CAACG,EAAG,GAAIH,EAAE,IACV,CAACG,EAAG,IAAKH,EAAE,KACX,CAACG,EAAG,GAAIH,EAAE,IACV,CAACG,EAAG,GAAIH,EAAE,IACV,CAACG,EAAG,GAAIH,EAAE,IAEV,CAACE,EAAG,GAAID,EAAE,IACV,CAACC,EAAG,GAAID,EAAE,IACV,CAACC,EAAG,GAAID,EAAE,IACV,CAACC,EAAG,GAAID,EAAE,KACV,CAACC,EAAG,GAAID,EAAE,IACV,CAACC,EAAG,GAAID,EAAE,IACV,CAACC,EAAG,GAAID,EAAE,IACV,CAACC,EAAG,GAAID,EAAE,IACV,CAACC,EAAG,GAAID,EAAE,IACV,CAACC,EAAG,GAAID,EAAE,IACV,CAACC,EAAG,IAAKD,EAAE,IACX,CAACA,EAAE,GAAIM,EAAG,IACV,CAACN,EAAE,GAAIM,EAAG,IACV,CAACN,EAAE,GAAIM,EAAG,IACV,CAACN,EAAE,GAAIM,EAAG,IACV,CAACN,EAAE,GAAIM,EAAG,KACV,CAACN,EAAE,GAAIM,EAAG,IACV,CAACN,EAAE,GAAIM,EAAG,IACV,CAACN,EAAE,GAAIM,EAAG,IACV,CAACN,EAAE,GAAIM,EAAG,IACV,CAACN,EAAE,GAAIM,EAAG,IACV,CAACN,EAAE,IAAKM,EAAG,IACX,CAACA,EAAG,GAAIrB,EAAE,IACV,CAACqB,EAAG,GAAIrB,EAAE,IACV,CAACqB,EAAG,GAAIrB,EAAE,IACV,CAACqB,EAAG,GAAIrB,EAAE,IACV,CAACqB,EAAG,GAAIrB,EAAE,IACV,CAACqB,EAAG,GAAIrB,EAAE,IACV,CAACqB,EAAG,GAAIrB,EAAE,IACV,CAACqB,EAAG,GAAIrB,EAAE,IACV,CAACqB,EAAG,GAAIrB,EAAE,IACV,CAACqB,EAAG,GAAIrB,EAAE,IACV,CAACqB,EAAG,IAAKrB,EAAE,KACX,CAACA,EAAE,GAAImB,EAAE,IACT,CAACnB,EAAE,GAAImB,EAAE,IACT,CAACnB,EAAE,GAAImB,EAAE,IACT,CAACnB,EAAE,GAAImB,EAAE,IACT,CAACnB,EAAE,GAAImB,EAAE,IACT,CAACnB,EAAE,GAAImB,EAAE,IACT,CAACnB,EAAE,GAAImB,EAAE,KACT,CAACnB,EAAE,GAAImB,EAAE,IACT,CAACnB,EAAE,GAAImB,EAAE,IACT,CAACnB,EAAE,GAAImB,EAAE,IACT,CAACnB,EAAE,IAAKmB,EAAE,IACV,CAACA,EAAE,GAAIH,EAAG,IACV,CAACG,EAAE,GAAIH,EAAG,IACV,CAACG,EAAE,GAAIH,EAAG,IACV,CAACG,EAAE,GAAIH,EAAG,IACV,CAACG,EAAE,GAAIH,EAAG,KACV,CAACG,EAAE,GAAIH,EAAG,IACV,CAACG,EAAE,GAAIH,EAAG,IACV,CAACG,EAAE,GAAIH,EAAG,IACV,CAACG,EAAE,GAAIH,EAAG,IACV,CAACG,EAAE,GAAIH,EAAG,IACV,CAACG,EAAE,IAAKH,EAAG,OACRvI,EAAwB2I,IAC5B,OAEP,EAAE5K,GACEjC,KAAK0T,OAAO,IAAKzR,GAErB,EAAEA,GACEjC,KAAK0T,OAAO,IAAKzR,GAErB,EAAEA,GACEjC,KAAK0T,OAAO,IAAKzR,GAErB,GAAGA,GACCjC,KAAK0T,OAAO,KAAMzR,GAEtB,GAAGA,GACCjC,KAAK0T,OAAO,KAAMzR,GAEtB,EAAEA,GACEjC,KAAK0T,OAAO,IAAKzR,GAErB,EAAEA,GACEjC,KAAK0T,OAAO,IAAKzR,GAErB,GAAGA,GACCjC,KAAK0T,OAAO,KAAMzR,GAEtB,GAAGA,GACCjC,KAAK0T,OAAO,KAAMzR,GAEtB,GAAGA,GACCjC,KAAK0T,OAAO,KAAMzR,GAEtB,GAAGA,GACCjC,KAAK0T,OAAO,KAAMzR,GAEtB,EAAEA,GACEjC,KAAK0T,OAAO,IAAKzR,GAKrB,IAAIA,GACAjC,KAAK0T,OAAO,MAAOzR,GAKvB,IAAIA,GACAjC,KAAK0T,OAAO,MAAOzR,KmB5dZ,ItBGR,cAA6BjB,EAChC,cACIwG,QACA,MAAQ/F,WAAYkS,GAAQ3T,KAAKwT,QAAQ1S,EAAU,EAAG,OAAQ,QACtDW,WAAYmS,GAAU5T,KAAKwT,QAAQ1S,EAAU,EAAG,SAAU,UAC1DW,WAAYoS,GAAU7T,KAAKwT,QAAQ1S,EAAU,EAAG,SAAU,UAC1DW,WAAYqS,GAAW9T,KAAKwT,QAAQ1S,EAAU,EAAG,UAAW,WAC5DW,WAAYsS,GAAS/T,KAAKwT,QAAQ1S,EAAU,EAAG,QAAS,SACxDW,WAAYuS,GAAShU,KAAKwT,QAAQ1S,EAAU,EAAG,QAAS,QAEhEd,KAAKyT,QAAQ,CACT,CAACI,EAAM,GAAIE,EAAK,IAChB,CAACF,EAAM,GAAIE,EAAK,IAChB,CAACF,EAAM,GAAIE,EAAK,IAChB,CAACF,EAAM,GAAIE,EAAK,IAChB,CAACA,EAAK,GAAID,EAAO,IACjB,CAACC,EAAK,GAAID,EAAO,IACjB,CAACC,EAAK,GAAID,EAAO,IACjB,CAACC,EAAK,GAAID,EAAO,IACjB,CAACA,EAAO,GAAID,EAAM,IAClB,CAACC,EAAO,GAAID,EAAM,IAClB,CAACC,EAAO,GAAID,EAAM,IAClB,CAACC,EAAO,GAAID,EAAM,IAClB,CAACD,EAAM,GAAID,EAAI,IACf,CAACA,EAAI,GAAIK,EAAK,IACd,CAACA,EAAK,GAAIJ,EAAM,KACjB,KACH5T,KAAKyT,QAAQ,CACT,CAAC1Q,EAAO4Q,GAAM5Q,EAAOiR,IACrB,CAAC/Q,EAAQ0Q,GAAM1Q,EAAQ+Q,IACvB,CAAC9Q,EAASyQ,GAAMzQ,EAAS8Q,IACzB,CAAC7Q,EAAWwQ,GAAMxQ,EAAW6Q,IAC7B,CAACjR,EAAOiR,GAAOjR,EAAOgR,IACtB,CAAC9Q,EAAQ+Q,GAAO9Q,EAAS6Q,IACzB,CAAC7Q,EAAS8Q,GAAO5Q,EAAY2Q,IAC7B,CAAC5Q,EAAW6Q,GAAO/Q,EAAQ8Q,IAC3B,CAAChR,EAAOgR,GAAOhR,EAAO4Q,IACtB,CAACzQ,EAAS6Q,GAAO9Q,EAAQ0Q,IACzB,CAACvQ,EAAY2Q,GAAO7Q,EAASyQ,IAC7B,CAAC1Q,EAAQ8Q,GAAO5Q,EAAWwQ,IAC3B,CAACzQ,EAAS2Q,GAAQ5Q,EAAQ2Q,IAC1B,CAAC3Q,EAAQ2Q,GAAQzQ,EAAW2Q,IAC5B,CAAC3Q,EAAW2Q,GAAS5Q,EAAS2Q,KAC/B,KACH7T,KAAKyT,QAAQ,CACT,CAAC1Q,EAAOiR,GAAOjR,EAAO6Q,IACtB,CAACzQ,EAAW6Q,GAAO/Q,EAAQ2Q,IAC3B,CAAC1Q,EAAS8Q,GAAO5Q,EAAYwQ,IAC7B,CAACxQ,EAAY4Q,GAAO7Q,EAAWyQ,IAC/B,CAAC7Q,EAAO6Q,GAAQ7Q,EAAO+Q,IACvB,CAAC7Q,EAAQ2Q,GAAQ1Q,EAAS4Q,IAC1B,CAAC1Q,EAAYwQ,GAAQzQ,EAAW2Q,IAChC,CAAC3Q,EAAWyQ,GAAQ3Q,EAAQ6Q,IAC5B,CAAC/Q,EAAO+Q,GAAS/Q,EAAOiR,IACxB,CAAC9Q,EAAS4Q,GAAS3Q,EAAW6Q,IAC9B,CAAC7Q,EAAW2Q,GAAS5Q,EAAS8Q,IAC9B,CAAC/Q,EAAQ6Q,GAAS1Q,EAAY4Q,IAC9B,CAAC5Q,EAAY2Q,GAAO5Q,EAAWwQ,IAC/B,CAACxQ,EAAWwQ,GAAMxQ,EAAW0Q,IAC7B,CAAC1Q,EAAW0Q,GAAQzQ,EAAY2Q,KACjC,KACH/T,KAAKyT,QAAQ,CACT,CAAC1Q,EAAOgR,GAAOhR,EAAOiR,IACtB,CAAC9Q,EAAS6Q,GAAO3Q,EAAY4Q,IAC7B,CAAC7Q,EAAW4Q,GAAO9Q,EAAQ+Q,IAC3B,CAAC5Q,EAAY2Q,GAAO5Q,EAAW6Q,IAC/B,CAACjR,EAAOiR,GAAOjR,EAAO+Q,IACtB,CAAC1Q,EAAY4Q,GAAO5Q,EAAY0Q,IAChC,CAAC7Q,EAAQ+Q,GAAO/Q,EAAQ6Q,IACxB,CAAC3Q,EAAW6Q,GAAO7Q,EAAW2Q,IAC9B,CAAC/Q,EAAO+Q,GAAS/Q,EAAOgR,IACxB,CAAC3Q,EAAY0Q,GAAS5Q,EAAS6Q,IAC/B,CAAC9Q,EAAQ6Q,GAAS3Q,EAAW4Q,IAC7B,CAAC5Q,EAAW2Q,GAAS1Q,EAAY2Q,IACjC,CAAC9Q,EAAQ0Q,GAAMxQ,EAAWyQ,IAC1B,CAACzQ,EAAWyQ,GAAQxQ,EAAYyQ,IAChC,CAACzQ,EAAYyQ,GAAQ5Q,EAAQ0Q,KAC9B,QsB/EX1B,QAAQC,IAAIoB,GAASW,aACrBX,GAASI,OAAO,KAAK,GACrBJ,GAASI,OAAO,KAAK,GACrBJ,GAASI,OAAO,KAAK,GACrBJ,GAASI,OAAO,KAAK,GACrBJ,GAASI,OAAO,KAAK,GACrBJ,GAASI,OAAO,KAAK,GACrBJ,GAASI,OAAO,KAAK,GACrBJ,GAASI,OAAO,KAAK,GACrBJ,GAASI,OAAO,KAAK,GACrBJ,GAASI,OAAO,KAAK,GACrBJ,GAASI,OAAO,KAAK,GACrBzB,QAAQC,IAAIoB,GAASW,aACrB,IAAIhL,GAAQ,IACR4E,GAAS,IACTC,IAAQ,GACRC,IAAQ,GACRmG,GAAW,IACXC,GAAY,IACZC,GAAa,EACblG,GAAc,IAgBX,SAASmG,KACZ,IAAIC,EAAKC,WAAWlG,SAASmG,eAAe,MAAMzT,OAC9C0T,EAAKF,WAAWlG,SAASmG,eAAe,MAAMzT,OAC9C2T,EAAKH,WAAWlG,SAASmG,eAAe,MAAMzT,OAC9C4T,EAAKJ,WAAWlG,SAASmG,eAAe,MAAMzT,OAC9C6T,EAAKL,WAAWlG,SAASmG,eAAe,MAAMzT,OAC9C8T,EAAKN,WAAWlG,SAASmG,eAAe,MAAMzT,OAC9C+T,EAAKP,WAAWlG,SAASmG,eAAe,MAAMzT,OAC9CgU,EAAKR,WAAWlG,SAASmG,eAAe,MAAMzT,OAC9CiU,EAAKT,WAAWlG,SAASmG,eAAe,MAAMzT,OAC9CkU,EAAMV,WAAWlG,SAASmG,eAAe,OAAOzT,OAChDmU,EAAMX,WAAWlG,SAASmG,eAAe,OAAOzT,OAChDoU,EAAMZ,WAAWlG,SAASmG,eAAe,OAAOzT,OAChDqU,EAAMb,WAAWlG,SAASmG,eAAe,OAAOzT,OAChDsU,EAAMd,WAAWlG,SAASmG,eAAe,OAAOzT,OAChDuU,EAAMf,WAAWlG,SAASmG,eAAe,OAAOzT,OAChDwU,EAAMhB,WAAWlG,SAASmG,eAAe,OAAOzT,OACpD+N,GAAO7I,OhB8BJ,SAAoBuP,EAAKC,EAAKC,EAAKC,EAAKV,EAAKC,EAAKC,EAAKC,EAAKQ,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,GACpG,IAAIhS,EAAM,IAAI,EAAoB,IAiBlC,OAhBAA,EAAI,GAAKqR,EACTrR,EAAI,GAAKsR,EACTtR,EAAI,GAAKuR,EACTvR,EAAI,GAAKwR,EACTxR,EAAI,GAAK8Q,EACT9Q,EAAI,GAAK+Q,EACT/Q,EAAI,GAAKgR,EACThR,EAAI,GAAKiR,EACTjR,EAAI,GAAKyR,EACTzR,EAAI,GAAK0R,EACT1R,EAAI,IAAM2R,EACV3R,EAAI,IAAM4R,EACV5R,EAAI,IAAM6R,EACV7R,EAAI,IAAM8R,EACV9R,EAAI,IAAM+R,EACV/R,EAAI,IAAMgS,EACHhS,EgBhDW,CAAgBmQ,EAAIG,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,GAClGtM,GAAQsL,WAAWlG,SAASmG,eAAe,SAASzT,OACpD8M,GAAS0G,WAAWlG,SAASmG,eAAe,UAAUzT,OACtD+M,GAAOyG,WAAWlG,SAASmG,eAAe,QAAQzT,OAClDgN,GAAOwG,WAAWlG,SAASmG,eAAe,QAAQzT,OAClDmT,GAAWK,WAAWlG,SAASmG,eAAe,QAAQzT,OACtDoT,GAAYI,WAAWlG,SAASmG,eAAe,QAAQzT,OACvDqT,GAAaG,WAAWlG,SAASmG,eAAe,MAAMzT,OACtDmN,GAAcqG,WAAWlG,SAASmG,eAAe,MAAMzT,OAEpD,SAASqV,KACZvH,GAAQ,IAAInB,EACZqF,GAAW,IAAInF,EAAkB3E,GAAO4E,GAAQC,GAAMC,GAAMmG,GAAUC,IACtEpB,GAAS7E,YAAc,GAAKA,GAO5BsE,GAAW,IAAIL,EACf,IAAIkE,EAAkB,CAClBtC,KAAMxQ,EACNuQ,OAAQzQ,EACRuQ,MAAOlQ,EACPsQ,KAAMvQ,EACNoQ,MAAOvQ,EACPqQ,IAAKnQ,IAEL,IAAEmQ,EAAG,MAAEE,EAAK,KAAEG,EAAI,MAAEJ,EAAK,OAAEE,EAAM,KAAEC,GAAST,GAASW,YACzDzB,GAAS8D,UAAU,IAAI3C,KAAQE,KAAUD,KAAUE,KAAWE,KAASD,GAAMrT,KAAIsC,GAAQqT,EAAgBrT,MAEzGuP,GAAQ,IAAIvB,EACZuB,GAAM+D,UAAU,IAAI3C,KAAQE,KAAUD,KAAUE,KAAWE,KAASD,GAAMrT,KAAIsC,GAAQqT,EAAgBrT,MACtG6L,GAAM0H,IAAIhE,GAAMpF,OAKhBsF,GAAW,IAAItG,EAAS,GAwBxB0C,GAAM0H,SAtINC,GAuIAnI,SAASmG,eAAe,eAAe5F,YAAYmE,GAAS3E,YAC5D2E,GAAS0D,OAAO5H,GAAOC,IAhGnBA,IAAUA,GAAO7I,QACjB6I,GAAO7I,OAAO3D,SAAQ,CAACvB,EAAOH,KAC1ByN,SAASmG,eAAe,IAAI5T,EAAQ,KAAKG,MAAQA,KAGzDsN,SAASmG,eAAe,SAASzT,MAAQkI,GACzCoF,SAASmG,eAAe,UAAUzT,MAAQ8M,GAC1CQ,SAASmG,eAAe,QAAQzT,MAAQ+M,GACxCO,SAASmG,eAAe,QAAQzT,MAAQgN,GACxCM,SAASmG,eAAe,QAAQzT,MAAQmT,GACxC7F,SAASmG,eAAe,QAAQzT,MAAQoT,GACxC9F,SAASmG,eAAe,MAAMzT,MAAQqT,GACtC/F,SAASmG,eAAe,MAAMzT,MAAQmN,GA0FnC,SAASwI,KAEZ,CACInE,GACAC,GACAJ,EACAC,EACAI,GACAG,GACAF,GACAC,GACAE,GACAC,GACAR,GACFhQ,SAAQqU,IACFA,GAAUA,EAAOxJ,OACjBwJ,EAAOxJ,MAAMF,OAAO5M,KAAKsF,GAAK,GAAI,CAAC,EAAG,EAAG,OAIjDoN,GAAS7E,YAAc,GAAKA,GAC5B6E,GAAS0D,OAAO5H,GAAOC,IAxB3BT,SAASuI,iBAAiB,oBAAoB,SAAUC,GACpDT,UEtJAU,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,GAAGF,EAAyBE,GAC3B,OAAOF,EAAyBE,GAAUpX,QAG3C,IAAIC,EAASiX,EAAyBE,GAAY,CAGjDpX,QAAS,IAOV,OAHAqX,EAAoBD,GAAUnX,EAAQA,EAAOD,QAASmX,GAG/ClX,EAAOD,QCjBf,OCFAmX,EAAoBnK,EAAI,CAAChN,EAASsX,KACjC,IAAI,IAAIpU,KAAOoU,EACXH,EAAoBI,EAAED,EAAYpU,KAASiU,EAAoBI,EAAEvX,EAASkD,IAC5EsU,OAAOC,eAAezX,EAASkD,EAAK,CAAEwU,YAAY,EAAMpV,IAAKgV,EAAWpU,MCJ3EiU,EAAoBI,EAAI,CAACI,EAAKC,IAASJ,OAAOK,UAAUC,eAAeC,KAAKJ,EAAKC,GCCjFT,EAAoBvN,EAAK5J,IACH,oBAAXgY,QAA0BA,OAAOC,aAC1CT,OAAOC,eAAezX,EAASgY,OAAOC,YAAa,CAAE9W,MAAO,WAE7DqW,OAAOC,eAAezX,EAAS,aAAc,CAAEmB,OAAO,KHFhDgW,EAAoB,M","file":"main.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"srVisualizer\"] = factory();\n\telse\n\t\troot[\"srVisualizer\"] = factory();\n})(this, function() {\nreturn ","/**\n * Splits an array into chunks\n *\n * @param array original array\n * @param chunkSize\n *\n * @example\n * ```\n * chunkArray([1,2,3,4,5,6], 2)\n * // returns [[1,2], [3,4], [5,6]]\n * ```\n */\nexport function chunkArray(array, chunkSize) {\n    const newSize = Math.ceil(array.length / chunkSize);\n    return new Array(newSize)\n        .fill(null)\n        .map((_, index) => array.slice(index * chunkSize, (index + 1) * chunkSize));\n}\n/**\n * Generates an array of set size filled with a specific value\n *\n * @param length length of the array\n * @param value value to fill the array with\n */\nexport function fillArray(length, value) {\n    return new Array(length).fill(value);\n}\n","/**\n * Class for simulating turns on symmetric twisty puzzles\n */\nexport class Simulator {\n    constructor() {\n        this.stickers = new Map();\n        this.faces = new Map();\n        this.turns = new Map();\n    }\n    /**\n     *\n     * @param stickers array of sticker values\n     * @param label label to reference the face by\n     * @returns object with the faceId and list of sticker ids.\n     *  faceId will be label if that is present. Otherwise it\n     *  will be generated.\n     * @example\n     * ```\n     * const stickers = ['red', 'red', 'red', 'red'];\n     *\n     * // Add the F face\n     * addFace(stickers, 'F')\n     * ```\n     */\n    addFace(stickers, label) {\n        if (label && this.faces.has(label)) {\n            throw `Face ${label} already exists`;\n        }\n        else if (!label) {\n            label = (this.faces.size + 1).toString();\n        }\n        // Add Stickers\n        const stickerIds = stickers.reduce((stickerIds, nextSticker) => {\n            const stickerId = (this.stickers.size + 1).toString();\n            this.stickers.set(stickerId, nextSticker);\n            stickerIds.push(stickerId);\n            return stickerIds;\n        }, []);\n        // Add Face\n        this.faces.set(label, stickerIds);\n        return {\n            faceId: label,\n            stickerIds\n        };\n    }\n    /**\n     * Creates a turn definition that tells the simulator\n     * what sticker values to change when turning.\n     *\n     * A change is an array with two sticker ids (ex. ['sticker1', 'sticker2'])\n     * this means that when turning 'sticker1' will go to 'sticker2'.\n     * Or when doing a reverse turn, `sticker2' will go to 'sticker1'\n     *\n     * @param changes list of turn definitions.\n     * @param label label to reference the turn by\n     * @returns label of the turn that was created\n     */\n    addTurn(changes, label) {\n        if (label && this.turns.has(label)) {\n            throw `Turn ${label} already exists`;\n        }\n        else if (!label) {\n            label = (this.turns.size + 1).toString();\n        }\n        this.turns.set(label, changes);\n        return label;\n    }\n    /**\n     * Executes a turn on the puzzle\n     *\n     * @param label label of the turn to execute\n     * @param prime true to do the turn in reverse\n     */\n    doTurn(label, reverse = false) {\n        const changes = this.turns.get(label);\n        if (!changes) {\n            throw `Unknown turn ${label}`;\n        }\n        let movingSticker = reverse ? 1 : 0;\n        let replacedSticker = reverse ? 0 : 1;\n        let cached = {};\n        changes.forEach(change => {\n            // Cache value we're replacing\n            cached[change[replacedSticker]] = this.stickers.get(change[replacedSticker]);\n            // console.log(`Cached ${cached[change[movingSticker]]}`)\n            // console.log(`Changing ${change[replacedSticker]} to ${cached[change[movingSticker]] || this.stickers.get(change[movingSticker])}`)\n            // Update sticker with new value\n            this.stickers.set(change[replacedSticker], cached[change[movingSticker]] || this.stickers.get(change[movingSticker]));\n        });\n    }\n    /**\n     * checks that every sticker on every face\n     * is the same value\n     */\n    isSolved() {\n        const faces = this.faces.entries();\n        let entry = faces.next();\n        do {\n            const stickerIds = entry.value[1];\n            let value = this.stickers.get(stickerIds[0]);\n            for (let id of stickerIds) {\n                if (value != this.stickers.get(id))\n                    return false;\n            }\n            entry = faces.next();\n        } while (!entry.done);\n        return true;\n    }\n    getValues() {\n        let values = {};\n        this.faces.forEach((stickerIds, key) => {\n            values[key] = stickerIds.map(id => this.stickers.get(id));\n        });\n        return values;\n    }\n}\n","import { fillArray } from '../../utils/arrays';\nimport { Simulator } from './../simulator';\n/**\n * Simulates a standard skewb\n *\n * Imagine the faces like this\n *      U\n *    L F R B\n *      D\n *\n * each face has 5 sickers (1 center, 4 corners), stored as\n * an array. Each index of the array maps to stickers like\n * so, 0 being the center, 1-4 being the corners from top left\n * to bottom right\n *      1   2\n *        0\n *      3   4\n *\n * So all together the simulator stores information like\n * this\n *\n *          U1    U2\n *             U0\n *          U3    U4\n * L1    L2 F1    F2 R1    R2 B1    B2\n *    L0       F0       R0       B0\n * L3    L4 F3    F4 F3    F4 B3    B4\n *          D1    D2\n *             D0\n *          D3    D4\n */\nexport class SkewbSimulator extends Simulator {\n    constructor() {\n        super();\n        const { stickerIds: top } = this.addFace(fillArray(5, 'top'), 'top');\n        const { stickerIds: front } = this.addFace(fillArray(5, 'front'), 'front');\n        const { stickerIds: right } = this.addFace(fillArray(5, 'right'), 'right');\n        const { stickerIds: bottom } = this.addFace(fillArray(5, 'bottom'), 'bottom');\n        const { stickerIds: back } = this.addFace(fillArray(5, 'back'), 'back');\n        const { stickerIds: left } = this.addFace(fillArray(5, 'left'), 'left');\n        // Skewb Notation https://www.worldcubeassociation.org/regulations/#12h\n        this.addTurn([\n            [right[0], back[0]],\n            [right[2], back[4]],\n            [right[3], back[1]],\n            [right[4], back[3]],\n            [back[0], bottom[0]],\n            [back[4], bottom[2]],\n            [back[1], bottom[3]],\n            [back[3], bottom[4]],\n            [bottom[0], right[0]],\n            [bottom[2], right[2]],\n            [bottom[3], right[3]],\n            [bottom[4], right[4]],\n            [front[4], top[2]],\n            [top[2], left[3]],\n            [left[3], front[4]],\n        ], 'R');\n        this.addTurn([\n            [center(top), center(left)],\n            [topLeft(top), topLeft(left)],\n            [topRight(top), topRight(left)],\n            [bottomLeft(top), bottomLeft(left)],\n            [center(left), center(back)],\n            [topLeft(left), topRight(back)],\n            [topRight(left), bottomRight(back)],\n            [bottomLeft(left), topLeft(back)],\n            [center(back), center(top)],\n            [topRight(back), topLeft(top)],\n            [bottomRight(back), topRight(top)],\n            [topLeft(back), bottomLeft(top)],\n            [topRight(right), topLeft(front)],\n            [topLeft(front), bottomLeft(bottom)],\n            [bottomLeft(bottom), topRight(right)],\n        ], 'U');\n        this.addTurn([\n            [center(left), center(front)],\n            [bottomLeft(left), topLeft(front)],\n            [topRight(left), bottomRight(front)],\n            [bottomRight(left), bottomLeft(front)],\n            [center(front), center(bottom)],\n            [topLeft(front), topRight(bottom)],\n            [bottomRight(front), bottomLeft(bottom)],\n            [bottomLeft(front), topLeft(bottom)],\n            [center(bottom), center(left)],\n            [topRight(bottom), bottomLeft(left)],\n            [bottomLeft(bottom), topRight(left)],\n            [topLeft(bottom), bottomRight(left)],\n            [bottomRight(back), bottomLeft(top)],\n            [bottomLeft(top), bottomLeft(right)],\n            [bottomLeft(right), bottomRight(back)],\n        ], 'L');\n        this.addTurn([\n            [center(back), center(left)],\n            [topRight(back), bottomRight(left)],\n            [bottomLeft(back), topLeft(left)],\n            [bottomRight(back), bottomLeft(left)],\n            [center(left), center(bottom)],\n            [bottomRight(left), bottomRight(bottom)],\n            [topLeft(left), topLeft(bottom)],\n            [bottomLeft(left), bottomLeft(bottom)],\n            [center(bottom), center(back)],\n            [bottomRight(bottom), topRight(back)],\n            [topLeft(bottom), bottomLeft(back)],\n            [bottomLeft(bottom), bottomRight(back)],\n            [topLeft(top), bottomLeft(front)],\n            [bottomLeft(front), bottomRight(right)],\n            [bottomRight(right), topLeft(top)],\n        ], 'B');\n    }\n}\nconst center = (face) => face[0];\nconst topLeft = (face) => face[1];\nconst topRight = (face) => face[2];\nconst bottomLeft = (face) => face[3];\nconst bottomRight = (face) => face[4];\n","// Standard Cube Colors\nexport const YELLOW = { value: '#FFFF00' };\nexport const RED = { value: '#FF0000' };\nexport const BLUE = { value: '#0000FF' };\nexport const WHITE = { value: '#FFFFFF' };\nexport const ORANGE = { value: '#FFA500' };\nexport const GREEN = { value: '#00FF00' };\n// Extra colors for megaminx\nexport const PURPLE = { value: 'purple' };\nexport const GREY = { value: 'grey' };\nexport const DARK_BLUE = { value: 'darkblue' };\nexport const LIGHT_YELLOW = { value: '#ffffb3' };\nexport const LIGHT_GREEN = { value: 'limegreen' };\nexport const PINK = { value: 'hotpink' };\n","export const MEGAMINX_FACES = [\n    // Front\n    'U',\n    'R',\n    'F',\n    'dr',\n    'dl',\n    'L',\n    // Back\n    'd',\n    'br',\n    'BR',\n    'BL',\n    'bl',\n    'b',\n];\n","import { MEGAMINX_FACES } from './constants';\nimport { Simulator } from './../simulator';\nimport { fillArray } from '../../utils/arrays';\n/**\n * Simulator to define megaminx type puzzles\n *\n * Currently only standard megaminx size supported.\n */\nexport class MegaminxSimulator extends Simulator {\n    constructor() {\n        super();\n        MEGAMINX_FACES.forEach(faceName => {\n            this.addFace(fillArray(11, faceName), faceName);\n        });\n        const U = this.faces.get('U'); // White\n        const R = this.faces.get('R'); // Blue\n        const F = this.faces.get('F'); // Red\n        const dr = this.faces.get('dr'); // Pink\n        const dl = this.faces.get('dl'); // Light Yellow\n        const L = this.faces.get('L'); // Green\n        const d = this.faces.get('d'); // Gray\n        const br = this.faces.get('br'); // Light Green\n        const BR = this.faces.get('BR'); // Yellow\n        const BL = this.faces.get('BL'); // Purple\n        const bl = this.faces.get('bl'); // Dark Blue\n        const b = this.faces.get('b'); // Orange\n        // R\n        this.addTurn([\n            [F[2], U[6]],\n            [F[1], U[5]],\n            [F[10], U[4]],\n            [U[6], BR[10]],\n            [U[5], BR[9]],\n            [U[4], BR[8]],\n            [BR[10], br[8]],\n            [BR[9], br[7]],\n            [BR[8], br[6]],\n            [br[8], dr[2]],\n            [br[7], dr[1]],\n            [br[6], dr[10]],\n            [dr[2], F[2]],\n            [dr[1], F[1]],\n            [dr[10], F[10]],\n            ...makeFaceTurnDefinitions(R),\n        ], 'R');\n        // F\n        this.addTurn([\n            [U[2], R[2]],\n            [U[3], R[3]],\n            [U[4], R[4]],\n            [R[2], dr[2]],\n            [R[3], dr[3]],\n            [R[4], dr[4]],\n            [dr[2], dl[2]],\n            [dr[3], dl[3]],\n            [dr[4], dl[4]],\n            [dl[2], L[2]],\n            [dl[3], L[3]],\n            [dl[4], L[4]],\n            [L[2], U[2]],\n            [L[3], U[3]],\n            [L[4], U[4]],\n            ...makeFaceTurnDefinitions(F)\n        ], 'F');\n        // U\n        this.addTurn([\n            [F[2], L[4]],\n            [F[3], L[5]],\n            [F[4], L[6]],\n            [L[4], BL[8]],\n            [L[5], BL[9]],\n            [L[6], BL[10]],\n            [BL[8], BR[6]],\n            [BL[9], BR[7]],\n            [BL[10], BR[8]],\n            [BR[6], R[10]],\n            [BR[7], R[1]],\n            [BR[8], R[2]],\n            [R[10], F[2]],\n            [R[1], F[3]],\n            [R[2], F[4]],\n            ...makeFaceTurnDefinitions(U)\n        ], 'U');\n        // L\n        this.addTurn([\n            [F[4], dl[4]],\n            [F[5], dl[5]],\n            [F[6], dl[6]],\n            [dl[4], bl[8]],\n            [dl[5], bl[9]],\n            [dl[6], bl[10]],\n            [bl[8], BL[6]],\n            [bl[9], BL[7]],\n            [bl[10], BL[8]],\n            [BL[6], U[10]],\n            [BL[7], U[1]],\n            [BL[8], U[2]],\n            [U[10], F[4]],\n            [U[1], F[5]],\n            [U[2], F[6]],\n            ...makeFaceTurnDefinitions(L)\n        ], 'L');\n        // BR\n        this.addTurn([\n            [U[6], BL[10]],\n            [U[7], BL[1]],\n            [U[8], BL[2]],\n            [BL[10], b[8]],\n            [BL[1], b[9]],\n            [BL[2], b[10]],\n            [b[8], br[4]],\n            [b[9], br[5]],\n            [b[10], br[6]],\n            [br[4], R[8]],\n            [br[5], R[9]],\n            [br[6], R[10]],\n            [R[8], U[6]],\n            [R[9], U[7]],\n            [R[10], U[8]],\n            ...makeFaceTurnDefinitions(BR)\n        ], 'BR');\n        // BL\n        this.addTurn([\n            [U[8], L[6]],\n            [U[9], L[7]],\n            [U[10], L[8]],\n            [L[6], bl[10]],\n            [L[7], bl[1]],\n            [L[8], bl[2]],\n            [bl[10], b[6]],\n            [bl[1], b[7]],\n            [bl[2], b[8]],\n            [b[6], BR[4]],\n            [b[7], BR[5]],\n            [b[8], BR[6]],\n            [BR[4], U[8]],\n            [BR[5], U[9]],\n            [BR[6], U[10]],\n            ...makeFaceTurnDefinitions(BL)\n        ], 'BL');\n        // dr\n        this.addTurn([\n            [F[8], R[4]],\n            [F[9], R[5]],\n            [F[10], R[6]],\n            [R[4], br[8]],\n            [R[5], br[9]],\n            [R[6], br[10]],\n            [br[8], d[6]],\n            [br[9], d[7]],\n            [br[10], d[8]],\n            [d[6], dl[10]],\n            [d[7], dl[1]],\n            [d[8], dl[2]],\n            [dl[10], F[8]],\n            [dl[1], F[9]],\n            [dl[2], F[10]],\n            ...makeFaceTurnDefinitions(dr)\n        ], 'dr');\n        // dl\n        this.addTurn([\n            [F[6], dr[4]],\n            [F[7], dr[5]],\n            [F[8], dr[6]],\n            [dr[4], d[8]],\n            [dr[5], d[9]],\n            [dr[6], d[10]],\n            [d[8], bl[6]],\n            [d[9], bl[7]],\n            [d[10], bl[8]],\n            [bl[6], L[10]],\n            [bl[7], L[1]],\n            [bl[8], L[2]],\n            [L[10], F[6]],\n            [L[1], F[7]],\n            [L[2], F[8]],\n            ...makeFaceTurnDefinitions(dl)\n        ], 'dl');\n        // d\n        this.addTurn([\n            [br[10], b[2]],\n            [br[1], b[3]],\n            [br[2], b[4]],\n            [b[2], bl[4]],\n            [b[3], bl[5]],\n            [b[4], bl[6]],\n            [bl[4], dl[8]],\n            [bl[5], dl[9]],\n            [bl[6], dl[10]],\n            [dl[8], dr[6]],\n            [dl[9], dr[7]],\n            [dl[10], dr[8]],\n            [dr[6], br[10]],\n            [dr[7], br[1]],\n            [dr[8], br[2]],\n            ...makeFaceTurnDefinitions(d)\n        ], 'd');\n        // br\n        this.addTurn([\n            [b[10], d[4]],\n            [b[1], d[5]],\n            [b[2], d[6]],\n            [d[4], dr[8]],\n            [d[5], dr[9]],\n            [d[6], dr[10]],\n            [dr[8], R[6]],\n            [dr[9], R[7]],\n            [dr[10], R[8]],\n            [R[6], BR[10]],\n            [R[7], BR[1]],\n            [R[8], BR[2]],\n            [BR[10], b[10]],\n            [BR[1], b[1]],\n            [BR[2], b[2]],\n            ...makeFaceTurnDefinitions(br)\n        ], 'br');\n        // bl\n        this.addTurn([\n            [BL[4], L[8]],\n            [BL[5], L[9]],\n            [BL[6], L[10]],\n            [L[8], dl[6]],\n            [L[9], dl[7]],\n            [L[10], dl[8]],\n            [dl[6], d[10]],\n            [dl[7], d[1]],\n            [dl[8], d[2]],\n            [d[10], b[4]],\n            [d[1], b[5]],\n            [d[2], b[6]],\n            [b[4], BL[4]],\n            [b[5], BL[5]],\n            [b[6], BL[6]],\n            ...makeFaceTurnDefinitions(bl)\n        ], 'bl');\n        // b\n        this.addTurn([\n            [br[2], BR[2]],\n            [br[3], BR[3]],\n            [br[4], BR[4]],\n            [BR[2], BL[2]],\n            [BR[3], BL[3]],\n            [BR[4], BL[4]],\n            [BL[2], bl[2]],\n            [BL[3], bl[3]],\n            [BL[4], bl[4]],\n            [bl[2], d[2]],\n            [bl[3], d[3]],\n            [bl[4], d[4]],\n            [d[2], br[2]],\n            [d[3], br[3]],\n            [d[4], br[4]],\n            ...makeFaceTurnDefinitions(b)\n        ], 'b');\n        // \"Pochmann notation\"\n        // D++ / D--\n        this.addTurn([\n            // Top Layer\n            [F[0], R[0]],\n            [F[1], R[9]],\n            [F[5], R[3]],\n            [F[6], R[4]],\n            [F[7], R[5]],\n            [F[8], R[6]],\n            [F[9], R[7]],\n            [F[10], R[8]],\n            [R[0], BR[0]],\n            [R[3], BR[9]],\n            [R[4], BR[10]],\n            [R[5], BR[1]],\n            [R[6], BR[2]],\n            [R[7], BR[3]],\n            [R[8], BR[4]],\n            [R[9], BR[5]],\n            [BR[0], BL[0]],\n            [BR[9], BL[1]],\n            [BR[10], BL[2]],\n            [BR[1], BL[3]],\n            [BR[2], BL[4]],\n            [BR[3], BL[5]],\n            [BR[4], BL[6]],\n            [BR[5], BL[7]],\n            [BL[0], L[0]],\n            [BL[1], L[7]],\n            [BL[2], L[8]],\n            [BL[3], L[9]],\n            [BL[4], L[10]],\n            [BL[5], L[1]],\n            [BL[6], L[2]],\n            [BL[7], L[3]],\n            [L[0], F[0]],\n            [L[7], F[5]],\n            [L[8], F[6]],\n            [L[9], F[7]],\n            [L[10], F[8]],\n            [L[1], F[9]],\n            [L[2], F[10]],\n            [L[3], F[1]],\n            // Bottom Layer\n            [dr[0], br[0]],\n            [dr[1], br[7]],\n            [dr[2], br[8]],\n            [dr[3], br[9]],\n            [dr[4], br[10]],\n            [dr[5], br[1]],\n            [dr[6], br[2]],\n            [dr[7], br[3]],\n            [dr[8], br[4]],\n            [dr[9], br[5]],\n            [dr[10], br[6]],\n            [br[0], b[0]],\n            [br[1], b[3]],\n            [br[2], b[4]],\n            [br[3], b[5]],\n            [br[4], b[6]],\n            [br[5], b[7]],\n            [br[6], b[8]],\n            [br[7], b[9]],\n            [br[8], b[10]],\n            [br[9], b[1]],\n            [br[10], b[2]],\n            [b[0], bl[0]],\n            [b[1], bl[3]],\n            [b[2], bl[4]],\n            [b[3], bl[5]],\n            [b[4], bl[6]],\n            [b[5], bl[7]],\n            [b[6], bl[8]],\n            [b[7], bl[9]],\n            [b[8], bl[10]],\n            [b[9], bl[1]],\n            [b[10], bl[2]],\n            [bl[0], dl[0]],\n            [bl[1], dl[5]],\n            [bl[2], dl[6]],\n            [bl[3], dl[7]],\n            [bl[4], dl[8]],\n            [bl[5], dl[9]],\n            [bl[6], dl[10]],\n            [bl[7], dl[1]],\n            [bl[8], dl[2]],\n            [bl[9], dl[3]],\n            [bl[10], dl[4]],\n            [dl[0], dr[0]],\n            [dl[1], dr[9]],\n            [dl[2], dr[10]],\n            [dl[3], dr[1]],\n            [dl[4], dr[2]],\n            [dl[5], dr[3]],\n            [dl[6], dr[4]],\n            [dl[7], dr[5]],\n            [dl[8], dr[6]],\n            [dl[9], dr[7]],\n            [dl[10], dr[8]],\n            ...makeFaceTurnDefinitions(d)\n        ], 'D++');\n        // R++ / R--\n        this.addTurn([\n            // Top Layer\n            [F[0], U[0]],\n            [F[7], U[3]],\n            [F[8], U[4]],\n            [F[9], U[5]],\n            [F[10], U[6]],\n            [F[1], U[7]],\n            [F[2], U[8]],\n            [F[3], U[9]],\n            [U[0], BL[0]],\n            [U[3], BL[9]],\n            [U[4], BL[10]],\n            [U[5], BL[1]],\n            [U[6], BL[2]],\n            [U[7], BL[3]],\n            [U[8], BL[4]],\n            [U[9], BL[5]],\n            [BL[0], bl[0]],\n            [BL[9], bl[1]],\n            [BL[10], bl[2]],\n            [BL[1], bl[3]],\n            [BL[2], bl[4]],\n            [BL[3], bl[5]],\n            [BL[4], bl[6]],\n            [BL[5], bl[7]],\n            [bl[0], dl[0]],\n            [bl[1], dl[7]],\n            [bl[2], dl[8]],\n            [bl[3], dl[9]],\n            [bl[4], dl[10]],\n            [bl[5], dl[1]],\n            [bl[6], dl[2]],\n            [bl[7], dl[3]],\n            [dl[0], F[0]],\n            [dl[7], F[7]],\n            [dl[8], F[8]],\n            [dl[9], F[9]],\n            [dl[10], F[10]],\n            [dl[1], F[1]],\n            [dl[2], F[2]],\n            [dl[3], F[3]],\n            // Bottom Layer\n            [dr[0], R[0]],\n            [dr[1], R[8]],\n            [dr[2], R[9]],\n            [dr[3], R[10]],\n            [dr[4], R[1]],\n            [dr[5], R[2]],\n            [dr[6], R[3]],\n            [dr[7], R[4]],\n            [dr[8], R[5]],\n            [dr[9], R[6]],\n            [dr[10], R[7]],\n            [R[0], BR[0]],\n            [R[1], BR[7]],\n            [R[2], BR[8]],\n            [R[3], BR[9]],\n            [R[4], BR[10]],\n            [R[5], BR[1]],\n            [R[6], BR[2]],\n            [R[7], BR[3]],\n            [R[8], BR[4]],\n            [R[9], BR[5]],\n            [R[10], BR[6]],\n            [BR[0], b[0]],\n            [BR[1], b[1]],\n            [BR[2], b[2]],\n            [BR[3], b[3]],\n            [BR[4], b[4]],\n            [BR[5], b[5]],\n            [BR[6], b[6]],\n            [BR[7], b[7]],\n            [BR[8], b[8]],\n            [BR[9], b[9]],\n            [BR[10], b[10]],\n            [b[0], d[0]],\n            [b[1], d[5]],\n            [b[2], d[6]],\n            [b[3], d[7]],\n            [b[4], d[8]],\n            [b[5], d[9]],\n            [b[6], d[10]],\n            [b[7], d[1]],\n            [b[8], d[2]],\n            [b[9], d[3]],\n            [b[10], d[4]],\n            [d[0], dr[0]],\n            [d[1], dr[7]],\n            [d[2], dr[8]],\n            [d[3], dr[9]],\n            [d[4], dr[10]],\n            [d[5], dr[1]],\n            [d[6], dr[2]],\n            [d[7], dr[3]],\n            [d[8], dr[4]],\n            [d[9], dr[5]],\n            [d[10], dr[6]],\n            ...makeFaceTurnDefinitions(br)\n        ], 'R++');\n    }\n    U(reverse) {\n        this.doTurn('U', reverse);\n    }\n    R(reverse) {\n        this.doTurn('R', reverse);\n    }\n    F(reverse) {\n        this.doTurn('F', reverse);\n    }\n    dr(reverse) {\n        this.doTurn('dr', reverse);\n    }\n    dl(reverse) {\n        this.doTurn('dl', reverse);\n    }\n    L(reverse) {\n        this.doTurn('L', reverse);\n    }\n    d(reverse) {\n        this.doTurn('d', reverse);\n    }\n    br(reverse) {\n        this.doTurn('br', reverse);\n    }\n    BR(reverse) {\n        this.doTurn('BR', reverse);\n    }\n    BL(reverse) {\n        this.doTurn('BL', reverse);\n    }\n    bl(reverse) {\n        this.doTurn('bl', reverse);\n    }\n    b(reverse) {\n        this.doTurn('b', reverse);\n    }\n    /**\n     * D++ for Pochmann notation. D-- if reverse = false\n     */\n    Dxx(reverse) {\n        this.doTurn('D++', reverse);\n    }\n    /**\n     * R++ for Pochmann notation. R-- if reverse = false\n     */\n    Rxx(reverse) {\n        this.doTurn('R++', reverse);\n    }\n}\n/**\n * Generates turn definitions for rotating a megaminx face clockwise\n * @param face array of sticker ids\n */\nfunction makeFaceTurnDefinitions(face) {\n    return [\n        // Edges\n        [face[1], face[9]],\n        [face[9], face[7]],\n        [face[7], face[5]],\n        [face[5], face[3]],\n        [face[3], face[1]],\n        // Corners\n        [face[2], face[10]],\n        [face[10], face[8]],\n        [face[8], face[6]],\n        [face[6], face[4]],\n        [face[4], face[2]],\n    ];\n}\n","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {ReadonlyVec3} a The first operand\r\n * @param {ReadonlyVec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {ReadonlyQuat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {ReadonlyMat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import { mat4 } from \"gl-matrix\";\nexport class Object3D {\n    constructor() {\n        this.matrix = mat4.create();\n        this.centroid = [0, 0, 0];\n    }\n    translate(vector) {\n        mat4.translate(this.matrix, this.matrix, vector);\n    }\n    rotate(rad, axis) {\n        mat4.rotate(this.matrix, this.matrix, rad, axis);\n    }\n    scale(v) {\n        mat4.scale(this.matrix, this.matrix, v);\n    }\n    setColor(color) {\n        this.color = color;\n    }\n}\n","import { Object3D } from \"./object3d\";\nexport class Group extends Object3D {\n    constructor(objects = []) {\n        super();\n        this.setObjects(objects);\n    }\n    setObjects(objects) {\n        this.objects = objects;\n    }\n    addObject(object) {\n        this.objects.push(object);\n    }\n    setCentroid(vector) {\n        this.centroid = vector;\n    }\n}\n","import { vec3 } from \"gl-matrix\";\nexport function degreesToRadians(degrees) {\n    return (Math.PI * degrees) / 180;\n}\nexport function polarToCartesian(radius, theta) {\n    const x = radius * Math.cos(theta);\n    const y = radius * Math.sin(theta);\n    return [x, y];\n}\nexport function lineSegmentLength(p1, p2) {\n    return Math.sqrt(Math.pow(p2[1] - p1[1], 2) + Math.pow(p2[0] - p1[0], 2));\n}\n/**\n * Calculates the radius of a circle inscribing a regular\n * pentagon given the side length\n */\nexport function pentagonInRadius(length) {\n    return length / (2 * Math.tan(Math.PI / 5));\n}\n/**\n * Calculates the radius of a circle circumscribing a\n * regular pentagon given the side length\n */\nexport function pentagonOutRadius(length) {\n    return length / (2 * Math.sin(Math.PI / 5));\n}\n/**\n * Calculates the radius of the sphere that inscribes a\n * regular dodecahedron given the side length\n */\nexport function dodecahedronInRadius(length) {\n    return (length / 2) * Math.sqrt((5 / 2) + ((11 / 10) * Math.sqrt(5)));\n}\nexport function calculateCentroid(vertices) {\n    let cx = 0, cy = 0, cz = 0;\n    vertices.forEach(vertex => {\n        cx += vertex[0];\n        cy += vertex[1];\n        cz += vertex[2];\n    });\n    cx /= vertices.length;\n    cy /= vertices.length;\n    cz /= vertices.length;\n    return vec3.clone([cx, cy, cz]);\n}\n","import { calculateCentroid } from \"../math/utils\";\n/**\n * Face that will render as a puzzle sticker\n */\nexport class Face {\n    /**\n     * @param indices indices of vertices that make up a face\n     * @param vertices vertices of the geometry to calculate centroid from\n     * @param color color of the sticker\n     */\n    constructor(indices, vertices, color) {\n        this.indices = indices;\n        this.color = color;\n        if (vertices) {\n            this.calculateCentroid(vertices);\n        }\n    }\n    /**\n     * recalculate the centroid of the face.\n     */\n    calculateCentroid(vertices) {\n        this.centroid = calculateCentroid(\n        // Calculate centroid from vertices included in the face\n        vertices.filter((v, i) => this.indices.includes(i)));\n    }\n}\n","import { Object3D } from './object3d';\nimport { calculateCentroid } from '../math/utils';\nexport class Geometry extends Object3D {\n    constructor(vertices, faces) {\n        super();\n        this.vertices = vertices;\n        this.faces = faces;\n        this.centroid = calculateCentroid(this.vertices);\n    }\n}\n","import { Face } from './../geometry/face';\nimport { Geometry } from '../geometry/geometry';\nimport { polarToCartesian, lineSegmentLength, pentagonOutRadius } from '../math/utils';\nexport class DividedPentagon extends Geometry {\n    /**\n     *\n     * @param color\n     * @param layers number of layers\n     * @param length length of entire edge of the outer pentagon\n     */\n    constructor(color, layers = 2, length = 1.6, layerWidth = .4 // TODO: calculate this somehow\n    ) {\n        const outRadius = pentagonOutRadius(length);\n        const radiusDiff = layerWidthToRadiusDiff(layerWidth);\n        const centerOutRadius = outRadius - (radiusDiff * (layers - 1));\n        const vertices = faceVerticies(layers, centerOutRadius, radiusDiff, layerWidth);\n        super(vertices, makeFaces(layers, color, vertices));\n    }\n}\n/**\n * Given the the distance between two parallel sides of the\n * dividen pentagon, calculate the difference in pentagon radius\n */\nfunction layerWidthToRadiusDiff(width) {\n    const aSquared = width * width;\n    const angleRadians = 71 * Math.PI / 180;\n    // Law of cosines\n    const cSquared = 2 * aSquared - (2 * aSquared * Math.cos(angleRadians));\n    const diff = 2 * Math.sqrt(Math.abs(aSquared - cSquared));\n    return diff;\n}\n/**\n * creates mapping for indicies in one layer to another\n * so we can build the geometry for a megaminx face\n */\nfunction downMapping(layer) {\n    if (layer < 1) {\n        return [];\n    }\n    let mapping = [];\n    const layerPoints = 5 + ((layer - 1) * 10);\n    let previousPoints = 5 * (layer - 1) * (layer - 1);\n    for (let i = 0; i < layerPoints; i++) {\n        mapping.push(i + previousPoints);\n        if (i % (layerPoints / 5) === 0) {\n            mapping.push(i + previousPoints);\n        }\n    }\n    mapping.push(mapping.shift());\n    mapping.push(mapping.shift());\n    return mapping;\n}\nfunction layerVertexNumbers(layer) {\n    let previousPoints = 5 * layer * layer;\n    let vertexNumbers = [];\n    for (let i = 0, layerPoints = 5 + (layer * 10); i < layerPoints; i++) {\n        vertexNumbers.push(i + previousPoints);\n    }\n    return vertexNumbers;\n}\nfunction makeFaces(layers, color, vertices) {\n    let faces = [];\n    const firstLayerFace = new Face([0, 1, 2, 3, 4], vertices, color);\n    faces.push(firstLayerFace);\n    let totalPoints = 5;\n    let currentPoint = 5;\n    for (let i = 1; i < layers; i++) {\n        const layerPoints = 5 + (i * 10);\n        totalPoints += layerPoints;\n        const downMap = downMapping(i);\n        const prevLayer = layerVertexNumbers(i - 1);\n        const currentLayer = layerVertexNumbers(i);\n        while (currentPoint < totalPoints) {\n            const currentLayerPoint = currentPoint - (prevLayer[prevLayer.length - 1] + 1);\n            const f1isCorner = (currentLayerPoint) % (layerPoints / 5) === 0;\n            if (f1isCorner) {\n                currentPoint++;\n                continue;\n            }\n            const f2isCorner = (currentLayerPoint + 1) % (layerPoints / 5) === 0;\n            let f1 = currentPoint;\n            let f2 = currentLayer[(currentLayerPoint + 1) % currentLayer.length];\n            let f3 = f2isCorner\n                ? f2 + 1\n                : downMap.shift();\n            let f4 = f2isCorner\n                ? downMap.shift()\n                : prevLayer[(prevLayer.indexOf(f3) - 1 + prevLayer.length) % prevLayer.length];\n            currentPoint++;\n            faces.push(new Face([f1, f2, f3, f4], vertices, color));\n        }\n    }\n    return faces;\n}\n/**\n * Takes two points and extrapolates points along the line they make\n *\n * @param p1 point 1\n * @param p2 point 2\n * @param segments how many points to extrapolate from each direction p1 -> p2 and p2 -> p1\n */\nfunction segmentPoints(p1, p2, segments, layerWidth) {\n    if (segments === 0) {\n        return [[p1[0], p1[1], 0], [p2[0], p2[1], 0]];\n    }\n    const length = lineSegmentLength(p1, p2);\n    let points = [];\n    for (let i = segments; i > 0; i--) {\n        // extrapolate from p1\n        let a = [\n            p1[0] + ((p2[0] - p1[0]) / (length)) * layerWidth * i,\n            p1[1] + ((p2[1] - p1[1]) / (length)) * layerWidth * i,\n            0\n        ];\n        points.unshift(a);\n        // extrapolate from p2\n        let b = [\n            p2[0] + ((p1[0] - p2[0]) / (length)) * layerWidth * i,\n            p2[1] + ((p1[1] - p2[1]) / (length)) * layerWidth * i,\n            0\n        ];\n        points.push(b);\n    }\n    points.unshift([p1[0], p1[1], 0]);\n    points.push([p2[0], p2[1], 0]);\n    return points;\n}\nfunction layerVerticies(layer, radius, layerWidth) {\n    let verticies = [];\n    for (let i = 0; i < 5; i++) {\n        const theta = (i) * (2 * Math.PI) / 5 - Math.PI / 10;\n        const v = polarToCartesian(radius, theta);\n        if (verticies.length > 0) {\n            const lastPoint = verticies[verticies.length - 1];\n            const points = segmentPoints([lastPoint[0], lastPoint[1]], v, layer, layerWidth);\n            points.shift(); // Remove the first, otherwise it's duplicated\n            verticies = verticies.concat(points);\n        }\n        else {\n            verticies.push([v[0], v[1], 0]);\n        }\n    }\n    // Insert segments for last and first\n    const first = verticies[0];\n    const last = verticies[verticies.length - 1];\n    const points = segmentPoints([last[0], last[1]], [first[0], first[1]], layer, layerWidth);\n    points.pop();\n    points.shift();\n    verticies = verticies.concat(points);\n    return verticies;\n}\nfunction faceVerticies(layers, radius, radiusDiff, layerWidth) {\n    let verticies = [];\n    for (let i = 0; i < layers; i++) {\n        const r = radius + (radiusDiff * i);\n        verticies = [...verticies, ...layerVerticies(i, r, layerWidth)];\n    }\n    return verticies;\n}\n","import { WHITE, RED, GREEN, YELLOW, BLUE, ORANGE, LIGHT_GREEN, PINK, LIGHT_YELLOW, DARK_BLUE, GREY, PURPLE } from './colors';\nimport { Group } from './../geometry/group';\nimport { DividedPentagon } from '../geometry/dividedPentagon';\nimport { dodecahedronInRadius } from '../math/utils';\nimport { chunkArray } from '../utils/arrays';\nconst OPTIMAL_LAYER_WIDTH = {\n    2: .3,\n    3: .17,\n    4: .121\n};\nfunction getLayerWidth(length, layers) {\n    return OPTIMAL_LAYER_WIDTH[layers] || (length / (layers * 1.9));\n}\nexport class Megaminx {\n    constructor(layers = 2) {\n        this.layers = layers;\n        const length = .75;\n        const megaminxRadius = dodecahedronInRadius(length);\n        const layerWidth = getLayerWidth(length, layers);\n        // Front\n        this.U = new DividedPentagon(WHITE, layers, length, layerWidth);\n        this.F = new DividedPentagon(RED, layers, length, layerWidth);\n        this.R = new DividedPentagon(BLUE, layers, length, layerWidth);\n        this.dr = new DividedPentagon(PINK, layers, length, layerWidth);\n        this.dl = new DividedPentagon(LIGHT_YELLOW, layers, length, layerWidth);\n        this.L = new DividedPentagon(GREEN, layers, length, layerWidth);\n        // Back\n        this.d = new DividedPentagon(GREY, layers, length, layerWidth);\n        this.br = new DividedPentagon(LIGHT_GREEN, layers, length, layerWidth);\n        this.BR = new DividedPentagon(YELLOW, layers, length, layerWidth);\n        this.BL = new DividedPentagon(PURPLE, layers, length, layerWidth);\n        this.bl = new DividedPentagon(DARK_BLUE, layers, length, layerWidth);\n        this.b = new DividedPentagon(ORANGE, layers, length, layerWidth);\n        this.F.translate([0, 0, megaminxRadius]);\n        this.b.rotate(Math.PI, [0, 0, 1]);\n        this.b.rotate(Math.PI, [0, 1, 0]);\n        this.b.translate([0, 0, megaminxRadius]);\n        this.U.rotate(Math.PI, [0, 0, 1]);\n        this.U.rotate((180 - 116.57) * Math.PI / 180, [1, 0, 0]);\n        this.U.translate([0, 0, megaminxRadius]);\n        this.L.rotate(72 * Math.PI / 180, [0, 0, 1]);\n        this.L.rotate(Math.PI, [0, 0, 1]);\n        this.L.rotate((180 - 116.57) * Math.PI / 180, [1, 0, 0]);\n        this.L.translate([0, 0, megaminxRadius]);\n        this.R.rotate(72 * Math.PI / 180, [0, 0, 1]);\n        this.R.rotate(Math.PI / 5, [0, 0, 1]);\n        this.R.rotate((180 - 116.57) * Math.PI / 180, [1, 0, 0]);\n        this.R.translate([0, 0, megaminxRadius]);\n        this.dr.rotate(72 * Math.PI / 180, [0, 0, 1]);\n        this.dr.rotate(-Math.PI / 5, [0, 0, 1]);\n        this.dr.rotate((180 - 116.57) * Math.PI / 180, [1, 0, 0]);\n        this.dr.translate([0, 0, megaminxRadius]);\n        this.dl.rotate(72 * Math.PI / 180, [0, 0, 1]);\n        this.dl.rotate(-3 * Math.PI / 5, [0, 0, 1]);\n        this.dl.rotate((180 - 116.57) * Math.PI / 180, [1, 0, 0]);\n        this.dl.translate([0, 0, megaminxRadius]);\n        this.BL.rotate(Math.PI / 5, [0, 0, 1]);\n        this.BL.rotate(-116.57 * Math.PI / 180, [1, 0, 0]);\n        this.BL.translate([0, 0, megaminxRadius]);\n        this.BR.rotate(-Math.PI / 5, [0, 0, 1]);\n        this.BR.rotate(-116.57 * Math.PI / 180, [1, 0, 0]);\n        this.BR.translate([0, 0, megaminxRadius]);\n        this.bl.rotate(3 * Math.PI / 5, [0, 0, 1]);\n        this.bl.rotate(-116.57 * Math.PI / 180, [1, 0, 0]);\n        this.bl.translate([0, 0, megaminxRadius]);\n        this.d.rotate(5 * Math.PI / 5, [0, 0, 1]);\n        this.d.rotate(-116.57 * Math.PI / 180, [1, 0, 0]);\n        this.d.translate([0, 0, megaminxRadius]);\n        this.br.rotate(7 * Math.PI / 5, [0, 0, 1]);\n        this.br.rotate(-116.57 * Math.PI / 180, [1, 0, 0]);\n        this.br.translate([0, 0, megaminxRadius]);\n        this.stickers = [\n            this.U, this.F, this.R, this.dr, this.dl, this.L,\n            this.d, this.br, this.BR, this.BL, this.bl, this.b\n        ];\n        this.stickers.forEach(sticker => {\n            sticker.faces[1].color = { value: '#000' };\n        });\n        this.group = new Group(this.stickers);\n    }\n    setColors(colors) {\n        const n = this.layers;\n        const numStickers = (5 * n * n - (5 * n) + 1);\n        let [U, R, F, dr, dl, L, d, br, BR, BL, bl, b] = chunkArray(colors, numStickers);\n        this.setFaceColors(this.U, U);\n        this.setFaceColors(this.R, R);\n        this.setFaceColors(this.F, F);\n        this.setFaceColors(this.d, d);\n        this.setFaceColors(this.L, L);\n        this.setFaceColors(this.b, b);\n        this.setFaceColors(this.dr, dr);\n        this.setFaceColors(this.dl, dl);\n        this.setFaceColors(this.br, br);\n        this.setFaceColors(this.BR, BR);\n        this.setFaceColors(this.BL, BL);\n        this.setFaceColors(this.bl, bl);\n    }\n    setFaceColors(faceStickers, colors) {\n        faceStickers.faces.forEach((f, i) => {\n            if (colors && colors[i]) {\n                f.color = colors[i];\n            }\n        });\n    }\n}\n","export class Scene {\n    constructor() {\n        this.objects = [];\n    }\n    add(geometry) {\n        this.objects.push(geometry);\n    }\n}\n","import { vec3 } from 'gl-matrix';\nimport { Geometry } from '../geometry/geometry';\nimport { Group } from '../geometry/group';\nimport { createSVGElement, clearSVG, createPolygonElement } from '../svg/svg';\nexport class CustomSVGRenderer {\n    constructor(width, height, minx, miny, svgWidth, svgHeight) {\n        this.strokeWidth = '0.035';\n        this.polygons = [];\n        this.domElement = document.createElement('div');\n        this.domElement.className = 'svg-renderer';\n        this.svgElement = createSVGElement(width, height, minx, miny, svgWidth, svgHeight);\n        this.domElement.appendChild(this.svgElement);\n    }\n    render(scene, camera) {\n        this.polygons = [];\n        clearSVG(this.svgElement);\n        // this.sortObjects(scene.objects, camera, []);\n        scene.objects.forEach(object => {\n            this.renderObject3D(object, camera, []);\n        });\n        this.renderPolygons();\n    }\n    renderPolygons() {\n        this.polygons.sort((a, b) => {\n            return a.centroid[2] - b.centroid[2];\n        });\n        this.polygons.forEach(p => this.svgElement.appendChild(p.polygon));\n    }\n    addPolygon(polygon) {\n        this.polygons.push(polygon);\n    }\n    renderObject3D(object, camera, transformations) {\n        if (object instanceof Geometry) {\n            this.renderGeometry(object, camera, transformations);\n        }\n        else if (object instanceof Group) {\n            let group = object;\n            this.sortObjects(group.objects, camera, [group.matrix, ...transformations]);\n            group.objects.forEach(object => {\n                this.renderObject3D(object, camera, [group.matrix, ...transformations]);\n            });\n        }\n    }\n    renderGeometry(object, camera, transformations) {\n        // this.sortFaces(object.faces, object, transformations);\n        object.faces.forEach(face => {\n            let points = [];\n            face.indices\n                .map(index => object.vertices[index])\n                .forEach(vertex => {\n                let objectToScreen = [object.matrix, ...transformations, camera.matrix];\n                let v = this.applyTransformations(vertex, objectToScreen);\n                // Need to flip y to look correct on svg viewbox\n                let screenPoint = vec3.multiply(v, v, [1, -1, 1]);\n                points.push(screenPoint);\n            });\n            const polygon = createPolygonElement(points, face.color || object.color, this.strokeWidth);\n            this.addPolygon({\n                polygon,\n                centroid: this.applyTransformations(face.centroid, [object.matrix, ...transformations])\n            });\n        });\n    }\n    sortFaces(faces, object, transformations) {\n        faces.sort((a, b) => {\n            let aToWorld = [object.matrix, ...transformations];\n            let bToWorld = [object.matrix, ...transformations];\n            let aCentroid = this.applyTransformations(a.centroid, aToWorld);\n            let bCentroid = this.applyTransformations(b.centroid, bToWorld);\n            // TODO actually use camera, currently only sorting by Z\n            return aCentroid[2] - bCentroid[2];\n        });\n    }\n    sortObjects(objects, camera, transformations) {\n        objects.sort((a, b) => {\n            let aToWorld = [a.matrix, ...transformations];\n            let bToWorld = [b.matrix, ...transformations];\n            let aCentroid = this.applyTransformations(a.centroid, aToWorld);\n            let bCentroid = this.applyTransformations(b.centroid, bToWorld);\n            // TODO actually use camera, currently only sorting by Z\n            return aCentroid[2] - bCentroid[2];\n        });\n    }\n    applyTransformations(vertex, transforms) {\n        return transforms.reduce((v, t) => {\n            return vec3.transformMat4(v, v, t);\n        }, vec3.clone(vertex));\n    }\n}\n","export function createSVGElement(width, height, minx, miny, svgWidth, svgHeight) {\n    const svgElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    svgElement.setAttributeNS(null, 'width', width.toString());\n    svgElement.setAttributeNS(null, 'height', height.toString());\n    svgElement.setAttributeNS(null, 'viewBox', `${minx} ${miny} ${svgWidth} ${svgHeight}`);\n    svgElement.setAttributeNS(null, 'id', 'sr-visualizer');\n    return svgElement;\n}\nexport function createPolygonElement(points, color, strokeWidth) {\n    const polygon = document.createElementNS(\"http://www.w3.org/2000/svg\", \"polygon\");\n    const pointsAttribute = makePointsAttributeValue(points);\n    const colorValue = color ? color.value : 'black';\n    polygon.setAttributeNS(null, 'points', pointsAttribute);\n    polygon.setAttributeNS(null, 'fill', colorValue);\n    if (strokeWidth) {\n        polygon.setAttributeNS(null, 'stroke', '#000000');\n        polygon.setAttributeNS(null, 'stroke-width', strokeWidth);\n    }\n    polygon.setAttributeNS(null, 'stroke-linejoin', 'round');\n    return polygon;\n}\nexport function clearSVG(svg) {\n    while (svg.hasChildNodes()) {\n        svg.removeChild(svg.lastChild);\n    }\n}\nfunction makePointsAttributeValue(points) {\n    return points.reduce((pointString, point) => {\n        return `${pointString ? pointString + ' ' : ''}${point[0]}, ${point[1]}`;\n    }, '');\n}\n","import { Geometry } from \"./geometry\";\nimport { vec3 } from \"gl-matrix\";\nimport { Face } from \"./face\";\nexport class Plane extends Geometry {\n    constructor(width, height, color) {\n        let vertices = [\n            vec3.clone([0, 0, 0]),\n            vec3.clone([width, 0, 0]),\n            vec3.clone([width, -height, 0]),\n            vec3.clone([0, -height, 0]),\n        ];\n        let faces = [\n            new Face([0, 1, 2, 3], vertices, color)\n        ];\n        super(vertices, faces);\n    }\n}\n","import { degreesToRadians } from \"./utils\";\nexport const SQRT_3 = Math.sqrt(3);\nexport const ATAN_15_DEG = Math.atan(degreesToRadians(15));\nexport const DEG_30_RADIANS = degreesToRadians(30);\nexport const DEG_60_RADIANS = degreesToRadians(60);\n","import { Geometry } from './geometry';\nimport { Face } from './face';\nimport { SQRT_3 } from '../math/constants';\nexport class Triangle extends Geometry {\n    constructor(a, b, c, color) {\n        let verticies = [\n            a, b, c\n        ];\n        let faces = [\n            new Face([0, 1, 2], verticies, color)\n        ];\n        super(verticies, faces);\n    }\n}\nexport class EquilateralTriangle extends Triangle {\n    constructor(base, color) {\n        let height = base * (SQRT_3 / 2);\n        super([0, 0, 0], [base / 2, height, 0], [base, 0, 0], color);\n    }\n}\n","import { RED, YELLOW, BLUE, ORANGE, GREEN, WHITE } from './colors';\nimport { Group } from \"../geometry/group\";\nimport { Plane } from \"../geometry/plane\";\nimport { Triangle } from \"../geometry/triangle\";\nimport { chunkArray } from '../utils/arrays';\nexport class Skewb {\n    constructor() {\n        const cubeWidth = 1.25;\n        const centerWidth = Math.sqrt(Math.pow(cubeWidth / 2, 2) * 2);\n        const halfWidth = cubeWidth / 2;\n        const red = new Group(this.makeStickers(RED, centerWidth));\n        const yellow = new Group(this.makeStickers(YELLOW, centerWidth, [1, 0, 0]));\n        const blue = new Group(this.makeStickers(BLUE, centerWidth, [0, 1, 0]));\n        const orange = new Group(this.makeStickers(ORANGE, centerWidth));\n        const green = new Group(this.makeStickers(GREEN, centerWidth, [0, 1, 0]));\n        const white = new Group(this.makeStickers(WHITE, centerWidth, [1, 0, 0]));\n        this.U = yellow;\n        this.R = red;\n        this.F = blue;\n        this.L = orange;\n        this.B = green;\n        this.D = white;\n        red.translate([0, 0, halfWidth]);\n        red.rotate(Math.PI, [1, 0, 0]);\n        red.rotate(Math.PI / 2, [0, 0, 1]);\n        orange.rotate(-Math.PI / 2, [0, 0, 1]);\n        orange.translate([0, 0, -halfWidth]);\n        blue.rotate(-Math.PI / 2, [1, 0, 0]);\n        blue.translate([-halfWidth, 0, 0]);\n        green.translate([halfWidth, 0, 0]);\n        green.rotate(Math.PI, [0, 1, 0]);\n        green.rotate(-Math.PI / 2, [1, 0, 0]);\n        yellow.rotate(Math.PI, [0, 1, 0]);\n        yellow.translate([0, halfWidth, 0]);\n        white.translate([0, -halfWidth, 0]);\n        white.rotate(Math.PI, [1, 0, 0]);\n        this.stickers = [red, yellow, blue, orange, green, white];\n        this.group = new Group(this.stickers);\n        this.group.rotate(0.593411946, [1, 0, 0]);\n        this.group.rotate(0.785398, [0, 1, 0]);\n    }\n    makeStickers(color, width, axis) {\n        const center = new Plane(width, width, color);\n        if (axis) {\n            center.rotate(Math.PI / 2, axis);\n        }\n        center.rotate(Math.PI / 4, [0, 0, 1]);\n        center.translate([-width / 2, width / 2, 0]);\n        const triangles = [];\n        for (let i = 0; i < 4; i++) {\n            const triangle = new Triangle([-width / 2, width / 2, 0], [0, width, 0], [width / 2, width / 2, 0], color);\n            if (axis) {\n                triangle.rotate(Math.PI / 2, axis);\n            }\n            triangle.rotate(Math.PI / 2 * i, [0, 0, 1]);\n            triangle.rotate(Math.PI / 4, [0, 0, 1]);\n            triangles.push(triangle);\n        }\n        return [center, ...triangles];\n    }\n    setColors(colors) {\n        const numStickers = 5;\n        let [u, r, f, d, l, b] = chunkArray(colors, numStickers);\n        console.log(u, r, f, d, l, b);\n        this.setFaceColors(this.U, u);\n        this.setFaceColors(this.R, r);\n        this.setFaceColors(this.F, f);\n        this.setFaceColors(this.D, d);\n        this.setFaceColors(this.L, l);\n        this.setFaceColors(this.B, b);\n    }\n    setFaceColors(faceStickers, colors) {\n        faceStickers.objects[0].faces[0].color = colors[0];\n        faceStickers.objects[1].faces[0].color = colors[1];\n        faceStickers.objects[2].faces[0].color = colors[2];\n        faceStickers.objects[3].faces[0].color = colors[4]; // Setting 3 -> 4 and 4 -> 3 now because 4 and 3 are stored incorrectly in this class.\n        faceStickers.objects[4].faces[0].color = colors[3];\n    }\n}\n","import { RED, YELLOW, BLUE, ORANGE, GREEN, WHITE } from './colors';\nimport { Group } from \"../geometry/group\";\nimport { Plane } from \"../geometry/plane\";\nimport { Triangle } from \"../geometry/triangle\";\nimport { chunkArray } from '../utils/arrays';\nexport class SkewbNet {\n    constructor() {\n        const cubeWidth = 1;\n        const centerWidth = Math.sqrt(Math.pow(cubeWidth / 2, 2) * 2);\n        const red = new Group(this.makeStickers(RED, centerWidth, [-cubeWidth, 0, 0]));\n        const yellow = new Group(this.makeStickers(YELLOW, centerWidth, [2 * cubeWidth, 0, 0]));\n        const blue = new Group(this.makeStickers(BLUE, centerWidth, [0, -cubeWidth, 0]));\n        const orange = new Group(this.makeStickers(ORANGE, centerWidth, [cubeWidth, 0, 0]));\n        const green = new Group(this.makeStickers(GREEN, centerWidth, [0, cubeWidth, 0]));\n        const white = new Group(this.makeStickers(WHITE, centerWidth, [0, 0, 0]));\n        this.U = green;\n        this.R = orange;\n        this.F = white;\n        this.L = red;\n        this.B = yellow;\n        this.D = blue;\n        this.stickers = [red, yellow, blue, orange, green, white];\n        this.group = new Group(this.stickers);\n        this.group.translate([-cubeWidth / 4, 0, 0]);\n        this.group.scale([.5, .5, .5]);\n    }\n    makeStickers(color, width, translate) {\n        const center = new Plane(width, width, color);\n        center.translate(translate);\n        center.rotate(Math.PI / 4, [0, 0, 1]);\n        center.translate([-width / 2, width / 2, 0]);\n        const triangles = [];\n        for (let i = 0; i < 4; i++) {\n            const triangle = new Triangle([-width / 2, width / 2, 0], [0, width, 0], [width / 2, width / 2, 0], color);\n            triangle.translate(translate);\n            triangle.rotate(-Math.PI / 2 * i, [0, 0, 1]);\n            triangle.rotate(Math.PI / 4, [0, 0, 1]);\n            triangles.push(triangle);\n        }\n        return [center, ...triangles];\n    }\n    setColors(colors) {\n        const numStickers = 5;\n        let [u, r, f, d, l, b] = chunkArray(colors, numStickers);\n        console.log(u, r, f, d, l, b);\n        this.setFaceColors(this.U, u);\n        this.setFaceColors(this.R, r);\n        this.setFaceColors(this.F, f);\n        this.setFaceColors(this.D, d);\n        this.setFaceColors(this.L, l);\n        this.setFaceColors(this.B, b);\n    }\n    setFaceColors(faceStickers, colors) {\n        faceStickers.objects[0].faces[0].color = colors[0];\n        faceStickers.objects[1].faces[0].color = colors[1];\n        faceStickers.objects[2].faces[0].color = colors[2];\n        faceStickers.objects[3].faces[0].color = colors[4]; // Setting 3 -> 4 and 4 -> 3 now because 4 and 3 are stored incorrectly in this class.\n        faceStickers.objects[4].faces[0].color = colors[3];\n    }\n}\n","import { SkewbSimulator } from './simulator/skewb/skewbSimulator';\nimport { WHITE, BLUE, RED, PINK, LIGHT_GREEN, LIGHT_YELLOW, GREEN, GREY, PURPLE, DARK_BLUE, ORANGE, YELLOW } from './puzzles/colors';\nimport { MegaminxSimulator } from './simulator/megaminx/megaminxSimulator';\nimport { Megaminx } from './puzzles/megaminx';\nimport { mat4 } from 'gl-matrix';\nimport { Camera } from './rendering/camera';\nimport { Scene } from './rendering/scene';\nimport { CustomSVGRenderer } from './rendering/customSvgRenderer';\nimport { Skewb } from './puzzles/skewb';\nimport { SkewbNet } from './puzzles/skewbNet';\nlet camera = new Camera();\nlet g;\nlet rubiksCube;\nlet cubeNet;\nlet cubeTop;\nlet skewb;\nlet skewbNet;\nlet megaminx;\nlet pyraminx;\nlet pyraminxNet;\nlet megaminxNet;\nlet square1;\nlet square1Net;\nlet renderer;\nlet scene;\nlet megaSim = new MegaminxSimulator();\n// megaSim.doTurn('dr');\n// megaSim.doTurn('d');\nlet skewbSim = new SkewbSimulator();\nconsole.log(skewbSim.getValues());\nskewbSim.doTurn('U', false);\nskewbSim.doTurn('B', true);\nskewbSim.doTurn('U', true);\nskewbSim.doTurn('L', true);\nskewbSim.doTurn('U', false);\nskewbSim.doTurn('R', false);\nskewbSim.doTurn('U', false);\nskewbSim.doTurn('B', true);\nskewbSim.doTurn('L', false);\nskewbSim.doTurn('B', true);\nskewbSim.doTurn('L', false);\nconsole.log(skewbSim.getValues());\nlet width = 500;\nlet height = 500;\nlet minx = -.9;\nlet miny = -.9;\nlet svgwidth = 1.8;\nlet svgheight = 1.8;\nlet planewidth = 1;\nlet strokeWidth = .02;\nfunction setInputs() {\n    if (camera && camera.matrix) {\n        camera.matrix.forEach((value, index) => {\n            document.getElementById(`c${index + 1}`).value = value;\n        });\n    }\n    document.getElementById(`width`).value = width;\n    document.getElementById(`height`).value = height;\n    document.getElementById(`minx`).value = minx;\n    document.getElementById(`miny`).value = miny;\n    document.getElementById(`svgw`).value = svgwidth;\n    document.getElementById(`svgh`).value = svgheight;\n    document.getElementById(`pw`).value = planewidth;\n    document.getElementById(`sw`).value = strokeWidth;\n}\nexport function getInputs() {\n    let m1 = parseFloat(document.getElementById(`c1`).value);\n    let m2 = parseFloat(document.getElementById(`c2`).value);\n    let m3 = parseFloat(document.getElementById(`c3`).value);\n    let m4 = parseFloat(document.getElementById(`c4`).value);\n    let m5 = parseFloat(document.getElementById(`c5`).value);\n    let m6 = parseFloat(document.getElementById(`c6`).value);\n    let m7 = parseFloat(document.getElementById(`c7`).value);\n    let m8 = parseFloat(document.getElementById(`c8`).value);\n    let m9 = parseFloat(document.getElementById(`c9`).value);\n    let m10 = parseFloat(document.getElementById(`c10`).value);\n    let m11 = parseFloat(document.getElementById(`c11`).value);\n    let m12 = parseFloat(document.getElementById(`c12`).value);\n    let m13 = parseFloat(document.getElementById(`c13`).value);\n    let m14 = parseFloat(document.getElementById(`c14`).value);\n    let m15 = parseFloat(document.getElementById(`c15`).value);\n    let m16 = parseFloat(document.getElementById(`c16`).value);\n    camera.matrix = mat4.fromValues(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14, m15, m16);\n    width = parseFloat(document.getElementById(`width`).value);\n    height = parseFloat(document.getElementById(`height`).value);\n    minx = parseFloat(document.getElementById(`minx`).value);\n    miny = parseFloat(document.getElementById(`miny`).value);\n    svgwidth = parseFloat(document.getElementById(`svgw`).value);\n    svgheight = parseFloat(document.getElementById(`svgh`).value);\n    planewidth = parseFloat(document.getElementById(`pw`).value);\n    strokeWidth = parseFloat(document.getElementById(`sw`).value);\n}\nexport function renderDemo() {\n    scene = new Scene();\n    renderer = new CustomSVGRenderer(width, height, minx, miny, svgwidth, svgheight);\n    renderer.strokeWidth = \"\" + strokeWidth;\n    // rubiksCube = new RubiksCube(3);\n    // scene.add(rubiksCube.group);\n    // cubeTop = new RubiksCubeTopLayer(3);\n    // scene.add(cubeTop.group);\n    // cubeNet = new RubiksCubeNet(3);\n    // scene.add(cubeNet.group);\n    skewbNet = new SkewbNet();\n    let skewbFaceColors = {\n        back: BLUE,\n        bottom: YELLOW,\n        front: GREEN,\n        left: ORANGE,\n        right: RED,\n        top: WHITE\n    };\n    let { top, right, left, front, bottom, back } = skewbSim.getValues();\n    skewbNet.setColors([...top, ...right, ...front, ...bottom, ...left, ...back].map(face => skewbFaceColors[face]));\n    // scene.add(skewbNet.group);\n    skewb = new Skewb();\n    skewb.setColors([...top, ...right, ...front, ...bottom, ...left, ...back].map(face => skewbFaceColors[face]));\n    scene.add(skewb.group);\n    // pyraminx = new Pyraminx(3);\n    // scene.add(pyraminx.group);\n    // pyraminxNet = new PyraminxNet(3);\n    // scene.add(pyraminxNet.group);\n    megaminx = new Megaminx(2);\n    let megaminxFaceColors = {\n        U: WHITE,\n        F: RED,\n        R: BLUE,\n        dr: PINK,\n        dl: LIGHT_YELLOW,\n        L: GREEN,\n        d: GREY,\n        br: LIGHT_GREEN,\n        BR: YELLOW,\n        BL: PURPLE,\n        bl: DARK_BLUE,\n        b: ORANGE\n    };\n    // let {U, R, F, dr, dl, L, d, br, BR, BL, b, bl} = megaSim.getValues();\n    // megaminx.setColors([...U, ...R, ...F, ...dr, ...dl, ...L, ...d, ...br, ...BR, ...BL, ...bl, ...b].map(face => megaminxFaceColors[face]));\n    // scene.add(megaminx.group);\n    // megaminxNet = new MegaminxNet(2);\n    // scene.add(megaminxNet.group);\n    // square1 = new Square1();\n    // scene.add(square1.group);\n    // square1Net = new Square1Net();\n    // scene.add(square1Net.group);\n    scene.add(g);\n    document.getElementById('idsomething').appendChild(renderer.domElement);\n    renderer.render(scene, camera);\n    setInputs();\n}\ndocument.addEventListener(\"DOMContentLoaded\", function (event) {\n    renderDemo();\n});\nexport function svgStep() {\n    // mat4.translate(camera.matrix, camera.matrix, [0,0,-.5]);\n    [\n        skewb,\n        skewbNet,\n        rubiksCube,\n        cubeNet,\n        megaminx,\n        megaminxNet,\n        pyraminx,\n        pyraminxNet,\n        square1,\n        square1Net,\n        cubeTop\n    ].forEach(puzzle => {\n        if (puzzle && puzzle.group) {\n            puzzle.group.rotate(Math.PI / 32, [1, 1, 0]);\n        }\n    });\n    // g.rotate(Math.PI/32, [1,1,0]);\n    renderer.strokeWidth = '' + strokeWidth;\n    renderer.render(scene, camera);\n}\n","import { mat4 } from \"gl-matrix\";\nexport class Camera {\n    constructor() {\n        this.matrix = mat4.create();\n        mat4.perspective(this.matrix, Math.PI / 2, 1, .1, 1000);\n        mat4.translate(this.matrix, this.matrix, [0, 0, -5]);\n        mat4.scale(this.matrix, this.matrix, [4, 4, 1]);\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(590);\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"sourceRoot":""}