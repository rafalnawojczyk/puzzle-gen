{"version":3,"sources":["webpack://srVisualizer/webpack/universalModuleDefinition","webpack://srVisualizer/./src/puzzles/colors.ts","webpack://srVisualizer/./node_modules/gl-matrix/esm/common.js","webpack://srVisualizer/./node_modules/gl-matrix/esm/vec3.js","webpack://srVisualizer/./node_modules/gl-matrix/esm/mat4.js","webpack://srVisualizer/./src/geometry/object3d.ts","webpack://srVisualizer/./src/geometry/group.ts","webpack://srVisualizer/./src/math/utils.ts","webpack://srVisualizer/./src/geometry/face.ts","webpack://srVisualizer/./src/geometry/geometry.ts","webpack://srVisualizer/./src/geometry/grid.ts","webpack://srVisualizer/./src/puzzles/rubiksCube/rubiksCube.ts","webpack://srVisualizer/./src/utils/arrays.ts","webpack://srVisualizer/./src/rendering/camera.ts","webpack://srVisualizer/./src/rendering/customSvgRenderer.ts","webpack://srVisualizer/./src/svg/svg.ts","webpack://srVisualizer/./src/rendering/scene.ts","webpack://srVisualizer/./src/index.ts","webpack://srVisualizer/webpack/bootstrap","webpack://srVisualizer/webpack/startup","webpack://srVisualizer/webpack/runtime/define property getters","webpack://srVisualizer/webpack/runtime/hasOwnProperty shorthand","webpack://srVisualizer/webpack/runtime/make namespace object"],"names":["root","factory","exports","module","define","amd","this","YELLOW","value","RED","BLUE","WHITE","ORANGE","GREEN","out","ARRAY_TYPE","Float32Array","Array","create","translate","a","v","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","x","y","z","scale","Math","random","PI","hypot","i","arguments","length","sqrt","Object3D","matrix","centroid","vector","rad","axis","s","c","t","b00","b01","b02","b10","b11","b12","b20","b21","b22","len","sin","cos","color","Group","objects","super","setObjects","object","push","calculateCentroid","vertices","cx","cy","cz","forEach","vertex","Face","indices","filter","includes","Geometry","faces","makeGrid","size","halfLength","elementWidth","halfElementWidth","stickers","vOffset","concat","makeRow","hOffset","RubiksCube","cubeWidth","halfWidth","U","R","F","D","L","B","rotate","group","faceStickers","colors","g","numStickers","u","r","f","d","l","b","array","chunkSize","newSize","ceil","fill","map","_","index","slice","chunkArray","setFaceColors","Camera","fovy","aspect","near","far","nf","tan","CustomSVGRenderer","width","height","minx","miny","svgWidth","svgHeight","strokeWidth","polygons","domElement","document","createElement","className","svgElement","createElementNS","setAttributeNS","toString","createSVGElement","appendChild","console","log","scene","camera","svg","hasChildNodes","removeChild","lastChild","clearSVG","renderObject3D","renderPolygons","sort","p","polygon","transformations","renderGeometry","sortObjects","face","points","objectToScreen","applyTransformations","screenPoint","pointsAttribute","reduce","pointString","point","makePointsAttributeValue","colorValue","createPolygonElement","addPolygon","aToWorld","bToWorld","aCentroid","bCentroid","transforms","m","w","Scene","geometry","renderCube","renderer","rubiksCube","add","getElementById","render","addEventListener","event","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag"],"mappings":"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","file":"main.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"srVisualizer\"] = factory();\n\telse\n\t\troot[\"srVisualizer\"] = factory();\n})(this, function() {\nreturn ","// Standard Cube Colors\nexport const YELLOW = { value: '#FFFF00' };\nexport const RED = { value: '#FF0000' };\nexport const BLUE = { value: '#0000FF' };\nexport const WHITE = { value: '#FFFFFF' };\nexport const ORANGE = { value: '#FFA500' };\nexport const GREEN = { value: '#00FF00' };\n// Extra colors for megaminx\nexport const PURPLE = { value: 'purple' };\nexport const GREY = { value: 'grey' };\nexport const DARK_BLUE = { value: 'darkblue' };\nexport const LIGHT_YELLOW = { value: '#ffffb3' };\nexport const LIGHT_GREEN = { value: 'limegreen' };\nexport const PINK = { value: 'hotpink' };\n","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {ReadonlyVec3} a The first operand\r\n * @param {ReadonlyVec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {ReadonlyQuat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {ReadonlyMat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import { mat4 } from \"gl-matrix\";\nexport class Object3D {\n    constructor() {\n        this.matrix = mat4.create();\n        this.centroid = [0, 0, 0];\n    }\n    translate(vector) {\n        mat4.translate(this.matrix, this.matrix, vector);\n    }\n    rotate(rad, axis) {\n        mat4.rotate(this.matrix, this.matrix, rad, axis);\n    }\n    scale(v) {\n        mat4.scale(this.matrix, this.matrix, v);\n    }\n    setColor(color) {\n        this.color = color;\n    }\n}\n","import { Object3D } from \"./object3d\";\nexport class Group extends Object3D {\n    constructor(objects = []) {\n        super();\n        this.setObjects(objects);\n    }\n    setObjects(objects) {\n        this.objects = objects;\n    }\n    addObject(object) {\n        this.objects.push(object);\n    }\n    setCentroid(vector) {\n        this.centroid = vector;\n    }\n}\n","import { vec3 } from \"gl-matrix\";\nexport function degreesToRadians(degrees) {\n    return (Math.PI * degrees) / 180;\n}\nexport function polarToCartesian(radius, theta) {\n    const x = radius * Math.cos(theta);\n    const y = radius * Math.sin(theta);\n    return [x, y];\n}\nexport function lineSegmentLength(p1, p2) {\n    return Math.sqrt(Math.pow(p2[1] - p1[1], 2) + Math.pow(p2[0] - p1[0], 2));\n}\n/**\n * Calculates the radius of a circle inscribing a regular\n * pentagon given the side length\n */\nexport function pentagonInRadius(length) {\n    return length / (2 * Math.tan(Math.PI / 5));\n}\n/**\n * Calculates the radius of a circle circumscribing a\n * regular pentagon given the side length\n */\nexport function pentagonOutRadius(length) {\n    return length / (2 * Math.sin(Math.PI / 5));\n}\n/**\n * Calculates the radius of the sphere that inscribes a\n * regular dodecahedron given the side length\n */\nexport function dodecahedronInRadius(length) {\n    return (length / 2) * Math.sqrt((5 / 2) + ((11 / 10) * Math.sqrt(5)));\n}\nexport function calculateCentroid(vertices) {\n    let cx = 0, cy = 0, cz = 0;\n    vertices.forEach(vertex => {\n        cx += vertex[0];\n        cy += vertex[1];\n        cz += vertex[2];\n    });\n    cx /= vertices.length;\n    cy /= vertices.length;\n    cz /= vertices.length;\n    return vec3.clone([cx, cy, cz]);\n}\n/**\n * generates an array with values in a given range by step\n *\n * ex. range(1, 5) -> [1, 2, 3, 4, 5]\n * ex. range(5, 2) -> [5, 4, 3, 2]\n *\n * @param from start of range\n * @param to end of range\n */\nexport function range(from, to) {\n    if (from === to) {\n        return [from];\n    }\n    const increment = from < to ? 1 : -1;\n    let values = [];\n    for (let current = from; current != to; current += increment) {\n        values.push(current);\n    }\n    values.push(to);\n    return values;\n}\n","import { calculateCentroid } from \"../math/utils\";\n/**\n * Face that will render as a puzzle sticker\n */\nexport class Face {\n    /**\n     * @param indices indices of vertices that make up a face\n     * @param vertices vertices of the geometry to calculate centroid from\n     * @param color color of the sticker\n     */\n    constructor(indices, vertices, color) {\n        this.indices = indices;\n        this.color = color;\n        if (vertices) {\n            this.calculateCentroid(vertices);\n        }\n    }\n    /**\n     * recalculate the centroid of the face.\n     */\n    calculateCentroid(vertices) {\n        this.centroid = calculateCentroid(\n        // Calculate centroid from vertices included in the face\n        vertices.filter((v, i) => this.indices.includes(i)));\n    }\n}\n","import { Object3D } from './object3d';\nimport { calculateCentroid } from '../math/utils';\nexport class Geometry extends Object3D {\n    constructor(vertices, faces) {\n        super();\n        this.vertices = vertices;\n        this.faces = faces;\n        this.centroid = calculateCentroid(this.vertices);\n    }\n}\n","import { Face } from './face';\nimport { Geometry } from './geometry';\n/**\n * Makes a (size*size) grid of colored planes for the\n * rubiks cube stickers. Indexed from the top\n * left to bottom right. See Below\n *\n *    0 1 2\n *    3 4 5\n *    6 7 8\n *\n * @param length length of the grid\n * @param size number of elements to segment grid into\n * @param color\n */\nexport function makeGrid(length, size, color) {\n    const halfLength = length / 2;\n    const elementWidth = length / size;\n    const halfElementWidth = elementWidth / 2;\n    let stickers = [];\n    for (let i = 0; i < size; i++) {\n        let vOffset = -(-halfLength + halfElementWidth + (elementWidth * i));\n        stickers = stickers.concat(makeRow(length, size, color, vOffset));\n    }\n    return stickers;\n}\n/**\n * Makes a row of planes for the rubiks cube stickers.\n * indexed from left to right\n *\n *     0 1 2\n *\n * @param length length of the row horizontally\n * @param size number of elements to segment row into\n * @param color color\n * @param vOffset vertical offset. places vertices of row vertically offset by this amount from x axis\n */\nexport function makeRow(length, size, color, vOffset = 0) {\n    const halfLength = length / 2;\n    const elementWidth = length / size;\n    const halfElementWidth = elementWidth / 2;\n    let stickers = [];\n    for (let i = 0; i < size; i++) {\n        let hOffset = -halfLength + halfElementWidth + (elementWidth * i);\n        let vertices = [\n            [-halfElementWidth + hOffset, halfElementWidth + vOffset, 0],\n            [halfElementWidth + hOffset, halfElementWidth + vOffset, 0],\n            [halfElementWidth + hOffset, -halfElementWidth + vOffset, 0],\n            [-halfElementWidth + hOffset, -halfElementWidth + vOffset, 0],\n        ];\n        let faces = [\n            new Face([0, 1, 2, 3], vertices, color)\n        ];\n        stickers.push(new Geometry(vertices, faces));\n    }\n    return stickers;\n}\n","import { YELLOW, RED, BLUE, WHITE, ORANGE, GREEN } from './../colors';\nimport { Group } from \"../../geometry/group\";\nimport { makeGrid } from '../../geometry/grid';\nimport { chunkArray } from '../../utils/arrays';\nexport class RubiksCube {\n    constructor(size) {\n        this.size = size;\n        const cubeWidth = 1.5;\n        const halfWidth = cubeWidth / 2;\n        this.U = new Group(makeGrid(cubeWidth, size, YELLOW));\n        this.R = new Group(makeGrid(cubeWidth, size, RED));\n        this.F = new Group(makeGrid(cubeWidth, size, BLUE));\n        this.D = new Group(makeGrid(cubeWidth, size, WHITE));\n        this.L = new Group(makeGrid(cubeWidth, size, ORANGE));\n        this.B = new Group(makeGrid(cubeWidth, size, GREEN));\n        this.U.rotate(-Math.PI / 2, [0, 1, 0]);\n        this.U.rotate(-Math.PI / 2, [1, 0, 0]);\n        this.U.translate([0, 0, halfWidth]);\n        this.R.translate([0, 0, halfWidth]);\n        this.F.rotate(-Math.PI / 2, [0, 1, 0]);\n        this.F.translate([0, 0, halfWidth]);\n        this.D.rotate(-Math.PI / 2, [0, 1, 0]);\n        this.D.rotate(Math.PI / 2, [1, 0, 0]);\n        this.D.translate([0, 0, halfWidth]);\n        this.L.rotate(-Math.PI, [0, 1, 0]);\n        this.L.translate([0, 0, halfWidth]);\n        this.B.rotate(Math.PI / 2, [0, 1, 0]);\n        this.B.translate([0, 0, halfWidth]);\n        this.stickers = [\n            this.U,\n            this.R,\n            this.F,\n            this.D,\n            this.L,\n            this.B\n        ];\n        this.group = new Group(this.stickers);\n        this.group.translate([0, 0, -1]);\n        this.group.rotate(0.593411946, [1, 0, 0]);\n        this.group.rotate(0.785398, [0, 1, 0]);\n    }\n    setFaceColors(faceStickers, colors) {\n        faceStickers.objects.forEach((g, i) => {\n            if (colors && colors[i]) {\n                g.faces[0].color = colors[i];\n            }\n        });\n    }\n    setColors(colors) {\n        const numStickers = this.size * this.size;\n        let [u, r, f, d, l, b] = chunkArray(colors, numStickers);\n        this.setFaceColors(this.U, u);\n        this.setFaceColors(this.R, r);\n        this.setFaceColors(this.F, f);\n        this.setFaceColors(this.D, d);\n        this.setFaceColors(this.L, l);\n        this.setFaceColors(this.B, b);\n    }\n}\n","/**\n * Splits an array into chunks\n *\n * @param array original array\n * @param chunkSize\n *\n * @example\n * ```\n * chunkArray([1,2,3,4,5,6], 2)\n * // returns [[1,2], [3,4], [5,6]]\n * ```\n */\nexport function chunkArray(array, chunkSize) {\n    const newSize = Math.ceil(array.length / chunkSize);\n    return new Array(newSize)\n        .fill(null)\n        .map((_, index) => array.slice(index * chunkSize, (index + 1) * chunkSize));\n}\n/**\n * Generates an array of set size filled with a specific value\n *\n * @param length length of the array\n * @param value value to fill the array with\n */\nexport function fillArray(length, value) {\n    return new Array(length).fill(value);\n}\n","import { mat4 } from \"gl-matrix\";\nexport class Camera {\n    constructor() {\n        this.matrix = mat4.create();\n        mat4.perspective(this.matrix, Math.PI / 2, 1, .1, 1000);\n        mat4.translate(this.matrix, this.matrix, [0, 0, -5]);\n        mat4.scale(this.matrix, this.matrix, [4, 4, 1]);\n    }\n}\n","import { vec3 } from 'gl-matrix';\nimport { Geometry } from '../geometry/geometry';\nimport { Group } from '../geometry/group';\nimport { createSVGElement, clearSVG, createPolygonElement } from '../svg/svg';\nexport class CustomSVGRenderer {\n    constructor(width, height, minx, miny, svgWidth, svgHeight) {\n        this.strokeWidth = '0.035';\n        this.polygons = [];\n        this.domElement = document.createElement('div');\n        this.domElement.className = 'svg-renderer';\n        this.svgElement = createSVGElement(width, height, minx, miny, svgWidth, svgHeight);\n        this.domElement.appendChild(this.svgElement);\n        console.log(this.svgElement);\n    }\n    render(scene, camera) {\n        this.polygons = [];\n        clearSVG(this.svgElement);\n        // this.sortObjects(scene.objects, camera, []);\n        scene.objects.forEach(object => {\n            this.renderObject3D(object, camera, []);\n        });\n        this.renderPolygons();\n    }\n    renderPolygons() {\n        this.polygons.sort((a, b) => {\n            return a.centroid[2] - b.centroid[2];\n        });\n        this.polygons.forEach(p => this.svgElement.appendChild(p.polygon));\n    }\n    addPolygon(polygon) {\n        this.polygons.push(polygon);\n    }\n    renderObject3D(object, camera, transformations) {\n        if (object instanceof Geometry) {\n            this.renderGeometry(object, camera, transformations);\n        }\n        else if (object instanceof Group) {\n            let group = object;\n            this.sortObjects(group.objects, camera, [group.matrix, ...transformations]);\n            group.objects.forEach(object => {\n                this.renderObject3D(object, camera, [group.matrix, ...transformations]);\n            });\n        }\n    }\n    renderGeometry(object, camera, transformations) {\n        // this.sortFaces(object.faces, object, transformations);\n        object.faces.forEach(face => {\n            let points = [];\n            face.indices\n                .map(index => object.vertices[index])\n                .forEach(vertex => {\n                let objectToScreen = [object.matrix, ...transformations, camera.matrix];\n                let v = this.applyTransformations(vertex, objectToScreen);\n                // Need to flip y to look correct on svg viewbox\n                let screenPoint = vec3.multiply(v, v, [1, -1, 1]);\n                points.push(screenPoint);\n            });\n            const polygon = createPolygonElement(points, face.color || object.color, this.strokeWidth);\n            this.addPolygon({\n                polygon,\n                centroid: this.applyTransformations(face.centroid, [object.matrix, ...transformations])\n            });\n        });\n    }\n    sortFaces(faces, object, transformations) {\n        faces.sort((a, b) => {\n            let aToWorld = [object.matrix, ...transformations];\n            let bToWorld = [object.matrix, ...transformations];\n            let aCentroid = this.applyTransformations(a.centroid, aToWorld);\n            let bCentroid = this.applyTransformations(b.centroid, bToWorld);\n            // TODO actually use camera, currently only sorting by Z\n            return aCentroid[2] - bCentroid[2];\n        });\n    }\n    sortObjects(objects, camera, transformations) {\n        objects.sort((a, b) => {\n            let aToWorld = [a.matrix, ...transformations];\n            let bToWorld = [b.matrix, ...transformations];\n            let aCentroid = this.applyTransformations(a.centroid, aToWorld);\n            let bCentroid = this.applyTransformations(b.centroid, bToWorld);\n            // TODO actually use camera, currently only sorting by Z\n            return aCentroid[2] - bCentroid[2];\n        });\n    }\n    applyTransformations(vertex, transforms) {\n        return transforms.reduce((v, t) => {\n            return vec3.transformMat4(v, v, t);\n        }, vec3.clone(vertex));\n    }\n}\n","export function createSVGElement(width, height, minx, miny, svgWidth, svgHeight) {\n    const svgElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    svgElement.setAttributeNS(null, 'width', width.toString());\n    svgElement.setAttributeNS(null, 'height', height.toString());\n    svgElement.setAttributeNS(null, 'viewBox', `${minx} ${miny} ${svgWidth} ${svgHeight}`);\n    svgElement.setAttributeNS(null, 'id', 'sr-visualizer');\n    return svgElement;\n}\nexport function createPolygonElement(points, color, strokeWidth) {\n    const polygon = document.createElementNS(\"http://www.w3.org/2000/svg\", \"polygon\");\n    const pointsAttribute = makePointsAttributeValue(points);\n    const colorValue = color ? color.value : 'black';\n    polygon.setAttributeNS(null, 'points', pointsAttribute);\n    polygon.setAttributeNS(null, 'fill', colorValue);\n    if (strokeWidth) {\n        polygon.setAttributeNS(null, 'stroke', '#000000');\n        polygon.setAttributeNS(null, 'stroke-width', strokeWidth);\n    }\n    polygon.setAttributeNS(null, 'stroke-linejoin', 'round');\n    return polygon;\n}\nexport function clearSVG(svg) {\n    while (svg.hasChildNodes()) {\n        svg.removeChild(svg.lastChild);\n    }\n}\nfunction makePointsAttributeValue(points) {\n    return points.reduce((pointString, point) => {\n        return `${pointString ? pointString + ' ' : ''}${point[0]}, ${point[1]}`;\n    }, '');\n}\n","export class Scene {\n    constructor() {\n        this.objects = [];\n    }\n    add(geometry) {\n        this.objects.push(geometry);\n    }\n}\n","// import { PyraminxSimulator } from './simulator/pyraminx/pyraminxSimulator';\n// import { mat4 } from 'gl-matrix';\n// import { RubiksCubeSimulator } from './simulator/rubiksCube/rubiksCubeSimulator';\n// import { Scene } from './rendering/scene';\n// import { CustomSVGRenderer } from './rendering/customSvgRenderer';\n// import { Square1Net } from './puzzles/square1/square1Net';\n// import { Square1 } from './puzzles/square1/square1';\n// import { MegaminxNet } from './puzzles/megaminxNet';\n// import { PyraminxNet } from './puzzles/pyraminxNet';\n// import { Pyraminx } from './puzzles/pyraminx';\n// import { Megaminx } from './puzzles/megaminx';\n// import { SkewbNet } from './puzzles/skewbNet';\n// import { Skewb } from './puzzles/skewb';\n// import { RubiksCubeTopLayer } from './puzzles/rubiksCube/rubiksCubeTop';\n// import { RubiksCubeNet } from './puzzles/rubiksCube/rubiksCubeNet';\n// import { RubiksCube } from './puzzles/rubiksCube/rubiksCube';\n// import { Group } from './geometry/group';\n// import { Camera } from './rendering/camera';\n// import { YELLOW, RED, BLUE, WHITE, ORANGE, GREEN } from './puzzles/colors';\nimport { RubiksCube } from \"./puzzles/rubiksCube/rubiksCube\";\nimport { Camera } from \"./rendering/camera\";\nimport { CustomSVGRenderer } from \"./rendering/customSvgRenderer\";\nimport { Scene } from \"./rendering/scene\";\n// let camera: Camera = new Camera();\n// let g: Group;\n// let rubiksCube: RubiksCube;\n// let cubeNet: RubiksCubeNet;\n// let cubeTop: RubiksCubeTopLayer;\n// let skewb: Skewb;\n// let skewbNet: SkewbNet;\n// let megaminx: Megaminx;\n// let pyraminx: Pyraminx;\n// let pyraminxNet: PyraminxNet;\n// let megaminxNet: MegaminxNet;\n// let square1: Square1;\n// let square1Net: Square1Net;\n// let renderer: CustomSVGRenderer;\n// let scene;\n// let width: number = 500;\n// let height: number = 500;\n// let minx: number = -.9;\n// let miny: number = -.9;\n// let svgwidth: number = 1.8;\n// let svgheight: number = 1.8;\n// let planewidth: number = 1;\n// let strokeWidth: number = .02;\n// function setInputs() {\n//   if (camera && camera.matrix) {\n//     camera.matrix.forEach((value, index) => {\n//       (<any>document.getElementById(`c${index + 1}`)).value = value;\n//     });\n//   }\n//   (<any>document.getElementById(`width`)).value = width;\n//   (<any>document.getElementById(`height`)).value = height;\n//   (<any>document.getElementById(`minx`)).value = minx;\n//   (<any>document.getElementById(`miny`)).value = miny;\n//   (<any>document.getElementById(`svgw`)).value = svgwidth;\n//   (<any>document.getElementById(`svgh`)).value = svgheight;\n//   (<any>document.getElementById(`pw`)).value = planewidth;\n//   (<any>document.getElementById(`sw`)).value = strokeWidth;\n// }\n// export function getInputs() {\n//   let m1 = parseFloat((<any>document.getElementById(`c1`)).value);\n//   let m2 = parseFloat((<any>document.getElementById(`c2`)).value);\n//   let m3 = parseFloat((<any>document.getElementById(`c3`)).value);\n//   let m4 = parseFloat((<any>document.getElementById(`c4`)).value);\n//   let m5 = parseFloat((<any>document.getElementById(`c5`)).value);\n//   let m6 = parseFloat((<any>document.getElementById(`c6`)).value);\n//   let m7 = parseFloat((<any>document.getElementById(`c7`)).value);\n//   let m8 = parseFloat((<any>document.getElementById(`c8`)).value);\n//   let m9 = parseFloat((<any>document.getElementById(`c9`)).value);\n//   let m10 = parseFloat((<any>document.getElementById(`c10`)).value);\n//   let m11 = parseFloat((<any>document.getElementById(`c11`)).value);\n//   let m12 = parseFloat((<any>document.getElementById(`c12`)).value);\n//   let m13 = parseFloat((<any>document.getElementById(`c13`)).value);\n//   let m14 = parseFloat((<any>document.getElementById(`c14`)).value);\n//   let m15 = parseFloat((<any>document.getElementById(`c15`)).value);\n//   let m16 = parseFloat((<any>document.getElementById(`c16`)).value);\n//   camera.matrix = mat4.fromValues(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14, m15, m16)\n//   width = parseFloat((<any>document.getElementById(`width`)).value);\n//   height = parseFloat((<any>document.getElementById(`height`)).value);\n//   minx = parseFloat((<any>document.getElementById(`minx`)).value);\n//   miny = parseFloat((<any>document.getElementById(`miny`)).value);\n//   svgwidth = parseFloat((<any>document.getElementById(`svgw`)).value);\n//   svgheight = parseFloat((<any>document.getElementById(`svgh`)).value);\n//   planewidth = parseFloat((<any>document.getElementById(`pw`)).value);\n//   strokeWidth = parseFloat((<any>document.getElementById(`sw`)).value);\n// }\n// export function renderDemo() {\n//   scene = new Scene();\n//   renderer = new CustomSVGRenderer(width, height, minx, miny, svgwidth, svgheight);\n//   renderer.strokeWidth = \"\" + strokeWidth;\n//   let cubeSim = new RubiksCubeSimulator(3);\n//   cubeSim.Z();\n//   let cubeFaceColors = {\n//     U: YELLOW,\n//     R: RED,\n//     F: BLUE,\n//     D: WHITE,\n//     L: ORANGE,\n//     B: GREEN,\n//   }\n//   const {U, R, F, D, L, B} = cubeSim.getValues();\n//   rubiksCube = new RubiksCube(3);\n//   // rubiksCube.setColors([...U, ...R, ...F, ...D, ...L, ...B].map(face => cubeFaceColors[face]));\n//   // scene.add(rubiksCube.group);\n//   cubeTop = new RubiksCubeTopLayer(3);\n//   // cubeTop.setColors([...U, ...R, ...F, ...D, ...L, ...B].map(face => cubeFaceColors[face]));\n//   // scene.add(cubeTop.group);\n//   cubeNet = new RubiksCubeNet(3);\n//   cubeNet.setColors([...U, ...R, ...F, ...D, ...L, ...B].map(face => cubeFaceColors[face]));\n//   scene.add(cubeNet.group);\n//   // skewbNet = new SkewbNet();\n//   // scene.add(skewbNet.group);\n//   // skewb = new Skewb();\n//   // scene.add(skewb.group);\n//   let pyraminxSim = new PyraminxSimulator();\n//   let pyraminxFaceColors = {\n//     left: BLUE,\n//     top: YELLOW,\n//     right: GREEN,\n//     back: RED\n//   }\n//   let {top, left, right, back} = pyraminxSim.getValues();\n//   pyraminx = new Pyraminx(3);\n//   // pyraminx.setColors([...left, ...right, ...top, ...back].map(face => pyraminxFaceColors[face]));\n//   // scene.add(pyraminx.group);\n//   pyraminxNet = new PyraminxNet(3);\n//   // pyraminxNet.setColors([...left, ...right, ...top, ...back].map(face => pyraminxFaceColors[face]));\n//   // scene.add(pyraminxNet.group);\n//   megaminx = new Megaminx(2);\n//   // let megaminxFaceColors = {\n//   //   U: WHITE,\n//   //   F: RED,\n//   //   R: BLUE,\n//   //   dr: PINK,\n//   //   dl: LIGHT_YELLOW,\n//   //   L: GREEN,\n//   //   d: GREY,\n//   //   br: LIGHT_GREEN,\n//   //   BR: YELLOW,\n//   //   BL: PURPLE,\n//   //   bl: DARK_BLUE,\n//   //   b: ORANGE\n//   // }\n//   // let {U, R, F, dr, dl, L, d, br, BR, BL, b, bl} = megaSim.getValues();\n//   // megaminx.setColors([...U, ...R, ...F, ...dr, ...dl, ...L, ...d, ...br, ...BR, ...BL, ...bl, ...b].map(face => megaminxFaceColors[face]));\n//   // scene.add(megaminx.group);\n//   // megaminxNet = new MegaminxNet(2);\n//   // scene.add(megaminxNet.group);\n//   // square1 = new Square1();\n//   // scene.add(square1.group);\n//   // square1Net = new Square1Net();\n//   // scene.add(square1Net.group);\n//   scene.add(g);\n//   document.getElementById('idsomething').appendChild(renderer.domElement);\n//   renderer.render(scene, camera);\n//   setInputs();\n// }\n// document.addEventListener(\"DOMContentLoaded\", function (event) {\n//   renderDemo();\n// });\n// export function svgStep() {\n//   // mat4.translate(camera.matrix, camera.matrix, [0,0,-.5]);\n//   [\n//     skewb,\n//     skewbNet,\n//     rubiksCube,\n//     cubeNet,\n//     megaminx,\n//     megaminxNet,\n//     pyraminx,\n//     pyraminxNet,\n//     square1,\n//     square1Net,\n//     cubeTop\n//   ].forEach(puzzle => {\n//     if (puzzle && puzzle.group) {\n//       puzzle.group.rotate(Math.PI/32, [0,1,1 ]);\n//     } \n//   });\n//   // g.rotate(Math.PI/32, [1,1,0]);\n//   renderer.strokeWidth = '' + strokeWidth;\n//   renderer.render(scene, camera);\n// }\nexport function renderCube() {\n    let width = 500;\n    let height = 500;\n    let minx = -.9;\n    let miny = -.9;\n    let svgwidth = 1.8;\n    let svgheight = 1.8;\n    let planewidth = 1;\n    let strokeWidth = .02;\n    let camera = new Camera();\n    let scene = new Scene();\n    let renderer = new CustomSVGRenderer(width, height, minx, miny, svgwidth, svgheight);\n    renderer.strokeWidth = \"\" + strokeWidth;\n    let rubiksCube = new RubiksCube(5);\n    scene.add(rubiksCube.group);\n    renderer.strokeWidth = '' + strokeWidth;\n    document.getElementById('idsomething').appendChild(renderer.domElement);\n    renderer.render(scene, camera);\n}\ndocument.addEventListener(\"DOMContentLoaded\", function (event) {\n    console.log(1);\n    renderCube();\n});\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(849);\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"sourceRoot":""}